// https://material.io/design/interaction/states.html

@use '../theme/_mixins.scss' as theme;
@use "../_platform.scss" as platform;

@function _resortColors($list) {
  $newList: ();
  @each $color in $list {
    @if (index($newList, $color) == null) {
      $newList: append($newList, $color);
      $palette: theme.getThemeParamValue($color);
      @each $color2 in $list {
        @if (index($newList, $color2) == null) {
          $palette2: theme.getThemeParamValue($color2);
          @if ($palette == $palette2) {
            $newList: append($newList, $color2);
          }
        }
      }
    }
  }
  @return $newList;
}

// Resort colors with aliases for CSS rule merging
$sortedInks: _resortColors(theme.$inks);
$sortedSurfaces: _resortColors(theme.$surfaces);

$themeValues: (
  default-ink:                theme.$foreground,

  high-ink-opacity:           theme.$high-opacity,
  medium-ink-opacity:         theme.$medium-opacity,
  inactive-ink-opacity:       theme.$inactive-opacity,
  divider-ink-opacity:        theme.$divider-opacity,

  card-surface:           ((#fff, null),               (#121212, null)),
  binary-surface:         ((#fff, null),               (#000, null)),
) !default;

@each $color in $sortedInks {
  $newInkMap: (
    #{$color}-default-ink: (($color, nth(theme.$default-color-ink, 1),null), ($color, nth(theme.$default-color-ink, 2), null)),
    #{$color}-contrast-ink: (($color, nth(theme.$contrast-color-ink, 1),null), ($color, nth(theme.$contrast-color-ink, 2), null)),
    #{$color}-light-ink: (($color, nth(theme.$light-color-ink, 1),null), ($color, nth(theme.$light-color-ink, 2), null)),
  );
  $themeValues: map-merge($themeValues, $newInkMap);
}

@each $color in $sortedSurfaces {
  $newSurfaceMap: (
    #{$color}-default-surface: (($color, nth(theme.$default-color-surface, 1),null), ($color, nth(theme.$default-color-surface, 2), null)),
    #{$color}-alt-surface: (($color, nth(theme.$alt-color-surface, 1),null), ($color, nth(theme.$alt-color-surface, 2), null)),
  );
  $themeValues: map-merge($themeValues, $newSurfaceMap);
}

@function getThemeValue($key, $type) {
  @return theme.getThemeValue('color', $themeValues, $key, $type);
}

@mixin addThemeRules($type: 'var') {
  @if ($type == 'var') {
    .mdw-theme {
      /** Surface Colors **/

      &[mdw-surface] {
        background-color: RGB(var(--mdw-surface));
      }
    }

    svg.mdw-theme[mdw-surface] {
      background-color: transparent;

      fill: RGB(var(--mdw-surface));
    }

    .mdw-theme {
      &[mdw-surface]:not([mdw-ink]) {
        --mdw-ink: #{getThemeValue("default-ink", $type)};
        --mdw-ink-opacity: #{getThemeValue("high-ink-opacity", $type)};
        color: RGBA(var(--mdw-ink),var(--mdw-ink-opacity));
      }

      &[mdw-surface="white"] {
        --mdw-surface: 255,255,255;
      }

      &[mdw-surface="black"] {
        --mdw-surface: 0,0,0;
      }

      &[mdw-surface="binary"] {
        --mdw-surface: #{getThemeValue("binary-surface", $type)};
      }
    
      &[mdw-surface="card"] {
        --mdw-surface: #{getThemeValue("card-surface", $type)};
      }

      @each $surface in $sortedSurfaces {
        &[mdw-surface~="#{$surface}"] {
          --mdw-surface: #{getThemeValue("#{$surface}-default-surface", $type)};
        }
      }
      
      @each $surface in $sortedSurfaces {
        &[mdw-surface~="#{$surface}"] {
          $palette: theme.getThemeParamValue($surface);
          @each $tone in theme.$surface-tones {
            $value: map-get($palette, $tone);
            --#{$tone}-surface: #{red($value),green($value),blue($value)};
          }
        }
      }

      @each $surface in $sortedSurfaces {
        &[mdw-surface="#{$surface} alt"] {
          --mdw-surface: #{getThemeValue("#{$surface}-alt-surface", $type)};
        }
      }

      @each $tone in theme.$surface-tones {
        &[mdw-surface~="#{$tone}"] {
          --mdw-surface: var(--#{$tone}-surface);
        }
      }

      /** Ink Color **/

      &[mdw-ink] {
        --mdw-ink: #{getThemeValue("default-ink", $type)};
        --mdw-ink-opacity: 1;
        color: RGBA(var(--mdw-ink),var(--mdw-ink-opacity));
      }

      &[mdw-ink=""],
      &[mdw-ink~="default"] {
        --mdw-ink: #{getThemeValue("default-ink", $type)};
        --mdw-ink-opacity: #{getThemeValue("high-ink-opacity", $type)};
      }

      &[mdw-ink~="white"] {
        --mdw-ink: 255,255,255;
      }

      &[mdw-ink~="black"] {
        --mdw-ink: 0,0,0;
      }

      @each $ink in $sortedInks {
        &[mdw-ink~="#{$ink}"] {
          --mdw-ink: #{getThemeValue("#{$ink}-default-ink", $type)};
        }
      }

      @each $ink in $sortedInks {
        &[mdw-ink~="#{$ink}"] {
          $palette: theme.getThemeParamValue($ink);
          @each $tone in theme.$ink-tones {
            $value: map-get($palette, $tone);
            --mdw-ink-#{$tone}: #{red($value),green($value),blue($value)};
          }
        }
      }

      @each $ink in $sortedInks {
        &[mdw-ink^="#{$ink} contrast"] {
          --mdw-ink: #{getThemeValue("#{$ink}-contrast-ink", $type)};
        }
      }

      @each $ink in $sortedInks {
        @if ($ink != 'background') {
          &[mdw-ink^="#{$ink} light"] {
            --mdw-ink: #{getThemeValue("#{$ink}-light-ink", $type)};
          }
        }
      }

      @each $tone in theme.$ink-tones {
        &[mdw-ink~="#{$tone}"] {
          --mdw-ink: var(--mdw-ink-#{$tone});
        }
      }

      /** Ink Opacity **/

      &[mdw-ink~="solid"] {
        --mdw-ink-opacity: 1;
      }

      &[mdw-ink~="high"] {
        --mdw-ink-opacity: #{getThemeValue("high-ink-opacity", $type)};
      }
    
      &[mdw-ink~="medium"] {
        --mdw-ink-opacity: #{getThemeValue("medium-ink-opacity", $type)};
      }
    
      &[mdw-ink~="inactive"] {
        --mdw-ink-opacity: #{getThemeValue("inactive-ink-opacity", $type)};
      }
    
      &[mdw-ink~="divider"] {
        --mdw-ink-opacity: #{getThemeValue("divider-ink-opacity", $type)};
      }

      /** Border Ink **/

      &[mdw-border-ink] {
        border-color: #{RGBA(var(--mdw-ink), getThemeValue("divider-ink-opacity", $type))};
      }

      &[mdw-border-ink="default"] {
        border-color: #{RGBA(getThemeValue("default-ink", $type), getThemeValue("divider-ink-opacity", $type))};
      }

      &[mdw-border-ink="none"] {
        border-color: transparent;
      }
    }
  } @else {
    & {
      &[mdw-ink="default"],
      &[mdw-surface]:not([mdw-ink]) {
        color: RGBA(getThemeValue("default-ink", $type),getThemeValue("high-ink-opacity", $type));
      }
      
      &[mdw-surface="binary"] {
        background-color: RGB(getThemeValue("binary-surface", $type));
      }
    
      &[mdw-surface="card"] {
        background-color: RGB(getThemeValue("card-surface", $type));
      }

      @each $surface in $sortedSurfaces {
        &[mdw-surface="#{$surface}"] {
          background-color: RGB(getThemeValue("#{$surface}-default-surface", $type));
        }
      }

      @each $surface in $sortedSurfaces {
        &[mdw-surface="#{$surface} alt"] {
          background-color: RGB(getThemeValue("#{$surface}-alt-surface", $type));
        }
      }

      &[mdw-ink~="solid"] {
        color: RGB(getThemeValue("default-ink", $type));
      }

      &[mdw-ink~="high"] {
        color: RGBA(getThemeValue("default-ink", $type),getThemeValue("high-ink-opacity", $type));
      }
    
      &[mdw-ink~="medium"] {
        color: RGBA(getThemeValue("default-ink", $type),getThemeValue("medium-ink-opacity", $type));
      }
    
      &[mdw-ink~="inactive"] {
        color: RGBA(getThemeValue("default-ink", $type),getThemeValue("inactive-ink-opacity", $type));
      }
    
      &[mdw-ink~="divider"] {
        color: RGBA(getThemeValue("default-ink", $type),getThemeValue("divider-ink-opacity", $type));
      }

      @each $ink in $sortedInks {
        &[mdw-ink="#{$ink}"] {
          &,
          &.mdw-overlay::before {
            color: RGB(getThemeValue("#{$ink}-default-ink", $type));
          }
        }
      }

      @each $ink in $sortedInks {
        &[mdw-ink="#{$ink} contrast"] {
          &,
          &.mdw-overlay::before {
            color: RGB(getThemeValue("#{$ink}-contrast-ink", $type));
          }
        }
      }

      @each $ink in $sortedInks {
        &[mdw-ink="#{$ink} light"] {
          &,
          &.mdw-overlay::before {
            color: RGB(getThemeValue("#{$ink}-light-ink", $type));
          }
        }
      }

      &[mdw-border-ink],
      &[mdw-border-ink="default"] {
        border-color: RGBA(getThemeValue("default-ink", $type), getThemeValue("divider-ink-opacity", $type));
      }

      &[mdw-border-ink="none"] {
        border-color: transparent;
      }
    }
  }
}

@mixin addThemeFallbackRules() {
  .mdw-theme[mdw-surface="white"] {
    background-color: #fff;
  }

  .mdw-theme[mdw-surface="black"] {
    background-color: #000;
  }

  @each $surface in $sortedSurfaces {
    $palette: theme.getThemeParamValue($surface);
    @each $tone in theme.$surface-tones {
      $value: map-get($palette, $tone);

      .mdw-theme[mdw-surface="#{$surface} #{$tone}"] {
        background-color: #{$value};
      }
    }
  }

  /** Ink Fallback Colors **/

  .mdw-theme[mdw-ink~="white"] {
    &,
    &.mdw-overlay::before {
      color: #fff;
    }
  }

  .mdw-theme[mdw-ink~="black"] {
    &,
    &.mdw-overlay::before {
      color: #000;
    }
  }

  @each $tone in theme.$surface-tones {
    @each $surface in $sortedSurfaces {
      $palette: theme.getThemeParamValue($surface);
      $value: map-get($palette, $tone);

      .mdw-theme[mdw-surface^="#{$surface} #{$tone}"] {
        background-color: #{$value};
      }
    }
  }

  @each $tone in theme.$ink-tones {
    @each $ink in $sortedInks {
      $palette: theme.getThemeParamValue($ink);
      $value: map-get($palette, $tone);
      .mdw-theme[mdw-ink^="#{$ink} #{$tone}"] {
        &,
        &.mdw-overlay::before {
          color: #{$value};
        }
      }
    }
  }

  .mdw-theme[mdw-light],
  .mdw-theme[mdw-light] .mdw-theme:not([mdw-dark]) {
    @include addThemeRules('light');
  }

  .mdw-theme[mdw-dark],
  .mdw-theme[mdw-dark] .mdw-theme:not([mdw-light]) {
    @include addThemeRules('dark');
  }
}

@if (theme.$fallbacks == 'ieonly') {
  @include platform.ifIE() {
    @include addThemeFallbackRules();
  }
} @else if (theme.$fallbacks != false) {
  @include addThemeFallbackRules();
}

@include theme.addComponentCSSVariableRules('color', $themeValues) {
  @include addThemeRules();
}
