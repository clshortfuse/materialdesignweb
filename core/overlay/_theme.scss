// https://material.io/design/interaction/states.html

@use '../theme/index.scss' as theme;

$themeValues: (
  overlay-color:                 theme.$foreground,

  high-opacity:                  theme.$high-opacity,
  medium-opacity:                theme.$medium-opacity,
  inactive-opacity:              theme.$inactive-opacity,
  divider-opacity:               theme.$divider-opacity,
  
  disabled-opacity:              (0.38, 0.50),
  
  // states   

  hover-opacity:                 (0.04, 0.08),
  focus-opacity:                 (0.12, 0.24),
  selected-opacity:              (0.08, 0.16),
  activated-opacity:             (0.12, 0.24),
  
  hover-focus-opacity:           (0.04 + 0.12, 0.08 + 0.24),

  selected-hover-opacity:        (0.08 + 0.04, 0.16 + 0.08),
  selected-focus-opacity:        (0.08 + 0.12, 0.16 + 0.24),
  selected-hover-focus-opacity:  (0.08 + 0.04 + 0.12, 0.16 + 0.08 + 0.24),

  activated-hover-opacity:       (0.12 + 0.04, 0.24 + 0.08),
  activated-focus-opacity:       (0.12 + 0.12, 0.24 + 0.24),
  activated-hover-focus-opacity: (0.12 + 0.04 + 0.12, 0.24 + 0.08 + 0.24),
) !default;

@function getThemeValue($key, $type) {
  @return theme.getThemeValue('overlay', $themeValues, $key, $type);
}

@mixin addThemeRules($type: 'var') {
  .mdw-overlay {
    &,
    &[aria-pressed="false"]:active,
    &[aria-selected="true"],
    &[aria-pressed="true"],
    &[aria-current] {
      &::before {
        @if ($type == 'var') {
          color: RGB(var(--mdw-ink));
        } @else {
          // Handled by mdw-color
        }
      }
    }

    &[aria-selected="false"],
    &[aria-pressed="false"],
    &[aria-disabled="true"],
    &[aria-disabled="true"]:active {
      &::before {
        @if ($type == 'var') {
          color: RGB(getThemeValue("overlay-color", $type));
        } @else {
          background-color: RGB(getThemeValue("overlay-color", $type));
        }
      }
    }

    // Off color
    &[aria-selected="false"],
    &[aria-pressed="false"],
    &[aria-selected="true"]:not([aria-current]) {
      #{if($type == 'var', '&', '&,&.mdw-theme')} {
        color: RGBA(getThemeValue("overlay-color", $type), getThemeValue("high-opacity", $type));
        &[mdw-border-ink] {
          border-color: RGBA(getThemeValue("overlay-color", $type), getThemeValue("divider-opacity", $type));
        }
        &[mdw-overlay-default="medium"] {
          color: RGBA(getThemeValue("overlay-color", $type), getThemeValue("medium-opacity", $type));
        }
        &[mdw-overlay-default="inactive"] {
          color: RGBA(getThemeValue("overlay-color", $type), getThemeValue("inactive-opacity", $type));
        }
        &[mdw-overlay-default="divider"] {
          color: RGBA(getThemeValue("overlay-color", $type), getThemeValue("divider-opacity", $type));
        }
      }
    }

    &[aria-disabled="true"] {
      &[mdw-overlay-disabled="ink"] {
        color: RGBA(getThemeValue("overlay-color", $type), getThemeValue("inactive-opacity", $type));
      }
      &:not([mdw-overlay-disabled]) {
        opacity: getThemeValue("disabled-opacity", $type);
      }
    }

    &:not([mdw-overlay-touch="true"]) {
      &:focus:not([mdw-overlay-off~="focus"]):not([mdw-overlay-touch="true"])::before {
        opacity: getThemeValue("focus-opacity", $type);
      }

      &:not([aria-disabled="true"]):not([mdw-overlay-touch="true"]) {
        &:hover:not([mdw-overlay-off~="hover"])::before {
          opacity: getThemeValue("hover-opacity", $type);
        }

        &:hover:focus:not([mdw-overlay-off~="hover"]):not([mdw-overlay-off~="focus"])::before {
          opacity: getThemeValue("hover-focus-opacity", $type);
        }
      }
    }

    // Selected
    &[aria-selected="true"]:not([mdw-overlay-off~="selected"]) {
      &::before {
        opacity: getThemeValue("selected-opacity", $type);
      }

      &:not([mdw-overlay-touch="true"]) {
        &:focus:not([mdw-overlay-off~="focus"])::before {
          opacity: getThemeValue("selected-focus-opacity", $type);
        }

        &:not([aria-disabled="true"]) {
          &:hover:not([mdw-overlay-off~="hover"])::before {
            opacity: getThemeValue("selected-hover-opacity", $type);
          }

          &:hover:focus:not([mdw-overlay-off~="hover"]):not([mdw-overlay-off~="focus"])::before {
            opacity: getThemeValue("selected-hover-focus-opacity", $type);
          }
        }
      }
    }

    // Activated
    &[aria-current]:not([mdw-overlay-off~="activated"]),
    &[aria-pressed="true"]:not([mdw-overlay-off~="activated"]) {
      &::before {
        opacity: getThemeValue("activated-opacity", $type);
      }

      &:not([mdw-overlay-touch="true"]) {
        &:focus:not([mdw-overlay-off~="focus"])::before {
          opacity: getThemeValue("activated-focus-opacity", $type);
        }

        &:not([aria-disabled="true"]) {
          &:hover:not([mdw-overlay-off~="hover"])::before {
            opacity: getThemeValue("activated-hover-opacity", $type);
          }

          &:hover:focus:not([mdw-overlay-off~="hover"]):not([mdw-overlay-off~="focus"])::before {
            opacity: getThemeValue("activated-hover-focus-opacity", $type);
          }
        }
      }
    }
  }
}

@include theme.addComponentFallbackRules('light') {
  @include addThemeRules('light');
}
@include theme.addComponentFallbackRules('dark') {
  @include addThemeRules('dark');
}


@include theme.addComponentCSSVariableRules('overlay', $themeValues) {
  @include addThemeRules();
}
