@import './_palettes.scss';

$mdw-theme__tone-list: ("50", "100", "200", "300", "400", "500", "600", "700", "800", "900", "A100", "A200", "A400", "A700") !default;

@function __mdwGetThemeValue($component, $colorMap, $key, $type, $theme: null) {
  @if ($type == 'var') {
    @return var(--#{$component}__#{$key});
  }
  $item: __mdwGetThemeMapItem($colorMap, $key, $type);
  $length: length($item);
  @if ($length == 1) {
    @return $item;
  } @else if ($length == 2) {
    $color: nth($item, 1);
    $opacity: nth($item, 2);
    @if (type_of($color) == string) {
      $color: mdwGetThemeParamColor($color, null, $type, $theme);
    }
    @return rgba($color, $opacity);
  } @else {
    $color: nth($item, 1);
    $tone: nth($item, 2);
    $opacity: nth($item, 3);
    $value: mdwGetThemeParamColor($color, $tone, $type, $theme);
    @if ($opacity == null) {
      $opacity: 1.0;
    }
    @return rgba($value, $opacity);
  }
  @return null;
}

@mixin __add-mdw-theme__variables($component, $map, $lightness, $rgbOnly: false) {
  @each $key in map-keys($map) {
    $item: __mdwGetThemeMapItem($map, $key, $lightness);
    $value: null;
    $length: length($item);
    @if ($length == 1) {
      @if ($rgbOnly and type_of(item) == color) {
        $value: red($item),green($item),blue($item);
      } @else {
        $value: $item;
      }
    } @else if ($length == 2) {
      $color: nth($item, 1);
      $opacity: nth($item, 2);
      @if (type_of($color) == string) {
        @if ($rgbOnly) {
          $value: var(--#{$color}-color);
        } @else {
          $value: RGBA(var(--#{$color}-color),#{$opacity});
        }
      } @else {
        @if ($rgbOnly) {
          $value: red($color),green($color),blue($color);
        } @else {
          $value: rgba($color,$opacity);
        }
      }
    } @else {
      $color: nth($item, 1);
      $tone: nth($item, 2);
      $opacity: nth($item, 3);
      @if ($tone == null) {
        @error '$tone cannot be null';
      }
      @if ($rgbOnly) {
        $value: var(--#{$color}-#{$tone}-color);
      } @else {
        $value: RGBA(var(--#{$color}-#{$tone}-color),#{$opacity});
      }
    }
    --#{$component}__#{$key}: #{$value};
  }
}

@function __mdwGetThemeMapItem($colorMap, $key, $lightness) {
  $list: map-get($colorMap, $key);
  $length: length($list);

  @if ($lightness == 'dark') {
    @if ($length > 1) {
      @return nth($list, 2);
    } @else {
      @error 'Variable not found' $key;
    }
  }
  @return nth($list, 1);
}

@mixin __mdw-theme__add-component-variable-rules($component, $values, $rgbOnly: false) {
  :root,
  .mdw-theme[mdw-light] {
    @include __add-mdw-theme__variables($component, $values, 'light', $rgbOnly);
  }

  .mdw-theme[mdw-dark] {
    @include __add-mdw-theme__variables($component, $values, 'dark', $rgbOnly);
  }
}

@mixin __mdw-theme__fallbacks($scope, $name) {
  $theme: map-get($mdw-theme__themes, $name);
  $namespace: '.mdw-theme[mdw-theme="#{$name}"]';
  @if ($scope == 'global') {
    #{$namespace} {
      @content;
    }
  } @else if ($scope == 'light') {
    #{$namespace}[mdw-light],
    #{$namespace}[mdw-dark] .mdw-theme[mdw-light],
    #{$namespace} .mdw-theme[mdw-light],
    #{$namespace} .mdw-theme[mdw-dark] .mdw-theme[mdw-light] {
      @content;
    }
  } @else if ($scope == 'dark') {
    #{$namespace}[mdw-dark],
    #{$namespace}[mdw-light] .mdw-theme[mdw-dark],
    #{$namespace} .mdw-theme[mdw-dark],
    #{$namespace} .mdw-theme[mdw-light] .mdw-theme[mdw-dark] {
      @content;
    }
  }
}

@mixin __mdw-theme__build-variables() {
  @if (index($mdw-theme__variables, 'rules')) {
    @include __mdw-theme__build-rules();
  }
  @if (index($mdw-theme__variables, 'colors')) {
    @include __mdw-theme__build-colors();
  }
  @if (index($mdw-theme__variables, 'themes')) {
    @include __mdw-theme__build-themes();
  }
}

@mixin __mdw-theme__add-component-variables($lightness: null) {
  @if ($lightness == 'light') {
    --foreground-color: var(--foreground-light-color);
  } @else if($lightness == 'dark') {
    --foreground-color: var(--foreground-dark-color);
  }
}


@mixin __mdw-theme__build-fallbacks() {
  // Surface rules
  // Component rules
  // Color rules
  @if (map-has-key($mdw-theme__themes, "default")) {
    .mdw-theme[mdw-surface="white"] {
      background-color: #fff;
    }

    .mdw-theme[mdw-surface="black"] {
      background-color: #000;
    }
  }
  @each $name in map-keys($mdw-theme__themes) {
    $theme: map-get($mdw-theme__themes, $name);
    $namespace: if($name == 'default', null, '.mdw-theme[mdw-theme="#{$name}"]');

    @each $param in ('primary', 'secondary', 'warn', 'background') {
      $palette: mdwGetThemeParamValue($param, $theme);
      @each $tone in $mdw-theme__tone-list {
        $value: map-get($palette, $tone);
        #{$namespace} .mdw-theme[mdw-surface="#{$param} #{$tone}"] {
          background-color: #{$value};
        }
      }
    }
  }

  @each $color in $mdw-theme__colors {
    $palette: map-get($mdw-theme__palettes, $color);
    @each $tone in $mdw-theme__tone-list {
      $value: map-get($palette, $tone);
      .mdw-theme[mdw-surface="#{$color} #{$tone}"] {
        background-color: #{$value};
      }
    }
  }


  @each $name in map-keys($mdw-theme__themes) {
    $theme: map-get($mdw-theme__themes, $name);
    $namespace: '.mdw-theme[mdw-theme="#{$name}"]';

    #{$namespace}[mdw-light][mdw-surface]:not([mdw-ink]),
    #{$namespace} .mdw-theme[mdw-light][mdw-surface]:not([mdw-ink]) {
      // color: __mdwThemeGlobalInkValue("default-ink", 'light', $theme);
    }


    #{$namespace}[mdw-dark][mdw-surface]:not([mdw-ink]),
    #{$namespace} .mdw-theme[mdw-dark][mdw-surface]:not([mdw-ink]) {
      // color: __mdwThemeGlobalInkValue("default-ink", 'dark', $theme);
    }
    
    #{$namespace}[mdw-light],
    #{$namespace}[mdw-dark] .mdw-theme[mdw-light],
    #{$namespace} .mdw-theme[mdw-light],
    #{$namespace} .mdw-theme[mdw-dark] .mdw-theme[mdw-light] {
      // @include __mdw-theme__global-contrast-and-theme-rules('light', $theme);
    }

    #{$namespace}[mdw-dark],
    #{$namespace}[mdw-light] .mdw-theme[mdw-dark],
    #{$namespace} .mdw-theme[mdw-dark],
    #{$namespace} .mdw-theme[mdw-light] .mdw-theme[mdw-dark] {
      // @include __mdw-theme__global-contrast-and-theme-rules('dark', $theme);
    }
  }

  @if (map-has-key($mdw-theme__themes, "default")) {
    .mdw-theme[mdw-ink="white"] {
      color: #fff;
    }

    .mdw-theme[mdw-ink="black"] {
      color: #000;
    }
  }

  @each $name in map-keys($mdw-theme__themes) {
    $theme: map-get($mdw-theme__themes, $name);
    $namespace: '.mdw-theme[mdw-theme="#{$name}"]';
    @each $param in ('primary', 'secondary', 'warn', 'background') {
      $palette: mdwGetThemeParamValue($param, $theme);
      @each $tone in $mdw-theme__tone-list {
        $value: map-get($palette, $tone);
        #{$namespace}[mdw-ink="#{$param} #{$tone}"],
        #{$namespace} .mdw-theme[mdw-ink="#{$param} #{$tone}"] {
          color: #{$value};
        }
      }
    }
  }

  @each $color in $mdw-theme__colors {
    $palette: map-get($mdw-theme__palettes, $color);
    @each $tone in $mdw-theme__tone-list {
      $value: map-get($palette, $tone);
      .mdw-theme[mdw-ink="#{$color} #{$tone}"] {
        color: #{$value};
      }
    }
  }
}

@mixin __mdw-theme__build-rules() {
  :root,
  .mdw-theme[mdw-light] {
    @include __mdw-theme__add-component-variables('light');
  }

  .mdw-theme[mdw-dark] {
    @include __mdw-theme__add-component-variables('dark');
  }

  
}

@mixin __mdw-theme__build-colors() {
  @each $color in $mdw-theme__colors {
    $palette: map-get($mdw-theme__palettes, $color);
    @each $tone in map-keys(map-remove($palette, "light", "dark")) {
      $value: map-get($palette, $tone);

      :root {
        --#{$color}-#{$tone}-color: #{red($value),green($value),blue($value)};
      }
    }
  }
  @each $color in $mdw-theme__colors {
    .mdw-theme[mdw-surface~="#{$color}"] {
      @each $tone in $mdw-theme__tone-list {
        --#{$tone}-surface: var(--#{$color}-#{$tone}-color);
      }
    }

    .mdw-theme[mdw-ink~="#{$color}"] {
      @each $tone in $mdw-theme__tone-list {
        --#{$tone}-color: var(--#{$color}-#{$tone}-color);
      }
    }
  }
}

@mixin __mdw-theme__build-themes() {
  @each $name in map-keys($mdw-theme__themes) {
    $theme: map-get($mdw-theme__themes, $name);
    $namespace: if($name == 'default', null, '.mdw-theme[mdw-theme="#{$name}"]');
    $params: ('indigo', 'pink', 'red', 'grey', black, white);
    @for $i from 1 to 7 {
      @if (length($theme) >= $i) {
        $params: set-nth($params, $i, nth($theme, $i));
      }
    }
    $primary: nth($params, 1);
    $secondary: nth($params, 2);
    $warn: nth($params, 3);
    $background: nth($params, 4);
    $foreground-light: nth($params, 5);
    $foreground-dark: nth($params, 6);
    @include __mdw-theme__build-palettes($namespace, $primary, $secondary, $warn, $background);

    #{if($namespace, #{$namespace}, ':root, .mdw-theme[mdw-theme="default"]')} {
      --foreground-light-color: #{red($foreground-light),green($foreground-light),blue($foreground-light)};
      --foreground-dark-color: #{red($foreground-dark),green($foreground-dark),blue($foreground-dark)};
    }
  }
}

@mixin __mdw-theme__build-palettes($namespace, $primary, $secondary, $warn, $background) {
  @include __mdw-theme__build-palette($namespace, 'primary', $primary);
  @include __mdw-theme__build-palette($namespace, 'secondary', $secondary);
  @include __mdw-theme__build-palette($namespace, 'warn', $warn);
  @include __mdw-theme__build-palette($namespace, 'background', $background);
}

@mixin __mdw-theme__build-palette($namespace, $color, $name) {
  $palette: map-get($mdw-theme__palettes, $name);
  @each $tone in map-keys(map-remove($palette, "light", "dark")) {
    $value: map-get($palette, $tone);

    #{if($namespace, #{$namespace}, ':root, .mdw-theme[mdw-theme="default"]')} {
      --#{$color}-#{$tone}-color: var(--#{$name}-#{$tone}-color);
    }
  }
}
