@import './_palettes.scss';

$mdw-theme__tone-list: ("50", "100", "200", "300", "400", "500", "600", "700", "800", "900", "A100", "A200", "A400", "A700") !default;

@function __mdwGetThemeValue($component, $colorMap, $key, $type) {
  @if ($type == 'var') {
    @return var(--#{$component}__#{$key});
  }
  $item: __mdwGetThemeMapItem($colorMap, $key, $type);
  $length: length($item);
  @if ($length == 1) {
    @return $item;
  } @else if ($length == 2) {
    $color: nth($item, 1);
    $opacity: nth($item, 2);
    @if (type_of($color) == string) {
      $color: mdwGetThemeParamColor($color, null, $type);
    }
    @return rgba($color, $opacity);
  } @else {
    $color: nth($item, 1);
    $tone: nth($item, 2);
    $opacity: nth($item, 3);
    $value: mdwGetThemeParamColor($color, $tone, $type);
    @if ($opacity == null) {
      $opacity: 1.0;
    }
    @return rgba($value, $opacity);
  }
  @return null;
}

@mixin __mdw-theme__add-variables($component, $map, $lightness, $rgbOnly: false) {
  @each $key in map-keys($map) {
    $item: __mdwGetThemeMapItem($map, $key, $lightness);
    $value: null;
    $length: length($item);
    @if ($length == 1) {
      @if ($rgbOnly and type_of(item) == color) {
        $value: red($item),green($item),blue($item);
      } @else {
        $value: $item;
      }
    } @else if ($length == 2) {
      $color: nth($item, 1);
      $opacity: nth($item, 2);
      @if (type_of($color) == string) {
        @if ($rgbOnly) {
          $value: var(--#{$color}-color);
        } @else {
          $value: RGBA(var(--#{$color}-color),#{$opacity});
        }
      } @else {
        @if ($rgbOnly) {
          $value: red($color),green($color),blue($color);
        } @else {
          $value: rgba($color,$opacity);
        }
      }
    } @else {
      $color: nth($item, 1);
      $tone: nth($item, 2);
      $opacity: nth($item, 3);
      @if ($tone == null) {
        @error '$tone cannot be null';
      }
      @if ($rgbOnly) {
        $value: var(--#{$color}-#{$tone}-color);
      } @else {
        $value: RGBA(var(--#{$color}-#{$tone}-color),#{$opacity});
      }
    }
    --#{$component}__#{$key}: #{$value};
  }
}

@function __mdwGetThemeMapItem($colorMap, $key, $lightness) {
  $list: map-get($colorMap, $key);
  $length: length($list);

  @if ($lightness == 'dark') {
    @if ($length > 1) {
      @return nth($list, 2);
    } @else {
      @error 'Variable not found' $key;
    }
  }
  @return nth($list, 1);
}

@mixin __mdw-theme__add-component-variable-rules($component, $values, $rgbOnly: false) {
  :root,
  .mdw-theme[mdw-light] {
    @include __mdw-theme__add-variables($component, $values, 'light', $rgbOnly);
  }

  .mdw-theme[mdw-dark] {
    @include __mdw-theme__add-variables($component, $values, 'dark', $rgbOnly);
  }
}

@mixin __mdw-theme__fallbacks($scope) {
  @if ($scope == 'global') {
    @content;
  } @else if ($scope == 'light') {
    .mdw-theme[mdw-light],
    .mdw-theme[mdw-dark] .mdw-theme[mdw-light] {
      @content;
    }
  } @else if ($scope == 'dark') {
    .mdw-theme[mdw-dark],
    .mdw-theme[mdw-light] .mdw-theme[mdw-dark] {
      @content;
    }
  }
}
