// https://material.io/design/interaction/states.html
// https://material.io/design/components/chips.html
// https://material.io/design/iconography/system-icons.html#color

@use '../../core/theme/_mixins.scss' as theme;

$themeValues: (
  text-color:                    (('foreground-light', 0.87), ('foreground-dark', 1.00)),
  background-color:              (('foreground-light', 0.12), ('foreground-dark', 0.24)),

  // icon
  active-icon-color__focus:      (('foreground-light', 0.87), ('foreground-dark', 1.00)),
  active-icon-color:             (('foreground-light', 0.54), ('foreground-dark', 0.70)),
  inactive-icon-color:           (('foreground-light', 0.38), ('foreground-dark', 0.50)),

  // states
  overlay-color:                 (('foreground-light', 1.00), ('foreground-dark', 1.00)),

  default-opacity:               (0.12              , 0.24),
  hover-opacity:                 (0.12 + 0.04       , 0.24 + 0.08),
  focus-opacity:                 (0.12 + 0.12       , 0.24 + 0.24),
  hover-focus-opacity:           (0.12 + 0.04 + 0.12, 0.24 + 0.08 + 0.24),

  selected-opacity:              (0.12 + 0.08              , 0.24 + 0.16),
  selected-hover-opacity:        (0.12 + 0.08 + 0.04       , 0.24 + 0.16 + 0.08),
  selected-focus-opacity:        (0.12 + 0.08 + 0.12       , 0.24 + 0.16 + 0.24),
  selected-hover-focus-opacity:  (0.12 + 0.08 + 0.04 + 0.12, 0.24 + 0.16 + 0.08 + 0.24),

  outlined-opacity:               (0.00       , 0.00),
  outlined-hover-opacity:         (0.04       , 0.08),
  outlined-focus-opacity:         (0.12       , 0.24),
  outlined-hover-focus-opacity:   (0.04 + 0.12, 0.08 + 0.24),

  outlined-selected-opacity:              (0.08              , 0.16),
  outlined-selected-hover-opacity:        (0.08 + 0.04       , 0.16 + 0.08),
  outlined-selected-focus-opacity:        (0.08 + 0.12       , 0.16 + 0.24),
  outlined-selected-hover-focus-opacity:  (0.08 + 0.04 + 0.12, 0.16 + 0.08 + 0.24),

  activated-opacity:             (0.12, 0.24),

  activated-text-color:           (inherit, ('foreground-dark', 1.00)),

  activated-hover-opacity:       (0.12 + 0.04, 0.24 + 0.4),
  activated-focus-opacity:       (0.12 + 0.12, 0.24 + 0.12),
  activated-hover-focus-opacity: (0.12 + 0.04 + 0.12, 0.24 + 0.4 + 0.12),

  pressed-opacity:               (0.16, 0.32),

  // disabled
  disabled-text-color:           (('foreground-light', 0.26), ('foreground-dark', 0.30)),
  disabled-background-color:     (('foreground-light', 0.12), ('foreground-dark', 0.12)),
  outline-color:                 (('foreground-light', 0.12), ('foreground-dark', 0.12)),

) !default;

@function getThemeValue($key, $type) {
  @return theme.getThemeValue('chip', $themeValues, $key, $type);
}

@mixin addThemeRules($type: 'var') {
  .mdw-chip__thumbnail,
  .mdw-chip__remove,
  .mdw-chip__text {
    color: RGBA(getThemeValue("text-color", $type));
  }

  .mdw-chip__input {
    color: inherit;

    &::before {
      opacity: getThemeValue("default-opacity", $type);

      background-color: RGBA(getThemeValue("overlay-color", $type));
    }

    &:checked::before {
      color: inherit;
    }

    &:hover::before {
      opacity: getThemeValue("hover-opacity", $type);
    }

    &:focus::before {
      opacity: getThemeValue("focus-opacity", $type);
    }

    &:hover:focus::before {
      opacity: getThemeValue("hover-focus-opacity", $type);
    }

    &:checked {
      & ~ .mdw-chip__text {
        color: RGBA(getThemeValue("activated-text-color", $type));
      }

      &[type="radio"] {
        &::before {
          background: currentColor;
        }
      }

      &[type="checkbox"] {
        &::before {
          opacity: getThemeValue("selected-opacity", $type);
        }

        &:hover::before {
          opacity: getThemeValue("selected-hover-opacity", $type);
        }

        &:focus::before {
          opacity: getThemeValue("selected-focus-opacity", $type);
        }

        &:hover:focus::before {
          opacity: getThemeValue("selected-hover-focus-opacity", $type);
        }
      }
    }
  }

  .mdw-chip[mdw-outlined] .mdw-chip__input {
    border-color: RGBA(getThemeValue('outline-color', $type));

    &:not(:checked) {
      &::before {
        opacity: getThemeValue("outlined-opacity", $type);
      }

      &:hover::before {
        opacity: getThemeValue("outlined-hover-opacity", $type);
      }

      &:focus::before {
        opacity: getThemeValue("outlined-focus-opacity", $type);
      }

      &:hover:focus::before {
        opacity: getThemeValue("outlined-hover-focus-opacity", $type);
      }
    }

    &:checked {
      &[type="checkbox"] {
        &::before {
          opacity: getThemeValue("outlined-selected-opacity", $type);
        }

        &:hover::before {
          opacity: getThemeValue("outlined-selected-hover-opacity", $type);
        }

        &:focus::before {
          opacity: getThemeValue("outlined-selected-focus-opacity", $type);
        }

        &:hover:focus::before {
          opacity: getThemeValue("outlined-selected-hover-focus-opacity", $type);
        }
      }
    }
  }
}


@include theme.addComponentFallbackRules('light') {
  @include addThemeRules('light');
}

@include theme.addComponentFallbackRules('dark') {
  @include addThemeRules('dark');
}

@include theme.addComponentCSSVariableRules('chip', $themeValues) {
  @include addThemeRules();
}
