@import '../common/theming.scss';

$selectionColors: (
  text-color:              (('foreground-light', 0.87), ('foreground-dark', 1.00)),
  color:                   (('foreground-light', 0.54), ('foreground-dark', 0.70)),
  ripple-color:            (('foreground-light', 1.00), ('foreground-dark', 1.00)),
  pressed-opacity:         (0.16, 0.32),
  disabled-color:          (('foreground-light', 0.26), ('foreground-dark', 0.30)),
  thumb-off-color:         (('background', '50', 1.00), ('background','400',1.0)),
  thumb-on-color:          (currentColor, currentColor),

  track-on-color:          (currentColor, currentColor),
  track-on-opacity:        (0.50, 0.50),
  
  track-off-color:         (('foreground-light', 1.00), ('foreground-dark', 1.00)),
  track-off-opacity:       (0.38, 0.30),

  disabled-opacity:        (0.38, 0.38),
);

@function selectionThemeValue($key, $type, $theme) {
  @return mdwGetThemeValue('selection', $selectionColors, $key, $type, $theme);
}

@mixin selectionThemeVariables($lightness) {
  @include mdw-theme__variables('selection', $selectionColors, $lightness);
}

// Vary by contrast
@mixin selectionContrastAndThemeRules($type: 'var', $theme: null) {
  .mdw-selection__input {
    color: selectionThemeValue("ripple-color", $type, $theme);
    &:active:not(:disabled),
    &:focus {
      opacity: selectionThemeValue("pressed-opacity", $type, $theme);
    }
    &[type="checkbox"]:not(:checked) ~ .mdw-selection__icon,
    &[type="checkbox"]:active:not(:disabled) ~ .mdw-selection__icon {
      color: selectionThemeValue("color", $type, $theme);
    }

    &[type="radio"]:not(:checked) ~ .mdw-selection__icon {
      color: selectionThemeValue("color", $type, $theme);
    }
    &[type="checkbox"]:checked ~ .mdw-selection__icon::after {
      // Checkbox color is based on currently filled background-color
      @if($type == 'var') {
        border-color: unquote("rgb(var(--fill-color))");
      } @else {
        // IE11 Fallback
        border-color: white;
      }
    }
    &:disabled ~ .mdw-selection__label {
      opacity: selectionThemeValue("disabled-opacity", $type, $theme);
    }
    &:disabled ~ .mdw-selection__icon,
    &:disabled ~ .mdw-selection__icon::before {
      color: selectionThemeValue("disabled-color", $type, $theme);
    }
  }
  .mdw-selection__label,
  .mdw-selection[mdw-theme-color] .mdw-selection__input:not(:disabled) ~ .mdw-selection__label {
    color: selectionThemeValue("text-color", $type, $theme);
  }
  .mdw-selection[mdw-switch] .mdw-selection__input[type="checkbox"] {

    & ~ .mdw-selection__icon {
      &::before {
        background-color: selectionThemeValue("thumb-off-color", $type, $theme);
      }
      &::after {
        background-color: selectionThemeValue("track-off-color", $type, $theme);
        opacity: selectionThemeValue("track-off-opacity", $type, $theme);  
      }
    }
    &:checked ~ .mdw-selection__icon {
      &::before {
        background-color: selectionThemeValue("thumb-on-color", $type, $theme);
      }
      &::after {
        background-color: selectionThemeValue("track-on-color", $type, $theme);
      }
    }
    &:disabled ~ .mdw-selection__icon {
      opacity: selectionThemeValue("disabled-opacity", $type, $theme);
    }
  }
}
