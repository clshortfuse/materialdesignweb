@import '../../core/theme/exports.scss';

$mdw-selection__theme-values: (
  text-color:              $mdw-theme__default-ink,
  icon-color:              $mdw-theme__medium-ink,
  disabled-color:          $mdw-theme__inactive-ink,
  ripple-color:            (('foreground-light', 1.00), ('foreground-dark', 1.00)),

  thumb-off-color:         (('background', '50', 1.00), ('background','400',1.0)),
  thumb-on-color:          (currentColor, currentColor),

  track-on-color:          (currentColor, currentColor),
  track-on-opacity:        (0.50, 0.50),
  
  track-off-color:         (('foreground-light', 1.00), ('foreground-dark', 1.00)),
  track-off-opacity:       (0.38, 0.30),

  disabled-opacity:        (0.38, 0.50),
) !default;

@function mdwSelectionThemeValue($key, $type, $theme) {
  @return mdwGetThemeValue('selection', $mdw-selection__theme-values, $key, $type, $theme);
}

@mixin mdw-selection__theme-rules($type: 'var', $theme: null) {
  .mdw-selection__input {

    &:not(:checked),
    &:active:not(:disabled) {
      color: mdwSelectionThemeValue("ripple-color", $type, $theme);
      --ink-color: --foreground-color;
    }
    &[type="checkbox"]:not(:checked) ~ .mdw-selection__icon,
    &[type="checkbox"]:active:not(:disabled) ~ .mdw-selection__icon {
      color: mdwSelectionThemeValue("icon-color", $type, $theme);
    }

    &[type="radio"]:not(:checked) ~ .mdw-selection__icon {
      color: mdwSelectionThemeValue("icon-color", $type, $theme);
    }
    
    &[type="checkbox"]:checked ~ .mdw-selection__icon::after {
      // Checkbox color is based on currently filled background-color
      @if($type == 'var') {
        border-color: unquote("rgb(var(--surface-color))");
      } @else {
        // IE11 Fallback
        border-color: #fff;
      }
    }

    &:disabled ~ .mdw-selection__label {
      opacity: mdwSelectionThemeValue("disabled-opacity", $type, $theme);
    }
    
    &:disabled ~ .mdw-selection__icon,
    &:disabled ~ .mdw-selection__icon::before {
      color: mdwSelectionThemeValue("disabled-color", $type, $theme);
    }
  }

  .mdw-selection__label,
  .mdw-selection[mdw-ink] .mdw-selection__input:not(:disabled) ~ .mdw-selection__label {
    color: mdwSelectionThemeValue("text-color", $type, $theme);
  }

  .mdw-selection[mdw-switch] .mdw-selection__input[type="checkbox"] {
    & ~ .mdw-selection__icon {
      &::before {
        background-color: mdwSelectionThemeValue("thumb-off-color", $type, $theme);
      }

      &::after {
        opacity: mdwSelectionThemeValue("track-off-opacity", $type, $theme);

        background-color: mdwSelectionThemeValue("track-off-color", $type, $theme);
      }
    }

    &:checked ~ .mdw-selection__icon {
      &::before {
        background-color: mdwSelectionThemeValue("thumb-on-color", $type, $theme);
      }

      &::after {
        background-color: mdwSelectionThemeValue("track-on-color", $type, $theme);
      }
    }

    &:disabled ~ .mdw-selection__icon {
      opacity: mdwSelectionThemeValue("disabled-opacity", $type, $theme);
    }
  }
}

@each $name in map-keys($mdw-theme__themes) {
  $theme: map-get($mdw-theme__themes, $name);
  @include mdw-theme__add-component-fallback-rules('light', $name) {
    @include mdw-selection__theme-rules('light', $theme);
  }
  @include mdw-theme__add-component-fallback-rules('dark', $name) {
    @include mdw-selection__theme-rules('dark', $theme);
  }
}

@include mdw-theme__add-component-variable-rules('selection', $mdw-selection__theme-values) {
  @include mdw-selection__theme-rules();
}
