@import '../common/theming.scss';

$menuColors: (
  text-color:       (('foreground-light', 0.87), ('foreground-dark', 1.00)),
  secondary-color:  (('foreground-light', 0.54), ('foreground-dark', 0.70)),
  background-color: ((#fff,              1.00), ('background', '800', 1.00)),
  selected-color:   (('background', '100', 1.00), ('background', '700', 1.00)),
  hover-color:      (('background', '200', 1.00), ('background', '600', 1.00)),
  ripple-color:     (('foreground-light', 1.00) , ('foreground-dark', 1.00)),
  ripple-opacity:   ( 0.12 , 0.30),
  divider-color:    (('foreground-light', 0.12), ('foreground-dark', 0.12)),
  disabled-color:   (('foreground-light', 0.26), ('foreground-dark', 0.30)),
);

@function menuThemeValue($key, $type, $theme) {
  @return themeValue('menu', $menuColors, $key, $type, $theme);
}

@mixin menuThemeVariables($lightness) {
  @include themeVariables('menu', $menuColors, $lightness);
}

@mixin internalMenuContrastRules($type: 'var', $theme: null) {
  @at-root {
    #{&}.mdw-menu {
      &:not([mdw-js]) {
        .mdw-menu__popup {
          & > .mdw-menu__text,
          .mdw-menu__item {
            &:hover {
              background-color: menuThemeValue("hover-color", $type, $theme);
            }
          }
        }
      }
      .mdw-menu__popup {
        background-color: menuThemeValue("background-color", $type, $theme);
        & > .mdw-menu__text,
        .mdw-menu__item {
          color: menuThemeValue("text-color", $type, $theme);
          &:focus,
          &[mdw-selected] {
            background-color: menuThemeValue("hover-color", $type, $theme);
          }
          &[aria-disabled="true"] {
            color: menuThemeValue("disabled-color", $type, $theme);
            & > .mdw-menu__icon,
            & > .mdw-menu__check,
            & > .mdw-menu__radio {
              color: inherit;
            }
          }
          & > .mdw-ripple > .mdw-ripple__inner,
          &:after {
            color: menuThemeValue("ripple-color", $type, $theme);
            opacity: menuThemeValue("ripple-opacity", $type, $theme);
          }
        }
      }
    }
  }
}

// Vary by contrast or theme
@mixin menuContrastRules($type: 'var', $theme: null) {
  @include internalMenuContrastRules($type, $theme);
  @if ($type != 'var') {
    :not([mdw-theme-fill]) {
      @include internalMenuContrastRules($type, $theme);
    }
  }
  .mdw-menu__icon,
  .mdw-menu__check,
  .mdw-menu__radio {
    color: menuThemeValue("secondary-color", $type, $theme);
  }
  .mdw-menu__divider {
    background-color: menuThemeValue("divider-color", $type, $theme);
  }
}
