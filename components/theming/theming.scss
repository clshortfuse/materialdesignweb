@import 'palettes.scss';
@import '../common/functions.scss';
@import '../core/bottomnav/theming.scss';
@import '../core/button/theming.scss';
@import '../core/list/theming.scss';
@import '../core/menu/theming.scss';
@import '../core/selection/theming.scss';
@import '../core/tab/theming.scss';
@import '../core/textfield/theming.scss';
@import '../core/toolbar/theming.scss';

@import '../complex/dialog/theming.scss';
@import '../complex/navdrawer/theming.scss';


$tone-list: ("50", "100", "200", "300", "400", "500", "600", "700", "800", "900", "A100", "A200", "A400", "A700");
$added-palettes-list: ();


@mixin lightVariables($color:"background") {
  @if (index($mdw-theme__components, 'bottomnav')) {
    @include bottomnavThemeVariables($color, 'light');
  }
  @if (index($mdw-theme__components, 'button')) {
    @include buttonThemeVariables($color, 'light');
  }
  @if (index($mdw-theme__components, 'list')) {
    @include listThemeVariables($color, 'light');
  }
  @if (index($mdw-theme__components, 'menu')) {
    @include menuThemeVariables($color, 'light');
  }
  @if (index($mdw-theme__components, 'selection')) {
    @include selectionThemeVariables($color, 'light');
  }
  @if (index($mdw-theme__components, 'tab')) {
    @include tabThemeVariables($color, 'light');
  }
  @if (index($mdw-theme__components, 'textfield')) {
    @include textfieldThemeVariables($color, 'light');
  }
  @if (index($mdw-theme__components, 'toolbar')) {
    @include toolbarThemeVariables($color, 'light');
  }
  
  @if (index($mdw-theme__components, 'dialog')) {
    @include dialogThemeVariables($color, 'light');
  }
  @if (index($mdw-theme__components, 'navdrawer')) {
    @include navdrawerThemeVariables($color, 'light');
  }
}

@mixin darkVariables($color:"background") {
  @if (index($mdw-theme__components, 'bottomnav')) {
    @include bottomnavThemeVariables($color, 'dark');
  }
  @if (index($mdw-theme__components, 'button')) {
    @include buttonThemeVariables($color, 'dark');
  }
  @if (index($mdw-theme__components, 'list')) {
    @include listThemeVariables($color, 'dark');
  }
  @if (index($mdw-theme__components, 'menu')) {
    @include menuThemeVariables($color, 'dark');
  }
  @if (index($mdw-theme__components, 'selection')) {
    @include selectionThemeVariables($color, 'dark');
  }
  @if (index($mdw-theme__components, 'tab')) {
    @include tabThemeVariables($color, 'dark');
  }
  @if (index($mdw-theme__components, 'textfield')) {
    @include textfieldThemeVariables($color, 'dark');
  }
  @if (index($mdw-theme__components, 'toolbar')) {
    @include toolbarThemeVariables($color, 'dark');
  }

  @if (index($mdw-theme__components, 'dialog')) {
    @include dialogThemeVariables($color, 'dark');
  }
  @if (index($mdw-theme__components, 'navdrawer')) {
    @include navdrawerThemeVariables($color, 'dark');
  }
}

@mixin componentContrastRules($type: 'var', $theme: null) {
  @if (index($mdw-theme__components, 'bottomnav')) {
    @include bottomnavContrastRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'button')) {
    @include buttonContrastRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'list')) {
    @include listContrastRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'menu')) {
    @include menuContrastRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'selection')) {
    @include selectionContrastRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'tab')) {
    @include tabContrastRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'textfield')) {
    @include textfieldContrastRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'toolbar')) {
    @include toolbarContrastRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'dialog')) {
    @include dialogContrastRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'navdrawer')) {
    @include navdrawerContrastRules($type, $theme);
  }
}

@mixin componentThemeRules($theme: null) {
  @if (index($mdw-theme__components, 'button')) {
    @include buttonThemeRules($theme);
  }
  @if (index($mdw-theme__components, 'list')) {
    @include listThemeRules($theme);
  }
  @if (index($mdw-theme__components, 'menu')) {
    @include menuThemeRules($theme);
  }
  @if (index($mdw-theme__components, 'selection')) {
    @include selectionThemeRules($theme);
  }
  @if (index($mdw-theme__components, 'tab')) {
    @include tabThemeRules($theme);
  }
  @if (index($mdw-theme__components, 'textfield')) {
    @include textfieldThemeRules($theme);
  }
  @if (index($mdw-theme__components, 'toolbar')) {
    @include toolbarThemeRules($theme);
  }

  @if (index($mdw-theme__components, 'dialog')) {
    @include dialogThemeRules($theme);
  }
  @if (index($mdw-theme__components, 'navdrawer')) {
    @include navdrawerThemeRules($theme);
  }
}


@mixin buildThemes() {
  @if ($mdw-theme__ie11-support and $mdw-theme__ie11-support != 'no' and $mdw-theme__ie11-support != false) {
    @if ($mdw-theme__ie11-media-wrap and $mdw-theme__ie11-media-wrap != 'no' and $mdw-theme__ie11-media-wrap != false) {
      @include IEOnly() {
        @include buildFallbackThemes();
      }
    } @else {
      @include buildFallbackThemes();
    }
  }
  @if ($mdw-theme__ie11-support != 'only') {
    @include buildVariableThemes();
  }
}

@mixin buildFallbackThemes() {
  [mdw-theme-fill~="white"] {
    background-color: white;
  }

  [mdw-theme-fill~="light"] {
    @include componentContrastRules('light');
  }
  [mdw-theme-color~="white"] {
    color: white;
  }

  @each $name in map-keys($mdw-theme__themes) {
    // $name: map-get($theme, "name");
    $theme: map-get($mdw-theme__themes, $name);
    $namespace: if($name == 'default', '@at-root', unquote(".mdw-theme-#{$name}"));
    @each $color in ('primary', 'accent', 'warn', 'background') {
      $palette: getThemePalette($color, $theme);
      @each $tone in $tone-list {
        $value: map-get($palette, $tone);
        $rgbValue: red($value), green($value), blue($value);
        @if ($tone == '500') {
          #{$namespace} {
            [mdw-theme-fill~="#{$color}"] {
              background-color: $value;
            }
            [mdw-theme-color~="#{$color}"] {
              color: $value;
            }
          }
        }
        #{$namespace} {
          [mdw-theme-fill~="#{$color}-#{$tone}"] {
            background-color: $value;
          }
          [mdw-theme-color~="#{$color}-#{$tone}"] {
            color: $value;
          }
        }
        
      }
    }
    #{$namespace} {
      @include componentThemeRules($theme);
    }
  }
  [mdw-theme-fill~="black"] {
    background-color: black;
  }
  [mdw-theme-color~="black"] {
    color: black;
  }
  [mdw-theme-fill~="dark"] {
    @include componentContrastRules('dark');
  }

  @each $color in $mdw-theme__explicit-colors {
    $palette: map-get($palettes, $color);
    @each $tone in $tone-list {
      $value: map-get($palette, $tone);
      @if ($tone == '500') {
        [mdw-theme-fill~="#{$color}"] {
          background-color: $value;
        }
        [mdw-theme-color~="#{$color}"] {
          color: $value;
        }
      }
      [mdw-theme-fill~="#{$color}-#{$tone}"] {
        background-color: $value;
      }
      [mdw-theme-color~="#{$color}-#{$tone}"] {
        color: $value;
      }
    }
  }
}

@mixin buildVariableThemes() {
  @each $color in $mdw-theme__explicit-colors {
    @include addSinglePaletteColorVariables($color);
  }
  @each $theme in map-values($mdw-theme__themes) {
    @each $color in $theme {
      @if (length($theme) < 4) {
        @if (index($mdw-theme__explicit-colors, 'grey') == null) {
          @include addSinglePaletteColorVariables('grey');
        }
      }
      @if (index($mdw-theme__explicit-colors, $color) == null) {
        @include addSinglePaletteColorVariables($color);
      }
    }
  }

  @each $name in map-keys($mdw-theme__themes) {
    // $name: map-get($theme, "name");
    $theme: map-get($mdw-theme__themes, $name);
    $namespace: if($name == 'default', null, unquote(".mdw-theme-#{$name}"));
    $primary: nth($theme, 1);
    $accent: nth($theme, 2);
    $warn: nth($theme, 3);
    $background: 'grey';
    @if (length($theme) > 3) {
      $background: nth($theme, 4);
    }
    @include buildPalettes($namespace, $primary, $accent, $warn, $background);
  }

  [mdw-theme-fill~="white"] {
    --background-color: unquote("255,255,255");
  }
  [mdw-theme-color~="white"] {
    --color: unquote("255,255,255");
  }
  @each $color in ('primary', 'accent', 'warn', 'background') { 
    @each $tone in $tone-list {
      @if ($tone == '500') {
        [mdw-theme-fill~="#{$color}"] {
          --background-color: unquote("var(--#{$color}-color)");
        }
        [mdw-theme-color~="#{$color}"] {
          --color: unquote("var(--#{$color}-color)");
        }
      }
      [mdw-theme-fill~="#{$color}-#{$tone}"] {
        --background-color: unquote("var(--#{$color}-#{$tone}-color)");
      }
      [mdw-theme-color~="#{$color}-#{$tone}"] {
        --color: unquote("var(--#{$color}-#{$tone}-color)");
      }
    }
  }
  [mdw-theme-fill~="black"] {
    --background-color: unquote("0,0,0");
  }
  [mdw-theme-color~="black"] {
    --color: unquote("0,0,0");
  }
  @each $color in $mdw-theme__explicit-colors {
    @each $tone in $tone-list {
      @if ($tone == '500') {
        [mdw-theme-fill~="#{$color}"] {
          --background-color: unquote("var(--#{$color}-color)");
        }
        [mdw-theme-color~="#{$color}"] {
          --color: unquote("var(--#{$color}-color)");
        }
      }
      [mdw-theme-fill~="#{$color}-#{$tone}"] {
        --background-color: unquote("var(--#{$color}-#{$tone}-color)");
      }
      [mdw-theme-color~="#{$color}-#{$tone}"] {
        --color: unquote("var(--#{$color}-#{$tone}-color)");
      }
    }
  }

  [mdw-theme-fill] {
    background-color: unquote("rgb(var(--background-color))");
  }
  [mdw-theme-color] {
    color: unquote("rgb(var(--color))");
  }


  // Light rules
  [mdw-theme-fill~="white"],
  [mdw-theme-fill~="light"],
  :root {
    @include lightVariables();
  }
  @each $name in map-keys($mdw-theme__themes) {
    $theme: map-get($mdw-theme__themes, $name);
    $namespace: if($name == 'default', '@at-root', unquote(".mdw-theme-#{$name}"));
    @each $color in ('primary', 'accent', 'warn', 'background') {
      $palette: getThemePalette($color, $theme);
      $lightTones: map-get($palette, 'light');
      #{$namespace} {
        @each $tone in $lightTones {
          @if ($tone == '500') {
            [mdw-theme-fill~="#{$color}"] {
              @include lightVariables($color);
            }
          }
          [mdw-theme-fill~="#{$color}-#{$tone}"] {
            @include lightVariables($color);
          }
        }
      }
    }
    @each $color in ('primary', 'accent', 'warn') {
      [mdw-theme-fill|="#{$color}"][mdw-theme-fill~="light"] {
        @include lightVariables($color);
      }
    }
  }

  // Dark Variables
  @each $name in map-keys($mdw-theme__themes) {
    $theme: map-get($mdw-theme__themes, $name);
    $namespace: if($name == 'default', '@at-root', unquote(".mdw-theme-#{$name}"));
    @each $color in ('primary', 'accent', 'warn') {
      $palette: getThemePalette($color, $theme);
      $darkTones: map-get($palette, 'dark');
      #{$namespace} {
        @each $tone in $darkTones {
          $value: map-get($palette, $tone);
          @if ($tone == '500') {
            [mdw-theme-fill~="#{$color}"] {
              @include darkVariables($color);
            }
          }
          [mdw-theme-fill~="#{$color}-#{$tone}"] {
            @include darkVariables($color);
          }
        }
      }
    }
    @each $color in ('primary', 'accent', 'warn') {
      [mdw-theme-fill|="#{$color}"][mdw-theme-fill~="dark"] {
        @include darkVariables($color);
      }
    }
  }

  // Dark Background Variables
  @each $name in map-keys($mdw-theme__themes) {
    $theme: map-get($mdw-theme__themes, $name);
    $namespace: if($name == 'default', '@at-root', unquote(".mdw-theme-#{$name}"));
    $color: 'background';
    $palette: getThemePalette('background', $theme);
    $darkTones: map-get($palette, 'dark');
    #{$namespace} {
      @each $tone in $darkTones {
        $value: map-get($palette, $tone);
        @if ($tone == '500') {
          [mdw-theme-fill~="#{$color}"] {
            @include darkVariables($color);
          }
        }
        [mdw-theme-fill~="#{$color}-#{$tone}"] {
          @include darkVariables($color);
        }
      }
    }
  }

  [mdw-theme-fill~="black"],
  [mdw-theme-fill~="dark"] {
    @include darkVariables('background');
  }

  @include componentContrastRules();
  @include componentThemeRules();
}

@mixin addSinglePaletteColorVariables($name) {
  $palette: map-get($palettes, $name);
  @if (index($added-palettes-list, $name) == null) {
    @each $tone in map-keys(map-remove($palette, "light", "dark")) {
      $value: map-get($palette, $tone);
      :root {
        --#{$name}-#{$tone}-color: red($value),green($value),blue($value);
        @if ($tone == "500") {
          --#{$name}-color: red($value),green($value),blue($value);
        } 
      }
      $added-palettes-list: append($added-palettes-list, $name) !global;
    }
  }
}

@mixin buildPalettes($namespace, $primary, $accent, $warn, $background) {
  @include buildPalette($namespace, 'primary', $primary);
  @include buildPalette($namespace, 'accent', $accent);
  @include buildPalette($namespace, 'warn', $warn);
  @include buildPalette($namespace, 'background', $background);
}

@mixin buildPalette($namespace, $color, $name) {
  $palette: map-get($palettes, $name);
  @each $tone in map-keys(map-remove($palette, "light", "dark")) {
    $value: map-get($palette, $tone);
    #{if($namespace, #{$namespace}, ":root, .mdw-theme-default")} {
      --#{$color}-#{$tone}-color: var(--#{$name}-#{$tone}-color);
      @if ($tone == "500") {
        --#{$color}-color: var(--#{$name}-color);
      } 
    }
  }
}