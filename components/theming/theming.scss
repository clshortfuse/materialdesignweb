@import './palettes.scss';
@import './globals.scss';

@import '../common/theming.scss';

@import '../app/theming.scss';
@import '../banner/theming.scss';
@import '../bottomnav/theming.scss';
@import '../button/theming.scss';
@import '../card/theming.scss';
@import '../chip/theming.scss';
@import '../datatable/theming.scss';
@import '../dialog/theming.scss';
@import '../divider/theming.scss';
@import '../list/theming.scss';
@import '../menu/theming.scss';
@import '../navdrawer/theming.scss';
@import '../selection/theming.scss';
@import '../snackbar/theming.scss';
@import '../tab/theming.scss';
@import '../textfield/theming.scss';
@import '../type/theming.scss';

$tone-list: ("50", "100", "200", "300", "400", "500", "600", "700", "800", "900", "A100", "A200", "A400", "A700");
$added-palettes-list: ();


@mixin buildMDWThemes($config-map: ()) {
  $components: (
    'app',
    'banner',
    'bottomnav',
    'button',
    'card',
    'chip',
    'datatable',
    'dialog',
    'divider',
    'list',
    'menu',
    'navdrawer',
    'selection',
    'snackbar',
    'tab',
    'textfield',
    'type',
  );
  $themes: (
    "default": ('indigo', 'pink', 'red', 'grey', black, white),
  );
  $colors: ();
  $fallback: ('rules', 'colors', 'themes', 'ieonly');
  $variables: ('rules', 'colors', 'themes', 'auto-contrast');

  @if (map-has-key($config-map, $key: "components")) {
    $components: map-get($config-map, "components");
  }
  @if (map-has-key($config-map, $key: "themes")) {
    $themes: map-get($config-map, "themes");
  }
  @if (map-has-key($map: $config-map, $key: "colors")) {
    $colors: map-get($config-map, "colors");
  }
  @if (map-has-key($map: $config-map, $key: "fallback")) {
    $fallback: map-get($config-map, "fallback");
  }
  @if (map-has-key($map: $config-map, $key: "variables")) {
    $variables: map-get($config-map, "variables");
  }

  @each $theme in map-values($themes) {
    $palettes: ('indigo', 'pink', 'red', 'grey');
    @for $i from 1 to 5 {
      @if (length($theme) >= $i) {
        $palettes: set-nth($palettes, $i, nth($theme, $i));
      }
    }
    @each $palette in $palettes {
      @if (index($colors, $palette) == null) {
        $colors: append($colors, $palette);
      }
    }
  }

  $mdw-theme__themes: $themes !global;
  $mdw-theme__components: $components !global;
  $mdw-theme__colors: $colors !global;
  $mdw-theme__fallback: $fallback !global;
  $mdw-theme__variables: $variables !global;
  @include buildThemes();
}

@mixin buildThemes() {
  @if ($mdw-theme__fallback and $mdw-theme__fallback != 'no' and $mdw-theme__fallback != false) {
    @if ($mdw-theme__fallback == 'ieonly') {
      @include IEOnly() {
        @include buildThemeFallback();
      }
    } @else {
      @include buildThemeFallback();
    }
  }

  @if ($mdw-theme__variables and $mdw-theme__variables != 'no' and $mdw-theme__variables != false) {
    @if (index($mdw-theme__variables, 'rules')) {
      @include buildThemeRules();
    }
    @if (index($mdw-theme__variables, 'colors')) {
      @include buildThemeColors();
    }
    @if (index($mdw-theme__variables, 'themes')) {
      @include buildThemeThemes();
    }
    @if (index($mdw-theme__variables, 'auto-contrast')) {
      @include buildThemeAutoContrast();
    }
  }
}

@mixin addVariables($lightness: null) {
  @if ($lightness == 'light') {
    --foreground-color: var(--foreground-light-color);
  } @else if($lightness == 'dark') {
    --foreground-color: var(--foreground-dark-color);
  }

  @include globalThemeVariables($lightness);

  @if (index($mdw-theme__components, 'app')) {
    @include mdw-app__theme-variables($lightness);
  }
  @if (index($mdw-theme__components, 'banner')) {
    @include bannerThemeVariables($lightness);
  }
  @if (index($mdw-theme__components, 'bottomnav')) {
    @include bottomnavThemeVariables($lightness);
  }
  @if (index($mdw-theme__components, 'button')) {
    @include buttonThemeVariables($lightness);
  }
  @if (index($mdw-theme__components, 'card')) {
    @include cardThemeVariables($lightness);
  }
  @if (index($mdw-theme__components, 'chip')) {
    @include chipThemeVariables($lightness);
  }
  @if (index($mdw-theme__components, 'datatable')) {
    @include datatableThemeVariables($lightness);
  }
  @if (index($mdw-theme__components, 'dialog')) {
    @include dialogThemeVariables($lightness);
  }
  @if (index($mdw-theme__components, 'divider')) {
    @include dividerThemeVariables($lightness);
  }
  @if (index($mdw-theme__components, 'list')) {
    @include listThemeVariables($lightness);
  }
  @if (index($mdw-theme__components, 'menu')) {
    @include menuThemeVariables($lightness);
  }
  @if (index($mdw-theme__components, 'navdrawer')) {
    @include navdrawerThemeVariables($lightness);
  }
  @if (index($mdw-theme__components, 'selection')) {
    @include selectionThemeVariables($lightness);
  }
  @if (index($mdw-theme__components, 'selection')) {
    @include snackbarThemeVariables($lightness);
  }
  @if (index($mdw-theme__components, 'tab')) {
    @include tabThemeVariables($lightness);
  }
  @if (index($mdw-theme__components, 'textfield')) {
    @include mdw-textfield__theme-variables($lightness);
  }
  @if (index($mdw-theme__components, 'type')) {
    @include typeThemeVariables($lightness);
  }
}


@mixin componentContrastAndThemeRules($type: 'var', $theme: null) {
  @include globalContrastAndThemeRules($type, $theme);

  @if (index($mdw-theme__components, 'app')) {
    @include mdw-app__contrast-and-theme-rules($type, $theme);
  }
  @if (index($mdw-theme__components, 'banner')) {
    @include bannerContrastAndThemeRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'bottomnav')) {
    @include bottomnavContrastAndThemeRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'button')) {
    @include buttonContrastAndThemeRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'card')) {
    @include cardContrastAndThemeRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'datatable')) {
    @include datatableContrastAndThemeRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'dialog')) {
    @include dialogContrastAndThemeRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'list')) {
    @include listContrastAndThemeRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'selection')) {
    @include selectionContrastAndThemeRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'snackbar')) {
    @include snackbarContrastAndThemeRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'textfield')) {
    @include mdw-textfield__contrast-and-theme-rules($type, $theme);
  }
  @if (index($mdw-theme__components, 'type')) {
    @include typeContrastAndThemeRules($type, $theme);
  }
}

@mixin componentContrastRules($type: 'var', $theme: null) {

  @if (index($mdw-theme__components, 'chip')) {
    @include chipContrastRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'datatable')) {
    @include datatableContrastRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'divider')) {
    @include dividerContrastRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'menu')) {
    @include menuContrastRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'navdrawer')) {
    @include navdrawerContrastRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'tab')) {
    @include tabContrastRules($type, $theme);
  }
  @if (index($mdw-theme__components, 'textfield')) {
    @include mdw-textfield__contrast-rules($type, $theme);
  }
}

@mixin componentThemeRules($theme: null) {
  @if (index($mdw-theme__components, 'bottomnav')) {
    @include bottomnavThemeRules($theme);
  }
}

@mixin buildThemeFallback() {
  // Fill rules
  // Component rules
  // Color rules
  @if (map-has-key($mdw-theme__themes, "default")) {
    [mdw-theme-fill~="white"] {
      background-color: white;
    }
    [mdw-theme-fill~="black"] {
      background-color: black;
    }
  }
  @each $name in map-keys($mdw-theme__themes) {
    $theme: map-get($mdw-theme__themes, $name);
    $namespace: if($name == 'default', null, '[mdw-theme="#{$name}"]');
    @each $param in ('primary', 'accent', 'warn', 'background') {
      $palette: getThemeParamValue($param, $theme);
      @each $tone in $tone-list {
        $value: map-get($palette, $tone);
        $rgbValue: red($value), green($value), blue($value);
        @if ($tone == '500') {
          @if ($param != 'background') {
            #{$namespace} [mdw-theme-fill~="#{$param}"] {
              background-color: #{$value};
            }
          }
        }
        #{$namespace} [mdw-theme-fill~="#{$param}"][mdw-theme-fill~="#{$tone}"] {
          background-color: #{$value};
        }
      }
    }
  }

  @each $color in $mdw-theme__colors {
    $palette: map-get($palettes, $color);
    @each $tone in $tone-list {
      $value: map-get($palette, $tone);
      @if ($tone == '500') {
        [mdw-theme-fill~="#{$color}"] {
          background-color: #{$value};
        }
      }
      [mdw-theme-fill~="#{$color}"][mdw-theme-fill~="#{$tone}"] {
        background-color: #{$value};
      }
    }
  }

  @if (map-has-key($mdw-theme__themes, "default")) {
    [mdw-theme-fill~="light"] {
      @include componentContrastRules('light');
    }
    [mdw-theme-fill~="dark"] {
      @include componentContrastRules('dark');
    }
  }


  @each $name in map-keys($mdw-theme__themes) {
    $theme: map-get($mdw-theme__themes, $name);
    $namespace: if($name == 'default', null, '[mdw-theme="#{$name}"]');
    @if ($namespace) {
      #{$namespace} {
        @include componentThemeRules($theme);
      }
    } @else {
      @include componentThemeRules($theme);
    }
    #{$namespace} [mdw-theme-fill~="light"] {
      @include componentContrastAndThemeRules('light', $theme);
    }
    #{$namespace} [mdw-theme-fill~="dark"] {
      @include componentContrastAndThemeRules('dark', $theme);
    }
  }

  @if (map-has-key($mdw-theme__themes, "default")) {
    [mdw-theme-color~="white"] {
      color: white;
    }
    [mdw-theme-color~="black"] {
      color: black;
    }
  }

  @each $name in map-keys($mdw-theme__themes) {
    $theme: map-get($mdw-theme__themes, $name);
    $namespace: if($name == 'default', null, '[mdw-theme="#{$name}"]');
    @each $param in ('primary', 'accent', 'warn', 'background') {
      $palette: getThemeParamValue($param, $theme);
      @each $tone in $tone-list {
        $value: map-get($palette, $tone);
        $rgbValue: red($value), green($value), blue($value);
        @if ($tone == '500') {
          #{$namespace} [mdw-theme-color~="#{$param}"] {
            color: #{$value};
          }
        }
        #{$namespace} [mdw-theme-color~="#{$param}"][mdw-theme-color~="#{$tone}"] {
          color: #{$value};
        }
      }
    }
  }

  @each $color in $mdw-theme__colors {
    $palette: map-get($palettes, $color);
    @each $tone in $tone-list {
      $value: map-get($palette, $tone);
      @if ($tone == '500') {
        [mdw-theme-color~="#{$color}"] {
          color: #{$value};
        }
      }
      [mdw-theme-color~="#{$color}"][mdw-theme-color~="#{$tone}"] {
        color: #{$value};
      }
    }
  }
}

@mixin buildThemeRules() {
  :root, [mdw-theme], [mdw-theme-fill] {
    --color: var(--foreground-color);
  }

  [mdw-theme-fill] {
    --fill-color: var(--500-fill);
    background-color: unquote("rgb(var(--fill-color))");
  }
  [mdw-theme-color] {
    --color: var(--500-color);
    color: unquote("rgb(var(--color))");
  }

  @include componentContrastAndThemeRules();
  @include componentContrastRules();
  @include componentThemeRules();

  [mdw-theme-fill~="white"] {
    --fill-color: 255,255,255;
  }
  [mdw-theme-color~="white"] {
    --color: 255,255,255;
  }

  [mdw-theme-fill~="black"] {
    --fill-color: 0,0,0;
  }
  [mdw-theme-color~="black"] {
    --color: 0,0,0;
  }

  @each $color in ('primary', 'accent', 'warn', 'background') {
    @each $tone in $tone-list {
      [mdw-theme-fill~="#{$color}"] {
        @each $tone in $tone-list {
          --#{$tone}-fill: var(--#{$color}-#{$tone}-color);
        }
      }
      [mdw-theme-color~="#{$color}"] {
        @each $tone in $tone-list {
          --#{$tone}-color: var(--#{$color}-#{$tone}-color);
        }
      }
    }
  }

  @each $tone in $tone-list {
    [mdw-theme-fill~="#{$tone}"] {
      --fill-color: var(--#{$tone}-fill);
    }
    [mdw-theme-color~="#{$tone}"] {
      --color: var(--#{$tone}-color);
    }
  }

  :root,
  [mdw-theme-fill~="light"] {
    @include addVariables('light');
  }

  [mdw-theme-fill~="dark"] {
    @include addVariables('dark');
  }

}

@mixin buildThemeColors() {
  @each $color in $mdw-theme__colors {
    $palette: map-get($palettes, $color);
    @each $tone in map-keys(map-remove($palette, "light", "dark")) {
      $value: map-get($palette, $tone);
      :root {
        --#{$color}-#{$tone}-color: #{red($value),green($value),blue($value)};
        @if ($tone == "500") {
          --#{$color}-color: #{red($value),green($value),blue($value)};
        } 
      }
    }
  }
  @each $color in $mdw-theme__colors {
    [mdw-theme-fill~="#{$color}"] {
      @each $tone in $tone-list {
        --#{$tone}-fill: var(--#{$color}-#{$tone}-color);
      }
    }
    [mdw-theme-color~="#{$color}"] {
      @each $tone in $tone-list {
        --#{$tone}-color: var(--#{$color}-#{$tone}-color);
      }
    }
  }
}

@mixin buildThemeThemes() {
  @each $name in map-keys($mdw-theme__themes) {
    // $name: map-get($theme, "name");
    $theme: map-get($mdw-theme__themes, $name);
    $namespace: if($name == 'default', null, '[mdw-theme="#{$name}"]');
    $params: ('indigo', 'pink', 'red', 'grey', black, white);
    @for $i from 1 to 7 {
      @if (length($theme) >= $i) {
        $params: set-nth($params, $i, nth($theme, $i));
      }
    }
    $primary: nth($params, 1);
    $accent: nth($params, 2);
    $warn: nth($params, 3);
    $background: nth($params, 4);
    $foreground-light: nth($params, 5);
    $foreground-dark: nth($params, 6);
    @include buildPalettes($namespace, $primary, $accent, $warn, $background);
    #{if($namespace, #{$namespace}, ':root, [mdw-theme="default"]')} {
      --foreground-light-color: #{red($foreground-light),green($foreground-light),blue($foreground-light)};
      --foreground-dark-color: #{red($foreground-dark),green($foreground-dark),blue($foreground-dark)};
    }
  }
}

@mixin buildThemeAutoContrast() {
  @each $name in map-keys($mdw-theme__themes) {
    $theme: map-get($mdw-theme__themes, $name);
    $namespace: if($name == 'default', null, '[mdw-theme="#{$name}"]');
    @each $param in ('primary', 'accent', 'warn', 'background') {
      $palette: getThemeParamValue($param, $theme);
      $lightTones: map-get($palette, 'light');
      
      @each $tone in $lightTones {
        @if ($tone == '500') {
          #{$namespace} [mdw-theme-fill~="#{$param}"] {
            @include addVariables('light');
          }
        }
        #{$namespace} [mdw-theme-fill~="#{$param}"][mdw-theme-fill~="#{$tone}"] {
          @include addVariables('light');
        }
      }
      
    }
    @each $param in ('primary', 'accent', 'warn', 'background') {
      [mdw-theme-fill~="#{$param}"][mdw-theme-fill~="light"] {
        @include addVariables('light');
      }
    }
  }

  // Dark Variables
  @each $name in map-keys($mdw-theme__themes) {
    $theme: map-get($mdw-theme__themes, $name);
    $namespace: if($name == 'default', null, '[mdw-theme="#{$name}"]');
    @each $param in ('primary', 'accent', 'warn', 'background') {
      $palette: getThemeParamValue($param, $theme);
      $darkTones: map-get($palette, 'dark');
      
      @each $tone in $darkTones {
        $value: map-get($palette, $tone);
        @if ($tone == '500') {
          #{$namespace} [mdw-theme-fill~="#{$param}"] {
            @include addVariables('dark');
          }
        }
        #{$namespace} [mdw-theme-fill~="#{$param}"][mdw-theme-fill~="#{$tone}"] {
          @include addVariables('dark');
        }
      }
      
    }
    @each $param in ('primary', 'accent', 'warn', 'background') {
      [mdw-theme-fill~="#{$param}"][mdw-theme-fill~="dark"] {
        @include addVariables('dark');
      }
    }
  }
}

@mixin buildPalettes($namespace, $primary, $accent, $warn, $background) {
  @include buildPalette($namespace, 'primary', $primary);
  @include buildPalette($namespace, 'accent', $accent);
  @include buildPalette($namespace, 'warn', $warn);
  @include buildPalette($namespace, 'background', $background);
}

@mixin buildPalette($namespace, $color, $name) {
  $palette: map-get($palettes, $name);
  @each $tone in map-keys(map-remove($palette, "light", "dark")) {
    $value: map-get($palette, $tone);
    #{if($namespace, #{$namespace}, ':root, [mdw-theme="default"]')} {
      --#{$color}-#{$tone}-color: var(--#{$name}-#{$tone}-color);
      @if ($tone == "500" and $color != 'background') {
        --#{$color}-color: var(--#{$name}-color);
      }
    }
  }
}
