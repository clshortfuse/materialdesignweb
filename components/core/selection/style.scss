// https://material.io/guidelines/components/selection-controls.html#
// https://material.io/guidelines/patterns/selection.html#selection-item-selection

@import '../../common/variables.scss';

$ripple-size: dp(48);
$icon-size: dp(24);
$radio-size: dp(20);
$checkbox-size: dp(18);
$border-size: dp(2);
$horizontal-margin: dp(2);
// from ic_check_black_18px.svg
// rotated 45Â°
$checkbox-icon-height: dp(12.73);
$checkbox-icon-width: dp(5.93);
$checkbox-icon-thickness: dp(1.5);
$checkbox-icon-offset-y: dp(2.64) - $checkbox-icon-thickness - $border-size;
$checkbox-icon-offset-x: dp(6.04) - $border-size;

.mdw-selection {
  display: flex;
  flex-direction: row;
  align-items: center;
  position: relative;
  justify-content: space-between;
  animation-duration: $motion-duration-desktop-enter;
  @include allHandsets {
    animation-duration: $motion-duration-mobile-enter;
  }
  @include allTablets {
    animation-duration: $motion-duration-tablet-enter;
  }
  transition-duration: $motion-duration-desktop-default;
  @include allHandsets {
    transition-duration: $motion-duration-mobile-default;
  }
  @include allTablets {
    transition-duration: $motion-duration-tablet-default;
  }
}
.mdw-selection__input {
  display: inline-flex;
  order: 1;
  appearance: none;
  outline: none;
  padding: 0;
  margin: 0;
  position: absolute;
  min-width: $icon-size;
  min-height: $icon-size;
  top: 50%;
  cursor: pointer;
  &:disabled {
    cursor: not-allowed;
  }

  // background-color: var(--button__ripple-color);
  border-radius: 50%;
  transform: translateY(-50%) scale(1);
  opacity: 0;
  background-color: transparent;
  transition-property: transform, color, opacity;
  transition-timing-function: $motion-easing-standard;
  transition-duration: inherit;
  &:checked {
    // background-color: unquote("rgba(var(--accent-color), 0.26)");
  }
  &::-ms-check {
    // IE11
    border-radius: 50%;
    color: transparent;
    background-color: transparent;
    border-color: transparent;
  }
  &:active,
  &:focus {
    background-color: currentColor;
    transform: translateY(-50%) scale($ripple-size/$icon-size);
  }
}
.mdw-selection__icon {
  display: inline-flex;
  position: relative;
  box-sizing: border-box;
  min-width: $icon-size;
  min-height: $icon-size;
  appearance: none;
  outline: none;
  padding: 0;
  z-index: 0;
  margin: 0;
  animation-timing-function: $motion-easing-deceleration;
  animation-duration: inherit;
  cursor: pointer;
  .mdw-selection__input:disabled ~ & {
    cursor: not-allowed;
  }

  transition-property: background-color, border-color;
  transition-timing-function: $motion-easing-standard;
  transition-duration: inherit;
  background-color: transparent;


  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    border-color: currentColor;
    border-width: dp(2);
    border-style: solid;
    box-sizing: border-box;
    background-color: transparent;
    transition-property: border-width, border-color, background-color;
    transition-duration: inherit;
    transition-timing-function: $motion-easing-standard;
  }
  &::after {
    content: "";
    position: absolute;
  }
}

.mdw-selection__label ~ .mdw-selection__input {
  right: 0;
}
.mdw-selection__label ~ .mdw-selection__input,
.mdw-selection__label ~ .mdw-selection__icon,
.mdw-selection__input ~ .mdw-selection__label {
  margin-left: 8px;
}

[dir=rtl] {
  .mdw-selection__label ~ .mdw-selection__input {
    right: auto;
    left: 0;
  }
  .mdw-selection__label ~ .mdw-selection__input,
  .mdw-selection__label ~ .mdw-selection__icon,
  .mdw-selection__input ~ .mdw-selection__label {
    margin-left: 0;
    margin-right: 8px;
  }
}


.mdw-selection > .mdw-selection__input[type="checkbox"] {
  & ~ .mdw-selection__icon::before {
    left: ($icon-size - $checkbox-size) / 2;
    top: ($icon-size - $checkbox-size) / 2;
    width: $checkbox-size;
    height: $checkbox-size;
    border-radius: dp(2);
  }
  &:checked ~ .mdw-selection__icon::before,
  &:active ~ .mdw-selection__icon::before {
    border-width: $checkbox-size / 2;
  }
  &:checked:not(:active) ~ .mdw-selection__icon::before {
    background-color: currentColor;
  }

  & ~ .mdw-selection__icon::after {
    top: $border-size + (($icon-size - $checkbox-size) / 2);
    left: $border-size + (($icon-size - $checkbox-size) / 2);
    margin-left: $checkbox-icon-offset-x;
    margin-top: $checkbox-icon-offset-y;
    height: $checkbox-icon-height;
    width: $checkbox-icon-width;
    animation-timing-function: $motion-easing-deceleration;
    animation-duration: inherit;
  }
  &:checked ~ .mdw-selection__icon::after {
    // border-width: $checkbox-icon-thickness;
    // Increase visibility
    border-width: dp(2);
    background-color: transparent;
    box-sizing: border-box;
    transform: rotate(45deg);
    border-bottom-style: solid;
    border-right-style: solid;
    // border-color: unquote("rgb(var(--background-color))");
    animation-name: showCheck;
    animation-direction: normal;
    animation-fill-mode: forwards;
  }
}

.mdw-selection > .mdw-selection__input[type="radio"] {
  & ~ .mdw-selection__icon::before {
    left: ($icon-size - $radio-size) / 2;
    top: ($icon-size - $radio-size) / 2;
    width: $radio-size;
    height: $radio-size;
    border-radius: 50%;
    border-color: currentColor;
  }
  &:active ~ .mdw-selection__icon::before {
    border-width: $radio-size / 2;
  }
  & ~ .mdw-selection__icon::after {
    left: ($icon-size - $radio-size) / 2;
    top: ($icon-size - $radio-size) / 2;
    height: $radio-size;
    width: $radio-size;
    border-radius: 50%;
    background-color: currentColor;
    transform: scale(0);
    transition: transform, background-color;
    transition-timing-function: $motion-easing-standard;
    transition-duration: inherit;
  }
  &:checked ~ .mdw-selection__icon::after {
    transform: scale(0.5);
  }
}

.mdw-selection[mdw-theme-color] {
  .mdw-selection__input[type="checkbox"]:checked:not(:active),
  .mdw-selection__input[type="radio"]:checked {
    color: inherit;
    opacity: 0.26;
  }
}

@keyframes showCheck {
  // Animation is applied to pre-rotated box;
  // Clip box completely horizontally and vertically upto bottom border
  0% {
    clip: rect($checkbox-icon-height - $checkbox-icon-thickness, 0, auto, auto)
  }
  // Remove horizontal clip
  // % = stroke length upto corner
  #{$checkbox-icon-width / ($checkbox-icon-width + $checkbox-icon-height) * 100%} {
    clip: rect($checkbox-icon-height - $checkbox-icon-thickness, $checkbox-icon-width, auto, auto)
  }
  // Remove vertical clip
  100% {
    clip: rect(0, $checkbox-icon-width, auto, auto)
  }
}
