// https://material.io/design/interaction/states.html
// https://material.io/design/components/buttons.html
// https://material.io/design/iconography/system-icons.html#color

@import '../common/theming.scss';

$mdw-button__theme-values: (
  text-color:                    (('foreground-light', 0.87), ('foreground-dark', 1.00)),

  text-opacity:                  (0.87, 1.00),
  
  // Instead of using active+unfocused icon opacity, use active+focus opacity with focus ripple
  icon-opacity:                  (0.60, 0.70),
  icon-opacity__inactive:        (0.38, 0.50),

  // icon
  active-icon-color:             (('foreground-light', 0.60), ('foreground-dark', 0.70)),
  inactive-icon-color:           (('foreground-light', 0.38), ('foreground-dark', 0.50)),

  // states
  overlay-color:                 (('foreground-light', 1.00), ('foreground-dark', 1.00)),

  activated-opacity:             (0.12, 0.24),
  hover-opacity:                 (0.04, 0.08),
  focus-opacity:                 (0.12, 0.24),
  hover-focus-opacity:           (0.04 + 0.12, 0.08 + 0.24),

  activated-hover-opacity:       (0.12 + 0.04, 0.24 + 0.08),
  activated-focus-opacity:       (0.12 + 0.12, 0.24 + 0.24),
  activated-hover-focus-opacity: (0.12 + 0.04 + 0.12, 0.24 + 0.08 + 0.24),

  pressed-opacity:               (0.16, 0.32),

  // disabled
  disabled-opacity:              (0.38, 0.50),
  
  disabled-text-color:           (('foreground-light', 0.87), ('foreground-dark', 1.00)),
  disabled-background-color:     (('foreground-light', 0.38), ('foreground-dark', 0.50)),

  outline-color:                 (('foreground-light', 0.12), ('foreground-dark', 0.12)),

) !default;

@function mdwButtonThemeValue($key, $type, $theme) {
  @return mdwGetThemeValue('button', $mdw-button__theme-values, $key, $type, $theme);
}

@mixin mdw-button__theme-rules($type: 'var', $theme: null) {
  .mdw-button {
    @if ($type == 'var') {
      color: rgba(var(--color), mdwButtonThemeValue('text-opacity', $type, $theme));

      &::before,
      & > .mdw-ripple > .mdw-ripple__inner,
      &::after {
        color: unquote("rgb(var(--color))");
      }

      &[aria-pressed="false"],
      &[aria-pressed="false"][mdw-color] {
        --color: var(--foreground-color);
      }

      &[mdw-icon][aria-pressed="false"] {
        color: rgba(var(--color), mdwButtonThemeValue('icon-opacity__inactive', $type, $theme));
      }

    } @else {
      &[aria-pressed="false"],
      &[aria-pressed="false"][mdw-color],
      &:not([mdw-color]):not([mdw-fill]) {
        color: mdwButtonThemeValue("text-color", $type, $theme);

        &::before,
        & > .mdw-ripple > .mdw-ripple__inner,
        &::after {
          color: mdwButtonThemeValue("overlay-color", $type, $theme);
        }
      }
      
      &[aria-pressed="false"][mdw-icon] {
        &,
        &[mdw-color] {
          color: mdwButtonThemeValue('inactive-icon-color', $type, $theme);
        }
      }
    }

    & > .mdw-ripple > .mdw-ripple__inner,
    &::after {
      opacity: mdwButtonThemeValue("pressed-opacity", $type, $theme);
    }

    &:focus::before {
      opacity: mdwButtonThemeValue("focus-opacity", $type, $theme);
    }

    &:not([disabled]) {
      &:hover::before {
        opacity: mdwButtonThemeValue("hover-opacity", $type, $theme);
      }

      &:hover:focus::before {
        opacity: mdwButtonThemeValue("hover-focus-opacity", $type, $theme);
      }
    }

    &[aria-pressed="true"]:not([mdw-icon]) {
      &::before {
        opacity: mdwButtonThemeValue("activated-opacity", $type, $theme);
      }

      &:focus::before {
        opacity: mdwButtonThemeValue("activated-focus-opacity", $type, $theme);
      }

      &:not([disabled]) {
        &:hover::before {
          opacity: mdwButtonThemeValue("activated-hover-opacity", $type, $theme);
        }

        &:hover:focus::before {
          opacity: mdwButtonThemeValue("activated-hover-focus-opacity", $type, $theme);
        }
      }
    }

    &[mdw-outline] {
      border-color: mdwButtonThemeValue('outline-color', $type, $theme);
    }

    &[disabled] {
      opacity: mdwButtonThemeValue("disabled-opacity", $type, $theme);

      &[mdw-fill] {
        background-color: mdwButtonThemeValue("disabled-background-color", $type, $theme);
        color: mdwButtonThemeValue("disabled-text-color", $type, $theme);

        // Disabled filled buttons use parent's theming context
        @if ($type == 'var') {
          &[mdw-dark],
          &[mdw-light] {
            --button__disabled-text-color: inherit;
            --button__disabled-background-color: inherit;
          }
        }
      }
    }
  }
}

@each $name in map-keys($mdw-theme__themes) {
  $theme: map-get($mdw-theme__themes, $name);
  @include mdw-theme__add-component-fallback-rules('light', $name) {
    @include mdw-button__theme-rules('light', $theme);
  }
  @include mdw-theme__add-component-fallback-rules('dark', $name) {
    @include mdw-button__theme-rules('dark', $theme);
  }
}

@include mdw-theme__add-component-variable-rules('button', $mdw-button__theme-values) {
  @include mdw-button__theme-rules();
}
