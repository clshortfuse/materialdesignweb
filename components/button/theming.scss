// https://material.io/design/interaction/states.html
// https://material.io/design/components/buttons.html
// https://material.io/design/iconography/system-icons.html#color

@import '../common/functions.scss';
@import '../common/mixins.scss';

$buttonColors: (
  text-color:                         ((#000, 0.87), (#fff, 1.00)),

  // icon
  active-icon-color__focus:      ((#000, 0.87), (#fff, 1.00)),
  active-icon-color:             ((#000, 0.54), (#fff, 0.70)),
  inactive-icon-color:           ((#000, 0.38), (#fff, 0.50)),

  // states
  overlay-color:                 (#000, #fff),

  hover-opacity:                 (0.04, 0.08),
  focus-opacity:                 (0.12, 0.24),
  hover-focus-opacity:           (0.04 + 0.12, 0.08 + 0.24),

  activated-opacity:             (0.12, 0.24),

  activated-hover-opacity:       (0.12 + 0.04, 0.24 + 0.4),
  activated-focus-opacity:       (0.12 + 0.12, 0.24 + 0.12),
  activated-hover-focus-opacity: (0.12 + 0.04 + 0.12, 0.24 + 0.4 + 0.12),

  pressed-opacity:               (0.16, 0.32),

  // disabled
  disabled-text-color:           ((#000, 0.26), (#fff, 0.30)),
  disabled-background-color:     ((#000, 0.12), (#fff, 0.12)),
  outline-color:                 ((#000, 0.12), (#fff, 0.12)),

);

@function buttonThemeValue($key, $type, $theme) {
  @return themeValue('button', $buttonColors, $key, $type, $theme);
}

@mixin buttonThemeVariables($color, $lightness) {
  @include themeVariables('button', $buttonColors, $color, $lightness);
}

@mixin internalButtonContrastRules($type, $theme: null) {
  @at-root {
    #{&}.mdw-button {
      &:not([mdw-theme-color]) {
        color: buttonThemeValue("text-color", $type, $theme);
        &::before,
        & > .mdw-ripple > .mdw-ripple__inner,
        &:after {
          color: buttonThemeValue("overlay-color", $type, $theme);
        }
        & > .mdw-ripple > .mdw-ripple__inner,
        &:after {
          opacity: buttonThemeValue("pressed-opacity", $type, $theme);
        }
      }

      &[mdw-inactive] {
        color: buttonThemeValue("inactive-icon-color", $type, $theme);
      }
      &[mdw-active]:not([mdw-theme-color]):not([disabled]) {
        color: buttonThemeValue("active-icon-color", $type, $theme);
        &:focus {
          color: buttonThemeValue("active-icon-color__focus", $type, $theme);
        }
      }

      &:hover::before {
        opacity: buttonThemeValue("hover-opacity", $type, $theme);
      }
      &:focus::before {
        opacity: buttonThemeValue("focus-opacity", $type, $theme);
      }
      &:hover:focus::before {
        opacity: buttonThemeValue("hover-focus-opacity", $type, $theme);
      }

      &[mdw-activated] {
        &::before {
          opacity: buttonThemeValue("activated-opacity", $type, $theme);
        }
        &:hover::before {
          opacity: buttonThemeValue("activated-hover-opacity", $type, $theme);
        }
        &:focus::before {
          opacity: buttonThemeValue("activated-focus-opacity", $type, $theme);
        }
        &:hover:focus::before {
          opacity: buttonThemeValue("activated-hover-focus-opacity", $type, $theme);
        }
      }

      &[mdw-outline] {
        border-color: buttonThemeValue('outline-color', $type, $theme);
      }

      &[disabled] {
        color: buttonThemeValue("disabled-text-color", $type, $theme);
        &[mdw-theme-fill] {
          // Disabled filled buttons use parent's theming context
          @if ($type == 'var') {
            --button__disabled-text-color: inherit;
            --button__disabled-background-color: inherit;
            color: buttonThemeValue("disabled-text-color", 'var', $theme);
            background-color: buttonThemeValue("disabled-background-color", 'var', $theme);
          } @else {
            // Average color and opacity
            color: mix(
              buttonThemeValue("disabled-text-color", 'light', $theme),
              buttonThemeValue("disabled-text-color", 'dark', $theme)
            );
            background-color: mix(
              buttonThemeValue("disabled-background-color", 'light', $theme),
              buttonThemeValue("disabled-background-color", 'dark', $theme)
            );
          }
        }
      }
    }
  }
}

// Vary by contrast
@mixin buttonContrastRules($type: 'var', $theme: null) {
  @include internalButtonContrastRules($type, $theme);
  @if ($type != 'var') {
    :not([mdw-theme-fill]) {
      @include internalButtonContrastRules($type, $theme);
    }
  }
}
