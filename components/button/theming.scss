// https://material.io/guidelines/components/buttons.html
// https://material.io/guidelines/style/icons.html

@import '../common/functions.scss';
@import '../common/mixins.scss';

$buttonColors: (
  text-color:                 ((#000, 0.87), (#fff, 1.00)),
  active-color__focus:        ((#000, 0.87), (#fff, 1.00)),
  active-color:               ((#000, 0.54), (#fff, 0.70)),
  inactive-color:             ((#000, 0.38), (#fff, 0.50)),

  press-color__transparent:   ((#999, 0.40), (#CCC, 0.25)),
  ripple-color:               ( #000       ,  #fff       ),
  ripple-opacity:             (         0.12 ,          0.30,           0.20),

  icon-press-opacity:         (         0.12 ,          0.30,           0.20),
  //icon-ripple-opacity:        (         0.36 ,          0.90,           0.60), // 3x for visibility
  icon-ripple-color:          ( #000       ,  #fff       ),
  transparent-focus-overlay:  ( #000       ,  #fff       ),
  filled-focus-overlay:       ((#000, 0.12), (#000, 0.12), (#fff, 0.12)),
  disabled-text-color:        ((#000, 0.26), (#fff, 0.30)),
  disabled-background-color:  ((#000, 0.12), (#fff, 0.12)),
  filled-press-primary-color: (('primary', '700', 1.0), ('primary', '700', 1.0)),
  filled-press-accent-color:  (('accent',  '700', 1.0), ('accent',  '700', 1.0)),
  filled-press-warn-color:    (('warn',    '700', 1.0), ('warn',    '700', 1.0))
);

@function buttonThemeValue($key, $type, $theme) {
  @return themeValue('button', $buttonColors, $key, $type, $theme);
}

@mixin buttonThemeVariables($color, $lightness) {
  @include themeVariables('button', $buttonColors, $color, $lightness);
}

@mixin internalButtonContrastRules($type, $theme: null) {
  @at-root {
    #{&}.mdw-button {
      // Disabled
      &[disabled] {
        color: buttonThemeValue("disabled-text-color", $type, $theme);
        &[mdw-theme-fill] {
          // Disabled filled buttons use parent's theming context
          @if ($type == 'var') {
            --button__disabled-text-color: inherit;
            --button__disabled-background-color: inherit;
            color: buttonThemeValue("disabled-text-color", 'var', $theme);
            background-color: buttonThemeValue("disabled-background-color", 'var', $theme);
          } @else {
            // Average color and opacity
            color: mix(
              buttonThemeValue("disabled-text-color", 'light', $theme),
              buttonThemeValue("disabled-text-color", 'dark', $theme)
            );
            background-color: mix(
              buttonThemeValue("disabled-background-color", 'light', $theme),
              buttonThemeValue("disabled-background-color", 'dark', $theme)
            );
          }
        }
      }

      // Foreground Color
      &:not([mdw-theme-color]):not([disabled]) {
        color: buttonThemeValue("text-color", $type, $theme);
      }
      &[mdw-inactive]:not([disabled]) {
        color: buttonThemeValue("inactive-color", $type, $theme);
      }
      &[mdw-active]:not([mdw-theme-color]):not([disabled]) {
        color: buttonThemeValue("active-color", $type, $theme);
        &:focus {
          color: buttonThemeValue("active-color__focus", $type, $theme);
        }
      }

      // Focus overlay
      &:not([mdw-theme-color]):not([mdw-theme-fill]) {
        &::before {
          background-color: buttonThemeValue("transparent-focus-overlay", $type, $theme);
        }
        .mdw-button__focus-ring {
          color: buttonThemeValue("transparent-focus-overlay", $type, $theme);
        }
      }

      // Press on transparent button
      &:active:not([mdw-theme-fill]):not([mdw-theme-color]) {
        background-color: buttonThemeValue("press-color__transparent", $type, $theme);
      }

      // Can be overridden by theme-color
      &:not([mdw-theme-color]) {
        & > .mdw-ripple > .mdw-ripple__inner,
        &:after {
          opacity: buttonThemeValue("ripple-opacity", $type, $theme);
          color: buttonThemeValue("ripple-color", $type, $theme);
        }
      }
    }
  }
}

// Vary by contrast
@mixin buttonContrastRules($type: 'var', $theme: null) {
  @include internalButtonContrastRules($type, $theme);
  @if ($type != 'var') {
    :not([mdw-theme-fill]) {
      @include internalButtonContrastRules($type, $theme);
    }
  }
}

// Varies by theme
@mixin buttonThemeRules($theme: null) {
  .mdw-button[mdw-theme-fill~=dark]:not([disabled]):active {
    &[mdw-theme-fill~="primary"],
    &[mdw-theme-fill|="primary"] {
      background-color: buttonThemeValue("filled-press-primary-color", null, $theme);
    }
    &[mdw-theme-fill~="accent"],
    &[mdw-theme-fill|="accent"] {
      background-color: buttonThemeValue("filled-press-accent-color", null, $theme);
    }
    &[mdw-theme-fill~="warn"],
    &[mdw-theme-fill|="warn"] {
      background-color: buttonThemeValue("filled-press-warn-color", null, $theme);
    }
  }
}