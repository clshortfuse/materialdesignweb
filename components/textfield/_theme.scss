// https://material.io/archive/guidelines/components/text-fields.html#text-fields-states

@use '../../core/theme/index.scss' as theme;
@use '../../core/platform.scss' as platform;

$themeValues: (
  
  text-color:                         theme.$foreground,
  default-text-opacity:               theme.$high-opacity,
  secondary-text-opacity:             theme.$medium-opacity,
  disabled-opacity:                   theme.$inactive-opacity,

  placeholder-color__focus:           (('foreground-light', 0.42), ('foreground-dark', 0.50)),
  filled-disabled-border-color:       (('foreground-light', 0.10), ('foreground-dark', 0.30)),
  filled-disabled-background-color:   (('foreground-light', 0.03), ('foreground-dark', 0.05)),
  fill-color:                         (('foreground-light', 0.06), ('foreground-dark', 0.10)),
  fill-color__hover:                  (('foreground-light', 0.12), ('foreground-dark', 0.20)),
  border-line-color:                  (('foreground-light', 0.42), ('foreground-dark', 0.70)),
  border-line-color__hover:           (('foreground-light', 0.87), ('foreground-dark', 1.00)),

  warn-color:                         (('warn', 'A700', 1.00), ('warn', 'A200', 1.00)),
  warn-color__selection:              (('warn', 'A700', 0.20), ('warn', 'A200', 0.40)),

  selection-opacity:                  (0.08 + 0.12, 0.16 + 0.24),
) !default;

@function getThemeValue($key, $type) {
  @return theme.getThemeValue('textfield', $themeValues, $key, $type);
}

@mixin addThemeRules($type: 'var') {
  .mdw-textfield[mdw-outlined] {
    &:active > .mdw-textfield__input:not(:disabled),
    & > .mdw-textfield__input:not(:disabled):focus {
      & ~ .mdw-textfield__border {
          color: inherit;
      }
    }

    &,
    &[mdw-ink] {
      &:active > .mdw-textfield__input:not(:disabled),
      & > .mdw-textfield__input:not(:disabled):focus {
        &:invalid {
          & ~ .mdw-textfield__border,
          & ~ .mdw-textfield__border::before {
            color: RGBA(getThemeValue("warn-color", $type));
          }
        }
      }
    }
  }

  .mdw-textfield__error-text {
    color: RGBA(getThemeValue("warn-color", $type));
  }

  .mdw-textfield {
    // Focus
    &:active > .mdw-textfield__input:not(:disabled),
    & > .mdw-textfield__input:not(:disabled):active,
    & > .mdw-textfield__input:not(:disabled):focus {
      @if($type == 'var') {
        &::selection {
          background-color: RGBA(var(--mdw-ink), getThemeValue("selection-opacity", $type));
        }
      }

      & ~ .mdw-textfield__border {
        border-bottom-color: inherit;
        color: inherit;
      }
      & ~ .mdw-textfield__border .mdw-textfield__label {
        color: inherit;
      }

      & ~ .mdw-textfield__border::before {
        color: inherit;
      }
    }

    &:active > .mdw-textfield__input:not(:disabled):invalid,
    & > .mdw-textfield__input:not(:disabled):focus:invalid {
      caret-color: RGBA(getThemeValue("warn-color", $type));

      &::selection {
        background-color: RGBA(getThemeValue("warn-color__selection", $type));
      }

      & ~ .mdw-textfield__border {
        border-bottom-color: currentColor;
        color: RGBA(getThemeValue("warn-color", $type));
      }

      & ~ .mdw-textfield__border .mdw-textfield__label {
        // color: getThemeValue("warn-color", $type);
      }

      & ~ .mdw-textfield__border::after {
        color: RGBA(getThemeValue("warn-color", $type));
      }

    }
  }

  .mdw-textfield__signifier,
  .mdw-textfield__label,
  .mdw-textfield__prefix,
  .mdw-textfield__suffix {
    color: RGBA(getThemeValue("text-color", $type), getThemeValue("secondary-text-opacity", $type));
  }

  .mdw-textfield__icon[mdw-dropdown] {
    color: RGBA(getThemeValue("text-color", $type), getThemeValue("secondary-text-opacity", $type));
  }

  .mdw-textfield[mdw-value-empty] > input.mdw-textfield__input:not(:focus) {
    color: transparent;
  }

  input.mdw-textfield__input:not(:focus):placeholder-shown {
    color: transparent;
  }

  .mdw-textfield__input::selection {
    // color: inherit;
  }

  .mdw-textfield__input::placeholder {
    color: RGBA(getThemeValue("placeholder-color__focus", $type));
  }

  .mdw-textfield__input:-ms-input-placeholder {
    color: RGBA(getThemeValue("placeholder-color__focus", $type)) !important;
  }

  .mdw-textfield__input::-ms-input-placeholder {
    color: RGBA(getThemeValue("placeholder-color__focus", $type)) !important;
  }

  .mdw-textfield__input {
    color: RGBA(getThemeValue("text-color", $type), getThemeValue("default-text-opacity", $type));
    @if ($type == 'var') {
      caret-color: RGBA(var(--mdw-ink));
    } @else {
      caret-color: inherit;
    }

    // Disabled
    &:disabled,
    &[aria-disabled="true"] {
      &,
      & ~ .mdw-textfield__border,
      & ~ .mdw-textfield__border .mdw-textfield__label,
      & ~ .mdw-textfield__signifier,
      & ~ .mdw-textfield__prefix,
      & ~ .mdw-textfield__suffix,
      & ~ .mdw-textfield__icon {
        color: RGBA(getThemeValue("text-color", $type), getThemeValue("disabled-opacity", $type));
      }
    }

    // Hover
    &:not(:focus):hover:not(:disabled):not(:active) ~ .mdw-textfield__border,
    &:not(:focus):not(:disabled):not(:active) ~ .mdw-textfield__border:hover {
      color: RGBA(getThemeValue("border-line-color__hover", $type));
    }
    
    &:not(:focus) {
      /* Rules must be separated for IE11 support */
      &:placeholder-shown ~ .mdw-textfield__prefix,
      &:placeholder-shown ~ .mdw-textfield__suffix {
        color: transparent;
      }

      .mdw-textfield[mdw-value-empty] > & ~ .mdw-textfield__prefix,
      .mdw-textfield[mdw-value-empty] > & ~ .mdw-textfield__suffix {
        color: transparent;
      }
    }
  }

  select.mdw-textfield__input {
    // Firefox focusring styling workaround
    // https://dxr.mozilla.org/mozilla-central/source/browser/components/extensions/extension.css
    .mdw-textfield[mdw-value-empty] > & {
      color: RGBA(getThemeValue("placeholder-color__focus", $type));

      &:focus {
        color: RGBA(getThemeValue("text-color", $type), getThemeValue("secondary-text-opacity", $type));
      }

      &:-moz-focusring {
        color: transparent;
        text-shadow: 0 0 0 RGBA(getThemeValue("placeholder-color__focus", $type));
      }

      &:focus:-moz-focusring {
        color: transparent;
        text-shadow: 0 0 0 RGBA(getThemeValue("text-color", $type), getThemeValue("secondary-text-opacity", $type));
      }
    }

    &:-moz-focusring {
      color: transparent;
      text-shadow: 0 0 0 RGBA(getThemeValue("text-color", $type), getThemeValue("secondary-text-opacity", $type));
    }

    // On MS Browsers, color rule represents the dropdown popup's foreground color
    @include platform.ifEdge() {
      color: #000;
    }
    @media screen and (-ms-high-contrast: none) {
      color: #000;
    }
    @media screen and (-ms-high-contrast: active) {
      color: #fff;
    }
    

    // ::ms-value represents the closed state color
    &::-ms-value {
      background: transparent;
      color: RGBA(getThemeValue("text-color", $type), getThemeValue("default-text-opacity", $type));
    }

    // Dropdown caret
    &::-ms-expand {
      display: none;
    }
  }
  
  .mdw-textfield__border {
    color: RGBA(getThemeValue("border-line-color", $type));
  }

  .mdw-textfield__helper-text {
    color: RGBA(getThemeValue("text-color", $type), getThemeValue("secondary-text-opacity", $type));
  }


  .mdw-textfield__input:disabled ~ .mdw-textfield__helper-text {
    color: RGBA(getThemeValue("text-color", $type), getThemeValue("disabled-opacity", $type));
  }

  .mdw-textfield__input:focus:invalid ~ .mdw-textfield__helper-text {
    color: transparent;
  }

  .mdw-textfield {
    @if ($type != 'var') {
      caret-color: currentColor;
    }

    &:not([mdw-solo]) > .mdw-textfield__input:not(:focus)::placeholder {
      color: transparent;
    }

    &:not([mdw-solo]) > .mdw-textfield__input:not(:focus):-ms-input-placeholder {
      color: transparent !important;
    }

    &:not([mdw-solo]) > .mdw-textfield__input:not(:focus)::-ms-input-placeholder {
      color: transparent !important;
    }

    .mdw-textfield__input:not(:focus) ~ .mdw-textfield__border {
      color: RGBA(getThemeValue("border-line-color", $type));
    }
    
    .mdw-textfield__input:disabled ~ .mdw-textfield__border {
      background-color: RGBA(getThemeValue("filled-disabled-background-color", $type));
      color: RGBA(getThemeValue("filled-disabled-border-color", $type));
    }

    &:not([mdw-outlined]) > .mdw-textfield__border {
      background-color: RGBA(getThemeValue("fill-color", $type));
    }

    &:not([mdw-outlined]) > .mdw-textfield__input:not(:disabled) {
      & ~ .mdw-textfield__border:hover,
      &:hover ~ .mdw-textfield__border {
        background-color: RGBA(getThemeValue("fill-color__hover", $type));
      }
    }
  }
}


@include theme.addComponentFallbackRules('light') {
  @include addThemeRules('light');
}
@include theme.addComponentFallbackRules('dark') {
  @include addThemeRules('dark');
}

@include theme.addComponentCSSVariableRules('textfield', $themeValues) {
  @include addThemeRules();
}
