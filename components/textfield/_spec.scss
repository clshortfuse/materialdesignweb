// https://material.io/design/components/text-fields.html
// https://material.io/archive/guidelines/components/text-fields.html

@use '../../core/_elevation.scss' as elevation;
@use '../../core/_length.scss' as *;
@use '../../core/_motion.scss' as motion;
@use '../../core/_platform.scss' as platform;
@use '../../core/_type.scss' as type;

$border-line-height: 1px !default;
$border-line-height__focused: 2px !default;

$textarea-padding-horizontal: 16px !default;
$outline-start-width: 10px !default;
$outline-end-width: 8px !default;

$input-top-alignment: calc(#{dp(8 + 4)} + #{sp(12)} + 0.125em) !default; // Extra 1/8em for font alignment
$input-bottom-alignment: 8px !default;
$input-dense-reduction: 8px !default;
$input-top-alignment-dense: calc(#{dp(8 + 2)} + #{sp(12)} + 0.125em) !default;
$input-bottom-alignment-dense: 4px !default;

// CSS Grid Layout
//     1   |  2  |   3    |   4   |        5        |    6   |  7
//   -------------------------------------------------------------
// 1: Gap |      | Label ----------------------------------- | Gap
// 1: Gap | Icon | Prefix | Input | Dropdown Button | Suffix | Gap
// 1: Border -----------------------------------------------------
// 2: Gap |      | Helper/Error                              | Gap
// 2: Dropdown ---------------------------------------------------

.mdw-textfield {
  display: grid;
  position: relative;
  align-items: baseline;
  grid-template-columns: 12px auto auto 1fr auto auto 8px;
  grid-template-rows: auto auto;

  padding: 8px 0;

  transition-duration: motion.$simpleDuration;
  transition-timing-function: motion.$standardEasing;

  &[mdw-solo],
  &[mdw-solo][mdw-dense] {
    grid-template-columns: 0 auto auto 1fr auto auto 0;

    padding: 0;

    .mdw-textfield__input {
      align-self: center;

      margin: 0;
    }

    .mdw-textfield__border {
      display: none;
    }
  }

  &:not([mdw-solo]) {
    @include type.addRules('subtitle');
  }
}

.mdw-textfield::before {
  // 8dp margin
  // 12sp label
  // 4dp margin
  // 1em input
  // 16dp margin
  // = 56dp at 16sp

  content: "";

  display: inline-block;

  grid-column: 4;
  grid-row: 1;

  box-sizing: content-box; // Don't allow global override
  block-size: 1em;
  margin-block: dp(8 + 4) 16px;
  padding-block-start: sp(12);

}

.mdw-textfield[mdw-dense]::before {
  margin-block: 8px 12px;
}

.mdw-textfield[mdw-solo],
.mdw-textfield[mdw-solo][mdw-dense],
.mdw-textfield[mdw-outlined] {
  .mdw-textfield__prefix,
  .mdw-textfield__suffix,
  .mdw-textfield__icon {
    align-self: center;

    margin-block: 0;
  }

  textarea.mdw-textfield__input {
    & ~ .mdw-textfield__prefix,
    & ~ .mdw-textfield__suffix {
      align-self: flex-start;

      margin-block: 0;

      transform: translateY(calc((8px + sp(12) + 4px + 1em + 16px) * 0.5)) translateY(-50%);
    }
  }
}

.mdw-textfield__prefix,
.mdw-textfield__suffix {
  grid-row: 1;

  pointer-events: none;

  transition-duration: motion.$simpleDuration;
  transition-property: color;
  transition-timing-function: motion.$standardEasing;
  will-change: color;
}

.mdw-textfield__prefix {
  grid-column: 3;
}

.mdw-textfield__suffix {
  grid-column: 6;
}

.mdw-textfield__prefix::after,
.mdw-textfield__suffix::before {
  content: "";

  display: inline-block;

  inline-size: 4px;
}

.mdw-textfield__outline-gap {
  // Using transform would create a new composition layer and cause subpixel rendering issues
  position: absolute;
  inset-block: $border-line-height__focused 0;
  inset-inline: dp(12);

  grid-column: 2;
  grid-row: 1;

  margin-block: -$border-line-height__focused #{-$border-line-height};

  .mdw-textfield[mdw-outlined] & {
    position: relative;
    inset: auto;

    max-inline-size: calc(100% - 24px);
    margin-block: -$border-line-height;

    color: inherit;
  }

  &::before,
  &::after {
    content: none;

    position: absolute;
    inset-block-start: 0;

    border-block-start-style: solid;
    border-block-start-width: $border-line-height;

    transition-delay: 1ms;
    transition-duration: motion.$simpleDuration * 0.5;
    transition-property: left, right;
    transition-timing-function: motion.$standardEasing;

    border-color: inherit;

    .mdw-textfield[mdw-outlined] & {
      content: "";

      // Height must exactly match parent to avoid subpixel rendering issues
      inset-block-end: 0;

      border-block-start-style: solid;
      border-block-end-style: solid;

      &:not(:focus) {
        border-style: none;
      }

      border-block-start-color: currentColor;
      border-block-end-color: transparent;
      border-radius: 0;
      color: inherit;
    }
  }
}

.mdw-textfield__border {
  display: flex;
  position: relative;
  align-self: stretch;
  grid-column-start: 1;
  grid-column-end: span 7;
  grid-row: 1;

  box-sizing: border-box;
  min-inline-size: 100%; // Fixes FireFox Grid bug
  border-block-start-style: none;
  border-block-end-style: solid;
  border-width: $border-line-height;
  border-start-start-radius: 4px;
  border-start-end-radius: 4px;
  border-end-start-radius: 0;
  border-end-end-radius: 0;
  border-inline-start-style: none;
  border-inline-end-style: none;

  cursor: pointer;
  -webkit-tap-highlight-color: transparent;

  transition-delay: 1ms;
  transition-duration: motion.$simpleDuration;
  transition-property: color, border-color;
  transition-timing-function: motion.$standardEasing;

  border-block-start-color: transparent;
  border-block-end-color: currentColor;
  border-inline-start-color: transparent;
  border-inline-end-color: transparent;

  .mdw-textfield[mdw-outlined] & {
    border-block-start-style: solid;
    border-block-end-style: solid;
    border-end-start-radius: 4px;

    border-end-end-radius: 4px;
    border-inline-start-style: solid;
    border-inline-end-style: solid;

    transition: none;
  }

  .mdw-textfield__input:focus ~ & {
    pointer-events: none;
  }

  .mdw-textfield__input:disabled ~ & {
    cursor: not-allowed;
  }

  &::before,
  &::after {
    content: "";

    position: absolute;
    inset-block-end: -$border-line-height__focused;
    inset-inline: 0;

    block-size: 100%;
    border-block-end-style: solid;
    border-width: $border-line-height__focused;

    transition-delay: 1ms;
    transition-duration: motion.$collapseDuration;
    transition-property: transform;
    transition-timing-function: motion.$accelerateEasing;
    will-change: transform;

    transform: scaleX(0) translateY(-$border-line-height * 0.5);

    border-radius: inherit;
    color: transparent;

    .mdw-textfield[mdw-outlined] & {
      content: "";

      position: relative;
      inset: auto;

      transition: none;
      will-change: auto;

      transform: none;

      color: inherit;
    }
  }

  .mdw-textfield[mdw-outlined] &::after {
    flex-grow: 1;
  }

  .mdw-textfield[mdw-outlined] &::before {
    min-inline-size: $outline-start-width - $border-line-height;
    margin-block-start: -$border-line-height;
    margin-inline: -$border-line-height 0;
    border-block-start-style: solid;
    border-block-end-style: solid;
    border-width: inherit;
    border-start-start-radius: inherit;
    border-start-end-radius: 0;
    border-end-start-radius: inherit;
    border-end-end-radius: 0;
    border-inline-start-style: solid;
    border-inline-end-style: none;

    border-block-start-color: currentColor;
    border-block-end-color: transparent;
    border-inline-start-color: currentColor;
    border-inline-end-color: transparent;
  }

  .mdw-textfield[mdw-outlined] &::after {
    min-inline-size: $outline-end-width - $border-line-height;
    margin-block-start: -$border-line-height;
    margin-inline: 0 #{-$border-line-height};
    border-block-start-style: solid;
    border-block-end-style: solid;
    border-width: inherit;
    border-start-start-radius: 0;
    border-start-end-radius: inherit;
    border-end-start-radius: 0;
    border-end-end-radius: inherit;
    border-inline-start-style: none;
    border-inline-end-style: solid;

    border-block-start-color: currentColor;
    border-block-end-color: transparent;
    border-inline-start-color: transparent;
    border-inline-end-color: currentColor;
  }
}

.mdw-textfield__label {
  position: absolute;
  inset-inline: 0;
  align-self: flex-start;
  overflow-x: hidden;
  overflow-y: hidden;

  margin: 0;
  padding: 0;

  pointer-events: none; // allow clickthrough

  transition-duration: motion.$shapeChangeDuration;
  transition-property: top, transform, font-size;
  transition-timing-function: motion.$standardEasing;
  will-change: top, transform, font-size;

  text-overflow: ellipsis;
  white-space: nowrap;

  .mdw-textfield[mdw-outlined] & {
    position: relative; // reflow DOM

    padding: 0 4px;
  }

  &::before {
    // Add upper 8dp from text-top to top for positioning
    // Add lower 8dp from baseline to keep vertically centered
    @include type.addRules('caption');
    content: "";

    display: inline-block;
    vertical-align: -8px;

    box-sizing: content-box; // Don't allow global override
    block-size: 1em;
    margin-block-start: 8px;
    padding-block-start: 8px;

    .mdw-textfield[mdw-outlined] & {
      content: none;
    }
  }
}

.mdw-textfield__signifier {
  align-self: center;
  grid-column: 2;
  grid-row: 1;

  margin-block: 8px;

  &::after {
    content: "";

    display: inline-block;

    inline-size: 8px;
  }

  & ~ .mdw-textfield__border .mdw-textfield__outline-gap {
    margin-inline: dp(24 + 8) 0;
  }

  .mdw-textfield[mdw-outlined] & ~ .mdw-textfield__border {
    &::before {
      padding-inline: 0 dp(24 + 8);
    }

    .mdw-textfield__outline-gap {
      max-inline-size: calc(100% - #{dp(24 + 24 + 8)});
      margin-inline-start: 0;
    }
  }
}

.mdw-textfield[mdw-outlined] {
  &,
  &[mdw-dense], {
    .mdw-textfield__input,
    textfield.mdw-textfield__input,
    .mdw-textfield__prefix,
    .mdw-textfield__suffix {
      margin-block: calc(#{sp(6)} + 2px); // Half of label + 2px // Equidistant from border
    }
  }
}

.mdw-textfield__input {
  grid-column-start: 4;
  grid-column-end: span 2;
  grid-row: 1;

  box-sizing: border-box;
  min-inline-size: 0; // Firefox CSS Grid fix
  inline-size: 100%;
  border: none;
  padding: 0;

  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  outline: none;
  -webkit-tap-highlight-color: transparent;

  z-index: 1;

  background: none;
  box-shadow: none; // Firefox :invalid styling

  font-weight: inherit;
  font-size: inherit;
  line-height: inherit;
  font-family: inherit;
  letter-spacing: inherit;

  .mdw-textfield[mdw-outlined] & {
    align-self: center;

    margin-block: calc(#{sp(6)} + 2px); // Half of label + 2px // Equidistant from border
    border-inline-start: 2px solid transparent;
    border-inline-end: none;
  }

  &::placeholder {
    transition-delay: 1ms;
    transition-duration: motion.$simpleDuration;
    transition-property: color;
    transition-timing-function: motion.$standardEasing;
    will-change: color;
  }

  &:not(:focus) {
    cursor: pointer;
  }

  &:disabled {
    cursor: not-allowed;
  }
}

.mdw-textfield__input,
.mdw-textfield__prefix,
.mdw-textfield__suffix {
  align-self: flex-start;

  margin-block: $input-top-alignment $input-bottom-alignment;

  // margin-top: $input-top-alignment-dense;
  // margin-bottom: $input-bottom-alignment-dense;
  .mdw-textfield[mdw-dense] > & {
    // margin-top: $input-top-alignment-dense;
    // margin-bottom: $input-bottom-alignment-dense;
  }
}

textarea.mdw-textfield__input {
  -ms-overflow-style: -ms-autohiding-scrollbar;
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;

  min-block-size: 1em; // Avoid clipping on resize
  min-inline-size: 100%; // Always fill container horizontally
  max-inline-size: 100%; // Don't allow resize beyond bounds
  inline-size: 100% !important; // Unfortunately required
  margin-block: $input-top-alignment $input-bottom-alignment;
  padding-inline: 0 $textarea-padding-horizontal;

  // margin-top: $input-top-alignment-dense;
  // margin-bottom: $input-bottom-alignment-dense;
  .mdw-textfield[mdw-dense] > & {
    margin-block: $input-top-alignment-dense $input-bottom-alignment-dense;
  }

  .mdw-textfield[mdw-autosize] > & {
    min-block-size: 1em;

    resize: none;
  }
}

select.mdw-textfield__input {
  padding-inline: 0 24px;

  cursor: pointer;

  option {
    -moz-appearance: none;
    -webkit-appearance: none;
    appearance: none;

    font-weight: inherit;
    font-size: inherit;
    font-family: inherit;
  }
}

.mdw-textfield__error-text {
  opacity: 0;
  transform: translateY(-25%);
}

.mdw-textfield__helper-text,
.mdw-textfield__error-text {
  @include type.textTopToTop(4);
  @include type.addRules('caption');
  grid-column: 3;
  grid-column-end: span 4;
  grid-row: 2;
  overflow: hidden;

  text-overflow: ellipsis;
  white-space: nowrap;
}

.mdw-textfield__icon {
  display: flex;
  align-self: center;
  grid-column: 5;
  grid-row: 1;

  block-size: 24px;
  inline-size: 24px;

  &[mdw-dropdown] {
    pointer-events: none;

    &::after {
      content: "";

      // Triangle shape
      inline-size: 0;
      margin-block-start: 10px;
      margin-inline: auto;
      border-block-start: 5px solid currentColor;
      border-inline-start: 5px solid transparent;
      border-inline-end: 5px solid transparent;
    }
  }
}

.mdw-textfield__dropdown {
  position: absolute;
  grid-column: 1;
  grid-column-end: span 7;
  grid-row: 2;
  overflow: hidden;

  max-block-size: 0;
  max-inline-size: 100%;
  inline-size: 100%;
  margin-block: 0 8px;

  border-start-start-radius: 0;
  border-start-end-radius: 0;
  border-end-start-radius: 4px;
  border-end-end-radius: 4px;

  transition-duration: motion.$collapseDuration;
  transition-property: box-shadow, max-height;
  transition-timing-function: motion.$accelerateEasing;

  z-index: 2;

  box-shadow: none;

  .mdw-textfield[mdw-outlined] & {
    margin-block-start: 8px;

    border-start-start-radius: 4px;
    border-start-end-radius: 4px;
  }

  &:active,
  &[mdw-show],
  input:focus ~ & {
    &:not([mdw-hide]) {
      transition-duration: motion.$expandDuration;
      transition-timing-function: motion.$decelerateEasing;

      box-shadow: elevation.boxShadow(24);

      &[mdw-type="list"] {
        max-block-size: 300px;
      }
    }
  }

  &[mdw-type="list"] {
    -ms-overflow-style: -ms-autohiding-scrollbar;
    overflow-y: auto;
  }

}

.mdw-textfield__label {
  @include type.addRules('subtitle');

  inset-block-start: 50%;

  transform: translateY(-50%);
}

.mdw-textfield__outline-gap {
  &::before {
    inset-inline: 0 50%;
  }

  &::after {
    inset-inline: 50% 0;
  }
}

// Floating states:
// HTMLSelectElement, :focus, :autofill, or has texted (unfocused with placeholder)

select.mdw-textfield__input ~ .mdw-textfield__border,
.mdw-textfield__input:focus ~ .mdw-textfield__border,
.mdw-textfield__input:-webkit-autofill ~ .mdw-textfield__border,
.mdw-textfield__input:not(:placeholder-shown):not(:focus) ~ .mdw-textfield__border {
  .mdw-textfield__label {
    @include type.addRules('caption');
    inset-block-start: 0;

    transform: translateY(0);

    .mdw-textfield[mdw-outlined] & {
      transform: translateY(-50%);
    }
  }

  .mdw-textfield__outline-gap {
    &::before {
      inset-inline: 0 100%;
    }

    &::after {
      inset-inline: 100% 0;
    }
  }
}

// Invalid state
.mdw-textfield:active > .mdw-textfield__input:not(:disabled),
.mdw-textfield > .mdw-textfield__input:not(:disabled):focus {
  &:invalid {
    & ~ .mdw-textfield__border .mdw-textfield__outline-gap {
      animation-name: labelShake;
      animation-duration: motion.$shapeChangeDuration;
      animation-timing-function: linear;
      animation-delay: motion.$simpleDuration;
    }
  }
}

// Focus
.mdw-textfield:not([mdw-outlined]) {
  &:active > .mdw-textfield__input:not(:disabled),
  & > .mdw-textfield__input:not(:disabled):focus {
    & ~ .mdw-textfield__border::before,
    &:invalid ~ .mdw-textfield__border::after {
      transition-duration: motion.$expandDuration;
      transition-timing-function: motion.$decelerateEasing;

      transform: scaleX(1) translateY(-$border-line-height * 0.5);
    }
  }
}

// Border change on outlined active or focus
.mdw-textfield[mdw-outlined]:active > .mdw-textfield__input:not(:disabled) ~ .mdw-textfield__border,
.mdw-textfield[mdw-outlined] > .mdw-textfield__input:not(:disabled):focus ~ .mdw-textfield__border {
  border-width: $border-line-height__focused;

  &::before {
    min-inline-size: $outline-start-width - $border-line-height__focused;
    margin-block-start: -$border-line-height__focused;
    margin-inline: -$border-line-height__focused 0;
  }

  &::after {
    min-inline-size: $outline-end-width - $border-line-height__focused;
    margin-block-start: -$border-line-height__focused;
    margin-inline: 0 -$border-line-height__focused;
  }

  .mdw-textfield__outline-gap {
    margin-block: -$border-line-height__focused;

    &::before,
    &::after {
      border-block-start-width: $border-line-height__focused;
    }
  }
}

// Invalid
.mdw-textfield__input:focus:invalid ~ .mdw-textfield__error-text {
  transition-duration: motion.$fadeInDuration;
  transition-property: transform, opacity;
  transition-timing-function: motion.$decelerateEasing;
  will-change: transform, opacity;

  opacity: 1;
  transform: translateY(0);
}

@keyframes labelShake {
  0% {
    transform: translateX(0);
  }

  33% {
    transform: translateX(4px);
  }

  66% {
    transform: translateX(-4px);
  }

  100% {
    transform: translateX(0);
  }
}
