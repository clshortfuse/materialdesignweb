@import '../theming/palettes';

@function sp($multiplier) {
  @return ($multiplier/16.0) * 1rem;
}

@function dp($multiplier) {
  @return $multiplier * 1px;
}

@function elevation($dp) {
  @return unquote(map-get($drop-shadow-values, $dp));
}

@function parseThemeItem($item, $type, $theme: null) {
  $length: length($item);
  @if ($length == 1) {
    @return $item;
  } @else if ($length == 2) {
    @return rgba(nth($item, 1), nth($item, 2));
  } @else {
    $color: nth($item, 1);
    $tone: nth($item, 2);
    $opacity: nth($item, 3);
    $value: getThemePaletteColor($color, $tone, $type, $theme);
    @if ($opacity == null) {
      $opacity: 1.0;
    }
    @return rgba($value, $opacity);
  }
  @return null;
}

@function getThemeMapItem($colorMap, $key, $type) {
  $list: map-get($colorMap, $key);
  $length: length($list);
  @if ($type == 'dark-background') {
    @if ($length >= $dark-background) {
      @return nth($list, $dark-background);
    }
    $type: 'dark';
  }

  @if ($type == 'dark') {
    @if ($length >= $dark) {
      @return nth($list, $dark);
    }
  }
  @return nth($list, $light);
}

@function themeValue($component, $colorMap, $key, $type, $theme: null) {
  @if ($type == 'var') {
    @return var(--#{$component}__#{$key});
  }
  $item: getThemeMapItem($colorMap, $key, $type);
  @return parseThemeItem($item, $type, $theme);
}

@function getThemePalette($color, $theme) {
  @if ($color == 'primary') {
    @if ($theme != null) {
      @return map-get($palettes, nth($theme, 1));
    }
    @error 'Missing primary color!';
  } @else if ($color == 'accent') {
    @if (length($theme) > 1) {
      @return map-get($palettes, nth($theme, 2));
    }
    @error 'Missing accent color!';
  } @else if ($color == 'warn') {
    @if (length($theme) > 2) {
      @return map-get($palettes, nth($theme, 3));
    }
    @return map-get($palettes, 'red');
  } @else if ($color == 'background') {
    @if (length($theme) > 3) {
      @return map-get($palettes, nth($theme, 4));
    }
    @return map-get($palettes, 'grey');
  }
  @error "Unrecognized Theme Palette!";
}

@function getThemePaletteColor($color, $tone, $type, $theme: null) {
  @if ($type == 'var' or ($type == null and $theme == null)) {
    @if ($tone == null) {
      @return var(--#{$color}-color);
    }
    @return var(--#{$color}-#{$tone}-color);
  }
  @if ($tone == null) {
    $tone: '500';
  }

  $palette: getThemePalette($color, $theme);
  $value: map-get($palette, $tone);
  @return $value;
}

// https://material.io/guidelines/resources/shadows.html
// from Sketch
$drop-shadow-values: (
   0: "none",
   1: "0 00px 02px 0px rgba(0,0,0,0.14), 0 02px 02px 0px rgba(0,0,0,0.12), 0 01px 03px 0 rgba(0,0,0,0.20)",
   2: "0 00px 04px 0px rgba(0,0,0,0.14), 0 03px 04px 0px rgba(0,0,0,0.12), 0 01px 05px 0 rgba(0,0,0,0.20)",
   3: "0 03px 03px 0px rgba(0,0,0,0.14), 0 03px 04px 0px rgba(0,0,0,0.12), 0 01px 08px 0 rgba(0,0,0,0.20)",
   4: "0 02px 04px 0px rgba(0,0,0,0.14), 0 04px 05px 0px rgba(0,0,0,0.12), 0 01px 10px 0 rgba(0,0,0,0.20)",
   6: "0 06px 10px 0px rgba(0,0,0,0.14), 0 01px 18px 0px rgba(0,0,0,0.12), 0 03px 05px 0 rgba(0,0,0,0.20)",
   8: "0 08px 10px 1px rgba(0,0,0,0.14), 0 03px 14px 3px rgba(0,0,0,0.12), 0 04px 15px 0 rgba(0,0,0,0.20)",
   9: "0 09px 12px 1px rgba(0,0,0,0.14), 0 03px 16px 2px rgba(0,0,0,0.12), 0 05px 06px 0 rgba(0,0,0,0.20)",
  12: "0 12px 17px 2px rgba(0,0,0,0.14), 0 05px 22px 4px rgba(0,0,0,0.12), 0 07px 08px 0 rgba(0,0,0,0.20)",
  16: "0 16px 24px 2px rgba(0,0,0,0.14), 0 06px 30px 5px rgba(0,0,0,0.12), 0 08px 10px 0 rgba(0,0,0,0.20)",
  24: "0 24px 38px 3px rgba(0,0,0,0.14), 0 09px 46px 8px rgba(0,0,0,0.12), 0 11px 15px 0 rgba(0,0,0,0.20)"
);
