@import '../theming/palettes';

@function sp($multiplier) {
  @return ($multiplier/16.0) * 1rem;
}

@function dp($multiplier) {
  @return $multiplier * 1px;
}

@function elevation($dp, $filter:false) {
  @if ($filter == true) {
    @return unquote(map-get($filter-values, $dp));
  } @else {
    @return unquote(map-get($box-shadow-values, $dp));
  }
}

@function parseThemeItem($item, $type, $theme: null) {
  $length: length($item);
  @if ($length == 1) {
    @return $item;
  } @else if ($length == 2) {
    $color: nth($item, 1);
    $opacity: nth($item, 2);
    @if (type_of($color) == string) {
      $color: getThemeParamColor($color, null, $type, $theme);
    }
    @return rgba($color, $opacity);
  } @else {
    $color: nth($item, 1);
    $tone: nth($item, 2);
    $opacity: nth($item, 3);
    $value: getThemeParamColor($color, $tone, $type, $theme);
    @if ($opacity == null) {
      $opacity: 1.0;
    }
    @return rgba($value, $opacity);
  }
  @return null;
}

@function getThemeMapItem($colorMap, $key, $type) {
  $list: map-get($colorMap, $key);
  $length: length($list);
  @if ($type == 'dark-background') {
    @if ($length >= $dark-background) {
      @return nth($list, $dark-background);
    }
    $type: 'dark';
  }

  @if ($type == 'dark') {
    @if ($length >= $dark) {
      @return nth($list, $dark);
    }
  }
  @return nth($list, $light);
}

@function themeValue($component, $colorMap, $key, $type, $theme: null) {
  @if ($type == 'var') {
    @return var(--#{$component}__#{$key});
  }
  $item: getThemeMapItem($colorMap, $key, $type);
  @return parseThemeItem($item, $type, $theme);
}

@function getThemeParamValue($param, $theme) {
  @if ($param == 'primary') {
    @if ($theme != null) {
      @return map-get($palettes, nth($theme, 1));
    }
    @error 'Missing primary color!';
  } @else if ($param == 'accent') {
    @if (length($theme) > 1) {
      @return map-get($palettes, nth($theme, 2));
    }
    @error 'Missing accent color!';
  } @else if ($param == 'warn') {
    @if (length($theme) > 2) {
      @return map-get($palettes, nth($theme, 3));
    }
    @return map-get($palettes, 'red');
  } @else if ($param == 'background') {
    @if (length($theme) > 3) {
      @return map-get($palettes, nth($theme, 4));
    }
    @return map-get($palettes, 'grey');
  } @else if ($param == 'foreground-light') {
    @if (length($theme) > 4) {
      @return nth($theme, 5);
    }
    @return #000000;
  } @else if ($param == 'foreground-dark') {
    @if (length($theme) > 5) {
      @return nth($theme, 6);
    }
    @return #FFFFFF;
  }
  @error "Unrecognized Theme Palette!";
}

@function getThemeParamColor($param, $tone, $type, $theme: null) {
  @if ($type == 'var' or ($type == null and $theme == null)) {
    @if ($tone == null) {
      @return var(--#{$param}-color);
    }
    @return var(--#{$param}-#{$tone}-color);
  }
  @if ($tone == null) {
    $tone: '500';
  }

  $paramValue: getThemeParamValue($param, $theme);
  @if (($param == 'foreground-light') or ($param == 'foreground-dark')) {
    @return $paramValue;
  }
  @return map-get($paramValue, $tone);
}

// https://material.io/archive/guidelines/resources/shadows.html#shadows-sketch
$box-shadow-values: (
   0: "none",
   1: "0 00px 02px 0px rgba(0,0,0,0.14), 0 02px 02px 0px rgba(0,0,0,0.12), 0 01px 03px 0 rgba(0,0,0,0.20)",
   2: "0 00px 04px 0px rgba(0,0,0,0.14), 0 03px 04px 0px rgba(0,0,0,0.12), 0 01px 05px 0 rgba(0,0,0,0.20)",
   3: "0 03px 03px 0px rgba(0,0,0,0.14), 0 03px 04px 0px rgba(0,0,0,0.12), 0 01px 08px 0 rgba(0,0,0,0.20)",
   4: "0 02px 04px 0px rgba(0,0,0,0.14), 0 04px 05px 0px rgba(0,0,0,0.12), 0 01px 10px 0 rgba(0,0,0,0.20)",
   6: "0 06px 10px 0px rgba(0,0,0,0.14), 0 01px 18px 0px rgba(0,0,0,0.12), 0 03px 05px 0 rgba(0,0,0,0.20)",
   8: "0 08px 10px 1px rgba(0,0,0,0.14), 0 03px 14px 3px rgba(0,0,0,0.12), 0 04px 15px 0 rgba(0,0,0,0.20)",
   9: "0 09px 12px 1px rgba(0,0,0,0.14), 0 03px 16px 2px rgba(0,0,0,0.12), 0 05px 06px 0 rgba(0,0,0,0.20)",
  12: "0 12px 17px 2px rgba(0,0,0,0.14), 0 05px 22px 4px rgba(0,0,0,0.12), 0 07px 08px 0 rgba(0,0,0,0.20)",
  16: "0 16px 24px 2px rgba(0,0,0,0.14), 0 06px 30px 5px rgba(0,0,0,0.12), 0 08px 10px 0 rgba(0,0,0,0.20)",
  24: "0 24px 38px 3px rgba(0,0,0,0.14), 0 09px 46px 8px rgba(0,0,0,0.12), 0 11px 15px 0 rgba(0,0,0,0.20)"
);

// https://material.io/archive/guidelines/resources/shadows.html#shadows-illustrator
$filter-values: (
   0: "none",
   1: "drop-shadow(0 00.92px 00.5px rgba(0,0,0,0.26)) drop-shadow(0 0 00.67px rgba(0,0,0,0.08))",
   2: "drop-shadow(0 01.83px 01.0px rgba(0,0,0,0.26)) drop-shadow(0 0 01.33px rgba(0,0,0,0.08))",
   3: "drop-shadow(0 02.75px 01.5px rgba(0,0,0,0.26)) drop-shadow(0 0 02.00px rgba(0,0,0,0.08))",
   4: "drop-shadow(0 03.67px 02.0px rgba(0,0,0,0.26)) drop-shadow(0 0 02.67px rgba(0,0,0,0.08))",
   6: "drop-shadow(0 05.50px 03.0px rgba(0,0,0,0.26)) drop-shadow(0 0 04.00px rgba(0,0,0,0.08))",
   8: "drop-shadow(0 07.33px 04.0px rgba(0,0,0,0.26)) drop-shadow(0 0 05.33px rgba(0,0,0,0.08))",
   9: "drop-shadow(0 08.25px 04.5px rgba(0,0,0,0.26)) drop-shadow(0 0 06.00px rgba(0,0,0,0.08))",
  12: "drop-shadow(0 11.00px 06.0px rgba(0,0,0,0.26)) drop-shadow(0 0 08.00px rgba(0,0,0,0.08))",
  16: "drop-shadow(0 14.67px 08.0px rgba(0,0,0,0.26)) drop-shadow(0 0 10.67px rgba(0,0,0,0.08))",
  24: "drop-shadow(0 22.12px 12.0px rgba(0,0,0,0.26)) drop-shadow(0 0 16.00px rgba(0,0,0,0.08))",
);
