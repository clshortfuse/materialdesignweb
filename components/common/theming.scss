@import '../theming/palettes';

@function parseThemeItem($item, $type, $theme: null) {
  $length: length($item);
  @if ($length == 1) {
    @return $item;
  } @else if ($length == 2) {
    $color: nth($item, 1);
    $opacity: nth($item, 2);
    @if (type_of($color) == string) {
      $color: getThemeParamColor($color, null, $type, $theme);
    }
    @return rgba($color, $opacity);
  } @else {
    $color: nth($item, 1);
    $tone: nth($item, 2);
    $opacity: nth($item, 3);
    $value: getThemeParamColor($color, $tone, $type, $theme);
    @if ($opacity == null) {
      $opacity: 1.0;
    }
    @return rgba($value, $opacity);
  }
  @return null;
}

@function getThemeMapItem($colorMap, $key, $lightness) {
  $list: map-get($colorMap, $key);
  $length: length($list);

  @if ($lightness == 'dark') {
    @if ($length >= 1) {
      @return nth($list, 2);
    }
  }
  @return nth($list, 1);
}

@function themeValue($component, $colorMap, $key, $type, $theme: null) {
  @if ($type == 'var') {
    @return var(--#{$component}__#{$key});
  }
  $item: getThemeMapItem($colorMap, $key, $type);
  @return parseThemeItem($item, $type, $theme);
}

@function getThemeParamValue($param, $theme) {
  @if ($param == 'primary') {
    @if ($theme != null) {
      @return map-get($palettes, nth($theme, 1));
    }
    @error 'Missing primary color!';
  } @else if ($param == 'accent') {
    @if (length($theme) > 1) {
      @return map-get($palettes, nth($theme, 2));
    }
    @error 'Missing accent color!';
  } @else if ($param == 'warn') {
    @if (length($theme) > 2) {
      @return map-get($palettes, nth($theme, 3));
    }
    @return map-get($palettes, 'red');
  } @else if ($param == 'background') {
    @if (length($theme) > 3) {
      @return map-get($palettes, nth($theme, 4));
    }
    @return map-get($palettes, 'grey');
  } @else if ($param == 'foreground-light') {
    @if (length($theme) > 4) {
      @return nth($theme, 5);
    }
    @return #000000;
  } @else if ($param == 'foreground-dark') {
    @if (length($theme) > 5) {
      @return nth($theme, 6);
    }
    @return #FFFFFF;
  }
  @error "Unrecognized Theme Palette!" ;
}

@function getThemeParamColor($param, $tone, $type, $theme: null) {
  @if ($type == 'var' or ($type == null and $theme == null)) {
    @if ($tone == null) {
      @return var(--#{$param}-color);
    }
    @return var(--#{$param}-#{$tone}-color);
  }
  @if ($tone == null) {
    $tone: '500';
  }

  $paramValue: getThemeParamValue($param, $theme);
  @if (($param == 'foreground-light') or ($param == 'foreground-dark')) {
    @return $paramValue;
  }
  @return map-get($paramValue, $tone);
}

// Theming mixins

@mixin themeVariables($component, $map, $lightness) {
  @each $key in map-keys($map) {
    $item: getThemeMapItem($map, $key, $lightness);
    $value: null;
    $length: length($item);
    @if ($length == 1) {
      $value: $item;
    } @else if ($length == 2) {
      $color: nth($item, 1);
      $opacity: nth($item, 2);
      @if (type_of($color) == string) {
        $value: rgba(var(--#{$color}-color), #{$opacity})
      } @else {
        $value: rgba($color, $opacity);
      }
    } @else {
      $color: nth($item,1);
      $tone: nth($item,2);
      $opacity: nth($item,3);
      @if ($tone == null or tone == '500') {
        $value: unquote("rgba(var(--#{$color}-color), #{$opacity})");
      } @else {
        $value: unquote("rgba(var(--#{$color}-#{$tone}-color), #{$opacity})");
      }
    }
    --#{$component}__#{$key}: #{$value};
  }
}