// max-device-width is deprecated for promotion of better heuristics (touch, viewport, hover, etc)
// https://drafts.csswg.org/mediaqueries-4/#mf-deprecated
// min-device-width is unsafe due to older Android bugs
// https://developers.google.com/web/fundamentals/design-and-ux/responsive/

@import './variables.scss';

// Device-based mixins
// Detect size and orientation based on window.screen variables (device-width/device-height)

@mixin portraitHandsets {
  @media screen
    and (max-device-width: $breakpoint-portrait-handset-max)
    and (max-device-aspect-ratio: 1/1) {
      --screen: "portraitHandsets";
      @content;
    }
}
@mixin landscapeHandsets {
  @media screen
    and (max-device-width: $breakpoint-landscape-handset-max)
    and (min-device-aspect-ratio: 1/1) {
      --screen: "landscapeHandsets";
      @content;
    }
}

@mixin allHandsets {
  @media
    screen
      and (max-device-width: $breakpoint-portrait-handset-max)
      and (max-device-aspect-ratio: 1/1),
    screen
      and (max-device-width: $breakpoint-landscape-handset-max)
      and (min-device-aspect-ratio: 1/1) {
    @content;
  }
}

@mixin allTablets {
  @media
    screen
      and (max-device-width: $breakpoint-portrait-tablet-max)
      and (max-device-aspect-ratio: 1/1),
    screen
      and (max-device-width: $breakpoint-landscape-tablet-max)
      and (min-device-aspect-ratio: 1/1) {
    @content;
  }
}

@mixin allHandsetsAndTablets {
  @media
    screen
      and (max-device-width: $breakpoint-portrait-tablet-max)
      and (max-device-aspect-ratio: 1/1),
    screen
      and (max-device-width: $breakpoint-landscape-tablet-max)
      and (min-device-aspect-ratio: 1/1) {
    @content;
  }
}

// Viewport based mixins

@mixin viewport-xsmall {
  @media screen and (max-width: #{$breakpoint-window-xsmall - 1}) {
    @content;
  }
}

@mixin viewport-small {
  @media screen and (max-width: #{$breakpoint-window-medium - 1}) {
    @content;
  }
}

@mixin viewport-small-only {
  @media screen
    and (min-width: $breakpoint-window-small)
    and (max-width: #{$breakpoint-window-medium - 1}) {
    @content;
  }
}

@mixin viewport-medium {
  @media screen and (max-width: #{$breakpoint-window-large - 1}) {
    @content;
  }
}

@mixin viewport-medium-only {
  @media screen
    and (min-width: $breakpoint-window-medium)
    and (max-width: #{$breakpoint-window-large - 1}) {
    @content;
  }
}

@mixin viewport-large {
  @media screen and (max-width: #{$breakpoint-window-xlarge - 1}) {
    @content;
  }
}

@mixin viewport-large-only {
  @media screen
    and (min-width: $breakpoint-window-large)
    and (max-width: #{$breakpoint-window-xlarge - 1}) {
    @content;
  }
}

@mixin viewport-xlarge-only {
  @media screen and (min-width: $breakpoint-window-xlarge) {
    @content;
  }
}

// Smallest width less than 600dp
@mixin margin16dp {
  @media
    screen
      and (orientation:portrait)
      and (max-width: dp(599)),
    screen
      and (orientation:landscape)
      and (max-height: dp(599)) {
    @content;
  }
}

// Theming mixins
$light: 1;
$dark: 2;
$dark-background: 3;

@mixin themeVariables($component, $map, $color, $contrast) {
  @each $key in map-keys($map) {
    $type: 'light';
    @if ($contrast == 'dark') {
      @if ($color == 'background') {
        $type: 'dark-background';
      } @else {
        $type: 'dark';
      }
    }
    $item: getThemeMapItem($map, $key, $type);
    $value: null;
    $length: length($item);
    @if ($length == 1) {
      $value: $item;
    } @else if ($length == 2) {
      $value: rgba(nth($item, 1), nth($item, 2));
    } @else {
      $color: nth($item,1);
      $tone: nth($item,2);
      $opacity: nth($item,3);
      @if ($tone == null or tone == '500') {
        $value: unquote("rgba(var(--#{$color}-color), #{$opacity})");
      } @else {
        $value: unquote("rgba(var(--#{$color}-#{$tone}-color), #{$opacity})");
      }
    }
    --#{$component}__#{$key}: #{$value};
  }
}

// Browser specific mixins
@mixin IEOnly {
  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
    @content;
  }
}

@mixin EdgeOnly {
  @supports (-ms-ime-align:auto) {
    @content;
  }
}

@mixin MSOnly {
  @include IEOnly {
    @content;
  }
  @include EdgeOnly {
    @content;
  }
}