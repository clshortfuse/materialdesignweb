@import './variables.scss';

@mixin portraitHandsets {
  @media screen
    and (orientation:portrait)
    and (max-width: $breakpoint-portrait-handset-max - 1) {
      @content;
    }
}
@mixin landscapeHandsets {
  @media screen
    and (orientation:landscape)
    and (max-width: $breakpoint-landscape-handset-max - 1) {
      @content;
    }
}

@mixin allHandsets {
  @media
    screen
      and (orientation:portrait)
      and (max-width: $breakpoint-portrait-handset-max - 1),
    screen
      and (orientation:landscape)
      and (max-width: $breakpoint-landscape-handset-max - 1) {
    @content;
  }
}

@mixin allTablets {
  @media
    screen
      and (orientation:portrait)
      and (min-width: $breakpoint-portrait-tablet-small)
      and (max-width: $breakpoint-portrait-tablet-max - 1),
    screen
      and (orientation:landscape)
      and (min-width: $breakpoint-landscape-tablet-small)
      and (max-width: $breakpoint-landscape-tablet-max - 1) {
    @content;
  }
}

@mixin allHandsetsAndTablets {
  @media
    screen
      and (orientation:portrait)
      and (max-width: $breakpoint-portrait-tablet-max - 1),
    screen
      and (orientation:landscape)
      and (max-width: $breakpoint-landscape-tablet-max - 1) {
    @content;
  }
}

$light: 1;
$dark: 2;
$dark-background: 3;

@mixin themeVariables($component, $map, $color, $contrast) {
  @each $key in map-keys($map) {
    $type: 'light';
    @if ($contrast == 'dark') {
      @if ($color == 'background') {
        $type: 'dark-background';
      } @else {
        $type: 'dark';
      }
    }
    $item: getThemeMapItem($map, $key, $type);
    $value: null;
    $length: length($item);
    @if ($length == 1) {
      $value: $item;
    } @else if ($length == 2) {
      $value: rgba(nth($item, 1), nth($item, 2));
    } @else {
      $color: nth($item,1);
      $tone: nth($item,2);
      $opacity: nth($item,3);
      @if ($tone == null or tone == '500') {
        $value: unquote("rgba(var(--#{$color}-color), #{$opacity})");
      } @else {
        $value: unquote("rgba(var(--#{$color}-#{$tone}-color), #{$opacity})");
      }
    }
    --#{$component}__#{$key}: $value;
  }
}

@mixin IEOnly {
  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
    @content;
  }
}

@mixin EdgeOnly {
  @supports (-ms-ime-align:auto) {
    @content;
  }
}

@mixin MSOnly {
  @include IEOnly {
    @content;
  }
  @include EdgeOnly {
    @content;
  }
}

@mixin gutter16dp {
  @media 
    screen 
      and (orientation:portrait)
      and (max-width: $breakpoint-portrait-handset-max - 1),
    screen
      and (orientation:landscape)
      and (max-height: $breakpoint-landscape-handset-medium - 1) {
    @content;
  }
}
