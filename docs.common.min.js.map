{"version":3,"file":"docs.common.min.js","mappings":"+FAMA,SAASA,EAAqBC,GAAuC,IAA9BC,EAA8B,wDAAjBC,EAAiB,uDAAJ,GAC/D,MAAMC,EAAWH,EAAQI,QAAQC,cAE3BC,EAAa,GAEbC,EAAU,GAChB,IAAK,MAAMC,KAAKR,EAAQS,UACtBF,EAAQG,KAAKF,GAEf,IAAK,MAAMG,KAAQX,EAAQM,WACP,UAAdK,EAAKC,OAGLD,EAAKE,MAAMC,OACbR,EAAWI,KAAM,GAAEC,EAAKC,SAASD,EAAKE,UAEtCP,EAAWI,KAAKC,EAAKC,OAGzBN,EAAWS,OACX,MAAMC,EAAc,CAClBb,EACAI,EAAQO,OAAU,UAASP,EAAQU,KAAK,QAAU,GAClDX,EAAWW,KAAK,MAEZC,EAAkBjB,EACnB,GAAe,QAAbE,GAAsBI,EAAQO,OAAS,GAAKX,IAAWI,EAAQO,OAAU,IAAGP,EAAQU,KAAK,OAAS,KAAKX,EAAWQ,OAAU,IAAGR,EAAWW,KAAK,QAAU,KAC3J,IAAGD,EAAYG,OAAOC,SAASH,KAAK,KAAKI,UACxCC,EAAkBrB,EAAM,GAAM,KAAIE,KAClCoB,EAAQ,CAACL,GAETM,EAAa,GACnB,IAAIC,GAAW,EACf,IAAK,MAAMC,KAAS1B,EAAQ2B,WAAY,CACtC,IAAIC,EACAF,aAAiBG,aACnBD,EAAW7B,EAAqB2B,EAAOzB,EAAM,KAAIC,KAC7C0B,EAASP,SACXI,GAAW,IAEJC,EAAMI,WAAa7B,IAC5B2B,EAAY,KAAIF,EAAMI,aAEpBF,GAAYA,EAASP,QACvBG,EAAWd,KAAKkB,GAGpB,OAAIH,EACExB,EACM,GAAEC,EAAaqB,EAAMN,KAAK,OAAOO,EAAWP,KAAK,IAAII,SAExDnB,EAAaqB,EAAMN,KAAK,IAAMO,EAAWP,KAAK,IAAII,OAASC,GAEpEC,EAAMb,QAAQc,EAAYtB,EAAaoB,GAChCpB,EAAaqB,EAAMJ,QAAQY,GAASA,EAAKV,SAAQJ,KAAK,O","sources":["webpack:///./_sample-utils.js"],"sourcesContent":["/**\n * @param {Element|HTMLElement} element\n * @param {boolean} [pug=false]\n * @param {string} [linePrefix='']\n * @return {string}\n */\nfunction convertElementToCode(element, pug = false, linePrefix = '') {\n  const htmlType = element.tagName.toLowerCase();\n  /** @type {string[]} */\n  const attributes = [];\n  /** @type {string[]} */\n  const classes = [];\n  for (const c of element.classList) {\n    classes.push(c);\n  }\n  for (const attr of element.attributes) {\n    if (attr.name === 'class') {\n      continue;\n    }\n    if (attr.value.length) {\n      attributes.push(`${attr.name}=\"${attr.value}\"`);\n    } else {\n      attributes.push(attr.name);\n    }\n  }\n  attributes.sort();\n  const syntaxItems = [\n    htmlType,\n    classes.length ? `class=\"${classes.join(' ')}\"` : '',\n    attributes.join(' '),\n  ];\n  const openingHTMLLine = pug\n    ? `${htmlType === 'div' && classes.length ? '' : htmlType}${classes.length ? `.${classes.join('.')}` : ''}${attributes.length ? `(${attributes.join(' ')})` : ''}`\n    : `<${syntaxItems.filter(Boolean).join(' ').trim()}>`;\n  const closingHTMLLine = pug ? '' : `</${htmlType}>`;\n  const lines = [openingHTMLLine];\n  /** @type {string[]} */\n  const innerLines = [];\n  let onlyText = true;\n  for (const child of element.childNodes) {\n    let lineText;\n    if (child instanceof HTMLElement) {\n      lineText = convertElementToCode(child, pug, `  ${linePrefix}`);\n      if (lineText.trim()) {\n        onlyText = false;\n      }\n    } else if (child.nodeValue && pug) {\n      lineText = `  ${child.nodeValue}`;\n    }\n    if (lineText && lineText.trim()) {\n      innerLines.push(lineText);\n    }\n  }\n  if (onlyText) {\n    if (pug) {\n      return `${linePrefix + lines.join('')} ${innerLines.join('').trim()}`;\n    }\n    return linePrefix + lines.join('') + innerLines.join('').trim() + closingHTMLLine;\n  }\n  lines.push(...innerLines, linePrefix + closingHTMLLine);\n  return linePrefix + lines.filter((line) => line.trim()).join('\\n');\n}\n\n/**\n * @param {Element} element\n * @param {string} tagname\n * @return {Element}\n */\nfunction changeElementTagName(element, tagname) {\n  const newElement = document.createElement(tagname);\n  let i = element.attributes.length;\n  while (i--) {\n    const attr = element.attributes.item(i);\n    const clonedAttr = /** @type {Attr} */ (attr.cloneNode());\n    newElement.attributes.setNamedItem(clonedAttr);\n  }\n  while (element.firstChild) {\n    newElement.appendChild(element.firstChild);\n  }\n\n  element.replaceWith(newElement);\n  return newElement;\n}\n\nexport {\n  convertElementToCode,\n  changeElementTagName,\n};\n"],"names":["convertElementToCode","element","pug","linePrefix","htmlType","tagName","toLowerCase","attributes","classes","c","classList","push","attr","name","value","length","sort","syntaxItems","join","openingHTMLLine","filter","Boolean","trim","closingHTMLLine","lines","innerLines","onlyText","child","childNodes","lineText","HTMLElement","nodeValue","line"],"sourceRoot":""}