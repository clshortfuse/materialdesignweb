/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 393);
/******/ })
/************************************************************************/
/******/ ({

/***/ 100:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Search = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = __webpack_require__(44);

var _index2 = __webpack_require__(43);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @param {Object} options
 * @param {string} options.input
 * @param {string} options.content
 * @return {boolean}
 */
function containsTextFilter(options) {
  return options.content.trim().toLocaleLowerCase().indexOf(options.input.trim().toLocaleLowerCase()) !== -1;
}

/**
 * @param {Object} options
 * @param {string} options.input
 * @param {string} options.content
 * @return {boolean}
 */
function startsWithTextFilter(options) {
  return options.content.trim().toLocaleLowerCase().indexOf(options.input.trim().toLocaleLowerCase()) === 0;
}

/**
 * @param {HTMLElement} item
 * @return {string}
 */
function defaultItemTextParser(item) {
  /**
   * @param {Node} node
   * @return {string}
   */
  function getTextNodeOnly(node) {
    var text = '';
    for (var i = 0; i < node.childNodes.length; i += 1) {
      var childNode = node.childNodes[i];
      if (childNode.nodeType === Node.TEXT_NODE) {
        text += childNode.textContent;
      }
    }
    return text;
  }
  if (item.hasAttribute('data-mdw-search-text')) {
    return item.getAttribute('data-mdw-search-text');
  }
  var textElement = item.querySelector('.mdw-list__text .mdw-list__text-line');
  if (!textElement) {
    textElement = item.querySelector('.mdw-list__text');
  }
  if (!textElement) {
    textElement = item.querySelector('.mdw-list__text');
  }
  if (textElement) {
    return getTextNodeOnly(textElement);
  }
  return getTextNodeOnly(item);
}

/**
 * @param {Element} list
 * @param {boolean=} backwards
 * @return {Element} sibling
 */
function selectSibling(list, backwards) {
  var current = list.querySelector('.mdw-list__item[mdw-selected]');
  var items = list.querySelectorAll('.mdw-list__item:not([hidden]):not([disabled])');
  var sibling = void 0;
  if (current && !current.hasAttribute('hidden')) {
    for (var i = 0; i < items.length; i += 1) {
      var item = items[i];
      if (item === current) {
        if (backwards) {
          sibling = items[i - 1];
        } else {
          sibling = items[i + 1];
        }
        break;
      }
    }
  } else if (backwards) {
    sibling = items[items.length - 1];
  } else {
    sibling = items[0];
  }
  if (sibling && sibling !== current) {
    if (current) {
      current.removeAttribute('mdw-selected');
    }
    sibling.setAttribute('mdw-selected', '');
    return sibling;
  }
  return null;
}

/**
 * @param {HTMLElement} listItem
 * @return {void}
 */
function scrollItemIntoView(listItem) {
  /**
   * @param {HTMLElement} el
   * @return {number}
   */
  function getElementVisibility(el) {
    var rect = el.getBoundingClientRect();
    var _rect = rect,
        top = _rect.top,
        height = _rect.height;

    var next = el.parentElement;
    do {
      rect = next.getBoundingClientRect();
      if (top + height > rect.bottom) {
        // bottom clipped
        return 1;
      }
      if (top < rect.top) {
        // top clipped
        return -1;
      }
      next = next.parentElement;
    } while (next !== document.body);
    if (top < 0) {
      return -1;
    } else if (top + height > document.documentElement.clientHeight) {
      return 1;
    }
    return 0;
  }
  var visibility = getElementVisibility(listItem);
  if (visibility < 0) {
    listItem.scrollIntoView({ behavior: 'smooth', block: 'center', inline: 'center' });
  } else if (visibility > 0) {
    listItem.scrollIntoView({ behavior: 'smooth', block: 'center', inline: 'center' });
  }
}

var Search = function () {
  /**
   * @param {Object} options
   * @param {TextField} options.textfield
   * @param {List} options.list
   * @param {('contains'|'startsWith'|function({input:string, content:string}):boolean)=} [options.textFilter='contains']
   * @param {(function(HTMLElement):string)=} options.itemTextParser
   * @param {boolean=} [options.dropdown=false]
   * @param {boolean=} [options.filterItems=true]
   * @param {('replace'|'append'|'none')} [options.suggestionMethod='replace']
   * @param {(function(HTMLElement))=} options.onItemActivated
   * @param {(function(string):Promise)=} options.performSearch
   * @param {(function(any):Promise)=} options.updateList
   * @param {boolean=} [options.searchOnFocus=true]
   * @param {number=} options.debounce Debounce time in milliseconds
   */
  function Search(options) {
    var _this = this;

    _classCallCheck(this, Search);

    this.textfield = options.textfield;
    this.list = options.list;
    if (typeof options.textFilter === 'function') {
      this.filter = options.textFilter;
    } else if (options.textFilter === 'startsWith') {
      this.filter = startsWithTextFilter;
    } else {
      this.filter = containsTextFilter;
    }
    this.itemTextParser = defaultItemTextParser || options.itemTextParser;

    this.list.element.addEventListener('click', function (event) {
      _this.handleClickEvent(event);
    });
    this.textfield.input.addEventListener('keydown', function (event) {
      _this.onTextFieldKeydownEvent(event);
    });
    this.textfield.input.addEventListener('input', function (event) {
      if (_this.handleInputEvent) {
        _this.handleInputEvent(event);
      }
    });
    this.textfield.input.addEventListener('blur', function (event) {
      if (_this.handleBlurEvent) {
        _this.handleBlurEvent(event);
      }
    });
    this.textfield.input.addEventListener('focus', function (event) {
      if (_this.searchOnFocus) {
        _this.handleInputEvent(event);
      }
    });

    this.dropdown = options.dropdown;
    if (options.filterItems !== false) {
      this.filterItems = true;
    }
    if (options.searchOnFocus !== false) {
      this.searchOnFocus = true;
    }
    this.debounce = options.debounce;
    this.suggestionMethod = options.suggestionMethod || 'replace';
    this.currentSearchTerm = this.textfield.input.value || '';
    /** @type {string} */
    this.suggestedInput = null;
    /** @type {string} */
    this.previousValue = null;
    if (options.onItemActivated) {
      this.onItemActivated = options.onItemActivated;
    }
    this.performSearch = options.performSearch || function () {
      return Promise.resolve();
    };
    this.updateList = options.updateList || function () {
      return Promise.resolve();
    };
  }

  /**
   * @param {MouseEvent} event
   * @return {void}
   */


  _createClass(Search, [{
    key: 'handleClickEvent',
    value: function handleClickEvent(event) {
      if (!event.target) {
        return;
      }
      if (!event.target.classList) {
        return;
      }
      if (!event.target.classList.contains('mdw-list__item')) {
        return;
      }
      this.onItemActivated(event.target);
    }

    /**
     * Default input handler
     * @param {Event|InputEvent} event
     * @return {void}
     */

  }, {
    key: 'handleInputEvent',
    value: function handleInputEvent(event) {
      var _this2 = this;

      if (document.activeElement !== this.textfield.input) {
        return;
      }
      this.showDropDown();
      var inputValue = this.textfield.input.value || '';
      if (inputValue === this.suggestedInput) {
        return;
      }
      if (inputValue === this.previousValue) {
        return;
      }
      this.previousValue = inputValue;
      this.currentSearchTerm = inputValue;
      var results = null;
      Promise.resolve().then(function () {
        return _this2.performDebounce(inputValue);
      }).then(function () {
        return _this2.checkExpired(inputValue);
      }).then(function () {
        return _this2.performSearch(inputValue);
      }).then(function (searchResults) {
        results = searchResults;
      }).then(function () {
        return _this2.checkExpired(inputValue);
      }).then(function () {
        return _this2.updateList(results);
      }).then(function () {
        return _this2.filterListItems();
      }).catch(function (error) {
        if (error.message === 'debounced') {
          return;
        }
        if (error.message === 'expired') {
          return;
        }
        throw error;
      });
    }
  }, {
    key: 'checkExpired',
    value: function checkExpired(inputValue) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        if (inputValue === _this3.currentSearchTerm) {
          resolve();
        } else {
          reject(new Error('expired'));
        }
      });
    }

    /**
     * @param {string} searchTerm
     * @return {Promise}
     */

  }, {
    key: 'performDebounce',
    value: function performDebounce(searchTerm) {
      var _this4 = this;

      if (!this.debounce) {
        return Promise.resolve();
      }
      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          if (searchTerm !== _this4.currentSearchTerm) {
            reject(new Error('debounced'));
            return;
          }
          resolve();
        }, _this4.debounce);
      });
    }

    /** @return {boolean} handled */

  }, {
    key: 'showDropDown',
    value: function showDropDown() {
      if (!this.dropdown) {
        return false;
      }
      var dropDownElement = this.textfield.element.querySelector('.mdw-textfield__dropdown');
      var changed = false;
      if (dropDownElement.hasAttribute('mdw-hide')) {
        dropDownElement.removeAttribute('mdw-hide');
        changed = true;
      }
      if (!dropDownElement.hasAttribute('mdw-show')) {
        dropDownElement.setAttribute('mdw-show', '');
        changed = true;
      }
      return changed;
    }

    /** @return {boolean} handled */

  }, {
    key: 'isDropDownShown',
    value: function isDropDownShown() {
      if (!this.dropdown) {
        return true;
      }
      var dropDownElement = this.textfield.element.querySelector('.mdw-textfield__dropdown');
      if (dropDownElement.hasAttribute('mdw-hide')) {
        return false;
      }
      if (this.textfield.input === document.activeElement) {
        return true;
      }
      if (dropDownElement.hasAttribute('mdw-show')) {
        return true;
      }
      return false;
    }

    /** @return {boolean} handled */

  }, {
    key: 'hideDropDown',
    value: function hideDropDown() {
      if (!this.dropdown) {
        return true;
      }
      var dropDownElement = this.textfield.element.querySelector('.mdw-textfield__dropdown');
      if (!dropDownElement.hasAttribute('mdw-hide')) {
        dropDownElement.setAttribute('mdw-hide', '');
        return true;
      }
      return false;
    }

    /**
     * @param {Event|FocusEvent} event
     * @return {void}
     */

  }, {
    key: 'handleBlurEvent',
    value: function handleBlurEvent(event) {
      if (this.dropdown) {
        var dropDownElement = this.textfield.element.querySelector('.mdw-textfield__dropdown');
        if (dropDownElement.hasAttribute('mdw-show')) {
          dropDownElement.removeAttribute('mdw-show');
        }
      }
    }

    /**
     * @param {HTMLElement} item
     * @return {void}
     */

  }, {
    key: 'onItemSelected',
    value: function onItemSelected(item) {
      if (this.suggestionMethod === 'none') {
        return;
      }
      var suggestion = this.itemTextParser(item);
      if (suggestion) {
        suggestion = suggestion.trim();
      }
      if (!suggestion) {
        return;
      }
      this.suggestedInput = suggestion;
      if (this.suggestionMethod === 'replace') {
        this.textfield.input.value = suggestion;
      } else if (this.suggestionMethod === 'append') {
        var selectionStart = (this.previousValue || '').length;
        var selectionEnd = suggestion.length;
        this.textfield.input.value = suggestion;
        this.textfield.input.setSelectionRange(selectionStart, selectionEnd);
      }
      this.textfield.updateInputEmptyState();
    }

    /**
     * @param {HTMLElement} item
     * @return {void}
     */

  }, {
    key: 'onItemActivated',
    value: function onItemActivated(item) {}
    // Override me


    /**
     * @param {(function({input:string, content:string}):boolean)=} fnFilter
     * @return {void}
     */

  }, {
    key: 'filterListItems',
    value: function filterListItems(fnFilter) {
      if (!this.filterItems) {
        return;
      }
      var input = this.textfield.input.value;
      var current = this.list.element.querySelector('.mdw-list__item[mdw-selected]');
      var items = this.list.element.querySelectorAll('.mdw-list__item');
      var hasItem = false;
      for (var i = 0; i < items.length; i += 1) {
        var item = items[i];
        var content = this.itemTextParser(item);
        var fn = fnFilter || this.filter;
        if (fn({ input: input, content: content })) {
          hasItem = true;
          item.removeAttribute('hidden');
        } else {
          item.setAttribute('hidden', '');
        }
      }
      if (current && current.hasAttribute('hidden')) {
        var newSelection = selectSibling(this.list.element);
        if (newSelection) {
          this.onItemSelected(newSelection);
        }
      }
      if (!hasItem) {
        this.hideDropDown();
      }
    }

    /**
     * @param {KeyboardEvent} event
     * @return {void}
     */

  }, {
    key: 'onTextFieldKeydownEvent',
    value: function onTextFieldKeydownEvent(event) {
      if (event.defaultPrevented) {
        return;
      }
      if (event.ctrlKey || event.altKey) {
        return;
      }
      switch (event.key) {
        case 'ArrowUp':
          {
            if (this.isDropDownShown()) {
              var sibling = selectSibling(this.list.element, true);
              if (sibling) {
                scrollItemIntoView(sibling);
                this.onItemSelected(sibling);
              }
            }
            event.stopPropagation();
            event.preventDefault();
            break;
          }
        case 'ArrowDown':
          {
            if (this.isDropDownShown()) {
              var _sibling = selectSibling(this.list.element, false);
              if (_sibling) {
                scrollItemIntoView(_sibling);
                this.onItemSelected(_sibling);
              }
            }
            event.stopPropagation();
            event.preventDefault();
            break;
          }
        case 'Escape':
          {
            if (this.hideDropDown()) {
              this.suggestedInput = this.previousValue;
              this.textfield.input.value = this.previousValue;
              this.textfield.updateInputEmptyState();
              event.stopPropagation();
              event.preventDefault();
            }
            break;
          }
        case 'Enter':
          {
            var current = this.list.element.querySelector('.mdw-list__item[mdw-selected]');
            if (current) {
              if (this.hideDropDown()) {
                var inputValue = this.textfield.input.value || '';
                this.textfield.input.setSelectionRange(inputValue.length, inputValue.length);
                this.onItemActivated(current);
                event.stopPropagation();
                event.preventDefault();
              }
            }
            break;
          }
        case 'Tab':
          {
            var _current = this.list.element.querySelector('.mdw-list__item[mdw-selected]');
            if (_current) {
              if (this.hideDropDown()) {
                var _inputValue = this.textfield.input.value || '';
                this.textfield.input.setSelectionRange(_inputValue.length, _inputValue.length);
                this.onItemActivated(_current);
                event.stopPropagation();
              }
            }
            break;
          }
        default:
      }
    }
  }]);

  return Search;
}();

exports.Search = Search;

/***/ }),

/***/ 393:
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(394);
module.exports = __webpack_require__(395);


/***/ }),

/***/ 394:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _index = __webpack_require__(43);

var _index2 = __webpack_require__(44);

var _index3 = __webpack_require__(100);

var componentMap = new WeakMap();
/** @return {void} */
function buildCustomSearch1() {
  var textfield = componentMap.get(document.getElementById('search-textfield-custom1'));
  var list = componentMap.get(document.getElementById('search-list-custom1'));
  var busyIndicator = textfield.element.querySelector('.custom-busy-indicator');
  var resultsCache = void 0;
  var listUpdated = false;
  var customPerformSearch = function customPerformSearch() {
    if (listUpdated) {
      return Promise.resolve();
    }
    if (resultsCache != null) {
      return Promise.resolve(resultsCache);
    }
    return new Promise(function (resolve) {
      busyIndicator.style.setProperty('display', '');
      var myData = [];
      for (var key in window.navigator) {
        myData.push({ line1: key, line2: navigator[key] });
      }
      setTimeout(function () {
        resultsCache = myData;
        resolve(myData);
      }, 2000);
    });
  };
  var customUpdateList = function customUpdateList(items) {
    if (listUpdated) {
      return Promise.resolve();
    }
    return new Promise(function (resolve) {
      list.clear(componentMap);
      busyIndicator.style.setProperty('display', 'none');
      var markup = '\n      <div class="mdw-list__text">\n        <div class="mdw-list__text-line"></div>\n        <div class="mdw-list__text-line"></div>\n      </div>\n      '.trim();
      items.forEach(function (item) {
        var listItem = document.createElement('li');
        listItem.classList.add('mdw-list__item');
        listItem.innerHTML = markup;
        var lines = listItem.querySelectorAll('.mdw-list__text-line');
        lines[0].textContent = item.line1;
        lines[1].textContent = item.line2;
        componentMap.set(listItem, new _index.ListItem(listItem));
        list.element.appendChild(listItem);
      });
      listUpdated = true;
      resolve();
    });
  };

  var searchDocsCustom = new _index3.Search({
    textfield: textfield,
    list: list,
    searchOnFocus: false,
    dropdown: true,
    textFilter: 'startsWith',
    suggestionMethod: 'append',
    performSearch: customPerformSearch,
    updateList: customUpdateList
  });
}

/** @return {void} */
function buildCustomSearch2() {
  /**
   * @param {HTMLElement} element
   * @return {Promise}
   */
  function hideElement(element) {
    return new Promise(function (resolve) {
      element.style.setProperty('display', 'none');
      resolve();
    });
  }
  /**
   * @param {HTMLElement} element
   * @return {Promise}
   */
  function showElement(element) {
    return new Promise(function (resolve) {
      element.style.setProperty('display', '');
      resolve();
    });
  }
  var textfield = componentMap.get(document.getElementById('search-textfield-custom2'));
  var list = componentMap.get(document.getElementById('search-list-custom2'));
  var busyIndicator = textfield.element.querySelector('.custom-busy-indicator');
  var noResultsIndicator = textfield.element.querySelector('.custom-no-results-indicator');
  var customPerformSearch = function customPerformSearch(searchTerm) {
    /**
     * @return {Promise}
     */
    function clearList() {
      return new Promise(function (resolve) {
        list.clear(componentMap);
        resolve();
      });
    }
    /**
     * @param {string} searchTerm
     * @return {Promise}
     */
    function performSearch(searchTerm) {
      return new Promise(function (resolve) {
        var myData = [];
        for (var key in window.navigator) {
          var value = navigator[key] && navigator[key].toString();
          if (key.indexOf(searchTerm) !== -1 || value && value.indexOf(searchTerm) !== -1) {
            myData.push({ line1: key, line2: navigator[key] });
          }
        }
        setTimeout(function () {
          resolve(myData);
        }, 1000);
      });
    }
    return clearList().then(function () {
      return showElement(busyIndicator);
    }).then(function () {
      return hideElement(noResultsIndicator);
    }).then(function () {
      return performSearch(searchTerm);
    }).catch(function (error) {
      console.error(error);
    });
  };
  var customUpdateList = function customUpdateList(items) {
    return hideElement(busyIndicator).then(function () {
      if (!items.length) {
        return showElement(noResultsIndicator);
      }
      var markup = '\n      <div class="mdw-list__text">\n        <div class="mdw-list__text-line"></div>\n        <div class="mdw-list__text-line"></div>\n      </div>\n      '.trim();
      items.forEach(function (item) {
        var listItem = document.createElement('li');
        listItem.classList.add('mdw-list__item');
        listItem.innerHTML = markup;
        var lines = listItem.querySelectorAll('.mdw-list__text-line');
        lines[0].textContent = item.line1;
        lines[1].textContent = item.line2;
        componentMap.set(listItem, new _index.ListItem(listItem));
        list.element.appendChild(listItem);
      });
      return Promise.resolve();
    });
  };
  var searchDocsCustom = new _index3.Search({
    textfield: textfield,
    list: list,
    debounce: 300,
    dropdown: true,
    filterItems: false,
    performSearch: customPerformSearch,
    updateList: customUpdateList
  });
}

/** @return {void} */
function setupSearches() {
  var searchDocsSimple = new _index3.Search({
    textfield: componentMap.get(document.getElementById('search-textfield-simple')),
    list: componentMap.get(document.getElementById('search-list-simple'))
  });
  var searchDocsMultiline = new _index3.Search({
    textfield: componentMap.get(document.getElementById('search-textfield-multiline')),
    list: componentMap.get(document.getElementById('search-list-multiline')),
    suggestionMethod: 'none'
  });

  buildCustomSearch1();
  buildCustomSearch2();
}

/** @return {void} */
function initializeMdwComponents() {
  var components = void 0;

  components = document.querySelectorAll('.js .mdw-textfield');
  for (var i = 0; i < components.length; i += 1) {
    componentMap.set(components[i], new _index2.TextField(components[i]));
  }

  components = document.querySelectorAll('.js .mdw-list');
  for (var _i = 0; _i < components.length; _i += 1) {
    componentMap.set(components[_i], new _index.List(components[_i]));
  }

  components = document.querySelectorAll('.js .mdw-list__item');
  for (var _i2 = 0; _i2 < components.length; _i2 += 1) {
    componentMap.set(components[_i2], new _index.ListItem(components[_i2]));
  }
}

initializeMdwComponents();
setupSearches();

/***/ }),

/***/ 395:
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 43:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var List = function () {
  /**
   * @param {Element} element
   */
  function List(element) {
    _classCallCheck(this, List);

    this.element = element;
  }

  _createClass(List, [{
    key: 'detach',
    value: function detach() {
      this.element = null;
    }

    /**
     * Clear and detach all children
     * @param {WeakMap=} elementMap
     * @return {void}
     */

  }, {
    key: 'clear',
    value: function clear(elementMap) {
      var el = this.element;
      if (!el) {
        return;
      }
      while (el.firstChild) {
        if (elementMap && elementMap.has(el.firstChild)) {
          elementMap.get(el.firstChild).detach();
          elementMap.delete(el.firstChild);
        }
        el.removeChild(el.firstChild);
      }
    }
  }]);

  return List;
}();

var ListItem = function () {
  /**
   * @param {Element} element
   */
  function ListItem(element) {
    var _this = this;

    _classCallCheck(this, ListItem);

    this.element = element;
    var rippleElements = element.getElementsByClassName('mdw-ripple');
    this.ripple = rippleElements && rippleElements[0];
    if (!this.ripple) {
      var ripple = document.createElement('div');
      ripple.classList.add('mdw-ripple');
      this.element.insertBefore(ripple, this.element.firstChild);
      this.ripple = ripple;
    }
    var innerRippleElements = this.ripple.getElementsByClassName('mdw-ripple__inner');
    this.rippleInner = innerRippleElements && innerRippleElements[0];
    if (!this.rippleInner) {
      var rippleInner = document.createElement('div');
      rippleInner.classList.add('mdw-ripple__inner');
      this.ripple.appendChild(rippleInner);
      this.rippleInner = rippleInner;
    }
    this.element.setAttribute('mdw-ripple', '');
    this.element.addEventListener('click', function (event) {
      _this.updateRipplePosition(event);
    });
  }

  /**
   * @param {MouseEvent|PointerEvent} event
   * @return {void}
   */


  _createClass(ListItem, [{
    key: 'updateRipplePosition',
    value: function updateRipplePosition(event) {
      if (event.target !== this.element && event.target !== this.ripple) {
        return;
      }
      if (!event.pointerType && !event.detail) {
        // Ripple from center
        this.rippleInner.style.removeProperty('left');
        this.rippleInner.style.removeProperty('top');
        return;
      }
      var x = event.offsetX;
      var y = event.offsetY;
      this.rippleInner.style.setProperty('left', x + 'px');
      this.rippleInner.style.setProperty('top', y + 'px');
    }

    /**
     * Destroys all HTML Element references for garbage collection
     * @return {void}
     */

  }, {
    key: 'detach',
    value: function detach() {
      this.ripple = null;
      this.element = null;
    }
  }]);

  return ListItem;
}();

exports.List = List;
exports.ListItem = ListItem;

/***/ }),

/***/ 44:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextField = function () {
  /**
   * @param {HTMLElement} element
   */
  function TextField(element) {
    var _this = this;

    _classCallCheck(this, TextField);

    this.element = element;
    /** @type {HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement} */
    this.input = element.querySelector('.mdw-textfield__input');
    if (this.input) {
      if (this.input instanceof HTMLTextAreaElement && this.element.hasAttribute('mdw-multiline')) {
        this.input.addEventListener('input', function () {
          _this.updateTextAreaSize();
        });
        this.updateTextAreaSize();
      }
      this.input.addEventListener('input', function () {
        _this.updateInputEmptyState();
      });
      this.updateInputEmptyState();
    }
    this.border = element.querySelector('.mdw-textfield__border-line');
    if (!this.border) {
      var border = document.createElement('div');
      border.classList.add('mdw-textfield__border-line');
      element.appendChild(border);
      this.border = border;
    }
    var rippleElements = this.border.getElementsByClassName('mdw-ripple');
    this.ripple = rippleElements && rippleElements[0];
    if (!this.ripple) {
      var ripple = document.createElement('div');
      ripple.classList.add('mdw-ripple');
      this.border.appendChild(ripple);
      this.ripple = ripple;
    }
    var innerRippleElements = this.ripple.getElementsByClassName('mdw-ripple__inner');
    this.rippleInner = innerRippleElements && innerRippleElements[0];
    if (!this.rippleInner) {
      var rippleInner = document.createElement('div');
      rippleInner.classList.add('mdw-ripple__inner');
      this.ripple.appendChild(rippleInner);
      this.rippleInner = rippleInner;
    }
    this.element.setAttribute('mdw-ripple', '');
    this.border.addEventListener('click', function (event) {
      _this.updateRipplePosition(event);
    });
  }

  /** @return {void} */


  _createClass(TextField, [{
    key: 'updateInputEmptyState',
    value: function updateInputEmptyState() {
      var attributeName = 'mdw-value-empty';
      if (this.input.value) {
        if (this.element.hasAttribute(attributeName)) {
          this.element.removeAttribute(attributeName);
        }
      } else if (!this.element.hasAttribute(attributeName)) {
        this.element.setAttribute('mdw-value-empty', '');
      }
    }

    /** @return {number} Single row height */

  }, {
    key: 'updateTextAreaSize',
    value: function updateTextAreaSize() {
      var previousRowsValue = this.input.getAttribute('rows');
      this.input.setAttribute('rows', '1');

      var _window$getComputedSt = window.getComputedStyle(this.input),
          height = _window$getComputedSt.height,
          paddingTop = _window$getComputedSt.paddingTop;

      if (height === 'auto') {
        this.input.setAttribute('rows', previousRowsValue);
        return -1;
      }
      var heightPx = parseInt(height.replace('px', ''), 10);
      var paddingTopPx = parseInt(paddingTop.replace('px', ''), 10);
      this.input.setAttribute('rows', Math.floor((this.input.scrollHeight - paddingTopPx) / heightPx).toString());
      return heightPx;
    }

    /**
     * @param {MouseEvent|PointerEvent} event
     * @return {void}
     */

  }, {
    key: 'updateRipplePosition',
    value: function updateRipplePosition(event) {
      if (event.target !== this.border && event.target !== this.ripple) {
        return;
      }
      if (!event.pointerType && !event.detail) {
        // Ripple from center
        this.rippleInner.style.removeProperty('left');
        this.rippleInner.style.removeProperty('top');
        return;
      }
      var x = event.offsetX;
      var y = event.offsetY;
      this.rippleInner.style.setProperty('left', x + 'px');
      this.rippleInner.style.setProperty('top', y + 'px');
    }

    /**
     * @return {string|Date|number}
     */

  }, {
    key: 'value',
    get: function get() {
      if (this.input instanceof HTMLTextAreaElement || this.input instanceof HTMLSelectElement) {
        return this.value;
      }
      var type = this.input.hasAttribute('type') && this.input.getAttribute('type').toLowerCase();
      switch (type) {
        case 'number':
        case 'range':
          return this.input.valueAsNumber;
        case 'date':
        case 'datetime-local':
        case 'time':
          if (this.input.value == null) {
            return null;
          }
          return new Date(this.input.valueAsDate.getTimezoneOffset() * 60 * 1000 + this.input.valueAsNumber);
        default:
          return this.input.value;
      }
    }

    /** @param {(string|Date|number)=} value */
    ,
    set: function set(value) {
      if (value == null) {
        this.input.value = null;
      } else if (this.input instanceof HTMLTextAreaElement || this.input instanceof HTMLSelectElement) {
        if (value instanceof Date) {
          this.input.value = value.toString();
        } else if (typeof value === 'string') {
          this.input.value = value;
        } else {
          this.input.value = value.toString(10);
        }
      } else if (value instanceof Date) {
        var type = this.input.hasAttribute('type') && this.input.getAttribute('type').toLowerCase();
        if (type === 'time') {
          var hoursStr = '' + (value.getHours() < 10 ? '0' : '') + value.getHours();
          var minutesStr = '' + (value.getMinutes() < 10 ? '0' : '') + value.getMinutes();
          var secondsStr = '' + (value.getSeconds() < 10 ? '0' : '') + value.getSeconds();
          this.input.value = hoursStr + ':' + minutesStr + ':' + secondsStr + '.' + value.getMilliseconds();
        } else {
          switch (type) {
            case 'date':
            case 'datetime-local':
              this.input.valueAsDate = value;
              break;
            case 'number':
            case 'range':
              this.input.valueAsNumber = value.getTime();
              break;
            default:
              this.input.value = value.toString();
          }
        }
      } else if (typeof value === 'string') {
        this.input.value = value;
      } else {
        var _type = this.input.hasAttribute('type') && this.input.getAttribute('type').toLowerCase();
        switch (_type) {
          case 'date':
          case 'time':
          case 'datetime-local':
          case 'number':
          case 'range':
            this.input.valueAsNumber = value;
            break;
          default:
            this.input.value = value.toString();
        }
      }
      this.updateInputEmptyState();
      this.updateTextAreaSize();
    }
  }]);

  return TextField;
}();

exports.TextField = TextField;

/***/ })

/******/ });