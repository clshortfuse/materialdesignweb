/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 399);
/******/ })
/************************************************************************/
/******/ ({

/***/ 100:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Search = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = __webpack_require__(45);

var _index2 = __webpack_require__(44);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @param {Object} options
 * @param {string} options.input
 * @param {string} options.content
 * @return {boolean}
 */
function containsTextFilter(options) {
  return options.content.trim().toLocaleLowerCase().indexOf(options.input.trim().toLocaleLowerCase()) !== -1;
}

/**
 * @param {Object} options
 * @param {string} options.input
 * @param {string} options.content
 * @return {boolean}
 */
function startsWithTextFilter(options) {
  return options.content.trim().toLocaleLowerCase().indexOf(options.input.trim().toLocaleLowerCase()) === 0;
}

/**
 * @param {HTMLElement} item
 * @return {string}
 */
function defaultItemTextParser(item) {
  /**
   * @param {Node} node
   * @return {string}
   */
  function getTextNodeOnly(node) {
    var text = '';
    for (var i = 0; i < node.childNodes.length; i += 1) {
      var childNode = node.childNodes[i];
      if (childNode.nodeType === Node.TEXT_NODE) {
        text += childNode.textContent;
      }
    }
    return text;
  }
  if (item.hasAttribute('data-mdw-search-text')) {
    return item.getAttribute('data-mdw-search-text');
  }
  var textElement = item.querySelector('.mdw-list__text .mdw-list__text-line');
  if (!textElement) {
    textElement = item.querySelector('.mdw-list__text');
  }
  if (!textElement) {
    textElement = item.querySelector('.mdw-list__text');
  }
  if (textElement) {
    return getTextNodeOnly(textElement);
  }
  return getTextNodeOnly(item);
}

/**
 * @param {Element} list
 * @param {boolean=} backwards
 * @return {Element} sibling
 */
function selectSibling(list, backwards) {
  var current = list.querySelector('.mdw-list__item[mdw-selected]');
  var items = list.querySelectorAll('.mdw-list__item:not([hidden]):not([disabled])');
  var sibling = void 0;
  if (current && !current.hasAttribute('hidden')) {
    for (var i = 0; i < items.length; i += 1) {
      var item = items[i];
      if (item === current) {
        if (backwards) {
          sibling = items[i - 1];
        } else {
          sibling = items[i + 1];
        }
        break;
      }
    }
  } else if (backwards) {
    sibling = items[items.length - 1];
  } else {
    sibling = items[0];
  }
  if (sibling && sibling !== current) {
    if (current) {
      current.removeAttribute('mdw-selected');
    }
    sibling.setAttribute('mdw-selected', '');
    return sibling;
  }
  return null;
}

/**
 * @param {HTMLElement} listItem
 * @return {void}
 */
function scrollItemIntoView(listItem) {
  /**
   * @param {HTMLElement} el
   * @return {number}
   */
  function getElementVisibility(el) {
    var rect = el.getBoundingClientRect();
    var _rect = rect,
        top = _rect.top,
        height = _rect.height;

    var next = el.parentElement;
    do {
      rect = next.getBoundingClientRect();
      if (top + height > rect.bottom) {
        // bottom clipped
        return 1;
      }
      if (top < rect.top) {
        // top clipped
        return -1;
      }
      next = next.parentElement;
    } while (next !== document.body);
    if (top < 0) {
      return -1;
    } else if (top + height > document.documentElement.clientHeight) {
      return 1;
    }
    return 0;
  }
  var visibility = getElementVisibility(listItem);
  if (visibility < 0) {
    listItem.scrollIntoView({ behavior: 'smooth', block: 'center', inline: 'center' });
  } else if (visibility > 0) {
    listItem.scrollIntoView({ behavior: 'smooth', block: 'center', inline: 'center' });
  }
}

var Search = function () {
  /**
   * @param {Object} options
   * @param {TextField} options.textfield
   * @param {List} options.list
   * @param {('contains'|'startsWith'|function({input:string, content:string}):boolean)=} [options.textFilter='contains']
   * @param {(function(HTMLElement):string)=} options.itemTextParser
   * @param {boolean=} [options.dropdown=false]
   * @param {boolean=} [options.filterItems=true]
   * @param {('replace'|'append'|'none')} [options.suggestionMethod='replace']
   * @param {(function(HTMLElement))=} options.onItemActivated
   * @param {(function(string):Promise)=} options.performSearch
   * @param {(function(any):Promise)=} options.updateList
   * @param {boolean=} [options.searchOnFocus=true]
   * @param {number=} options.debounce Debounce time in milliseconds
   */
  function Search(options) {
    var _this = this;

    _classCallCheck(this, Search);

    this.textfield = options.textfield;
    this.list = options.list;
    if (typeof options.textFilter === 'function') {
      this.filter = options.textFilter;
    } else if (options.textFilter === 'startsWith') {
      this.filter = startsWithTextFilter;
    } else {
      this.filter = containsTextFilter;
    }
    this.itemTextParser = defaultItemTextParser || options.itemTextParser;

    this.list.element.addEventListener('click', function (event) {
      _this.handleClickEvent(event);
    });
    this.textfield.input.addEventListener('keydown', function (event) {
      _this.onTextFieldKeydownEvent(event);
    });
    this.textfield.input.addEventListener('input', function (event) {
      if (_this.handleInputEvent) {
        _this.handleInputEvent(event);
      }
    });
    this.textfield.input.addEventListener('blur', function (event) {
      if (_this.handleBlurEvent) {
        _this.handleBlurEvent(event);
      }
    });
    this.textfield.input.addEventListener('focus', function (event) {
      if (_this.searchOnFocus) {
        _this.handleInputEvent(event);
      }
    });

    this.dropdown = options.dropdown;
    if (options.filterItems !== false) {
      this.filterItems = true;
    }
    if (options.searchOnFocus !== false) {
      this.searchOnFocus = true;
    }
    this.debounce = options.debounce;
    this.suggestionMethod = options.suggestionMethod || 'replace';
    this.currentSearchTerm = this.textfield.input.value || '';
    /** @type {string} */
    this.suggestedInput = null;
    /** @type {string} */
    this.previousValue = null;
    if (options.onItemActivated) {
      this.onItemActivated = options.onItemActivated;
    }
    this.performSearch = options.performSearch || function () {
      return Promise.resolve();
    };
    this.updateList = options.updateList || function () {
      return Promise.resolve();
    };
  }

  /**
   * @param {MouseEvent} event
   * @return {void}
   */


  _createClass(Search, [{
    key: 'handleClickEvent',
    value: function handleClickEvent(event) {
      if (!event.target) {
        return;
      }
      if (!event.target.classList) {
        return;
      }
      if (!event.target.classList.contains('mdw-list__item')) {
        return;
      }
      this.onItemActivated(event.target);
    }

    /**
     * Default input handler
     * @param {Event|InputEvent} event
     * @return {void}
     */

  }, {
    key: 'handleInputEvent',
    value: function handleInputEvent(event) {
      var _this2 = this;

      if (document.activeElement !== this.textfield.input) {
        return;
      }
      this.showDropDown();
      var inputValue = this.textfield.input.value || '';
      if (inputValue === this.suggestedInput) {
        return;
      }
      if (inputValue === this.previousValue) {
        return;
      }
      this.previousValue = inputValue;
      this.currentSearchTerm = inputValue;
      var results = null;
      Promise.resolve().then(function () {
        return _this2.performDebounce(inputValue);
      }).then(function () {
        return _this2.checkExpired(inputValue);
      }).then(function () {
        return _this2.performSearch(inputValue);
      }).then(function (searchResults) {
        results = searchResults;
      }).then(function () {
        return _this2.checkExpired(inputValue);
      }).then(function () {
        return _this2.updateList(results);
      }).then(function () {
        return _this2.filterListItems();
      }).catch(function (error) {
        if (error.message === 'debounced') {
          return;
        }
        if (error.message === 'expired') {
          return;
        }
        throw error;
      });
    }
  }, {
    key: 'checkExpired',
    value: function checkExpired(inputValue) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        if (inputValue === _this3.currentSearchTerm) {
          resolve();
        } else {
          reject(new Error('expired'));
        }
      });
    }

    /**
     * @param {string} searchTerm
     * @return {Promise}
     */

  }, {
    key: 'performDebounce',
    value: function performDebounce(searchTerm) {
      var _this4 = this;

      if (!this.debounce) {
        return Promise.resolve();
      }
      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          if (searchTerm !== _this4.currentSearchTerm) {
            reject(new Error('debounced'));
            return;
          }
          resolve();
        }, _this4.debounce);
      });
    }

    /** @return {boolean} handled */

  }, {
    key: 'showDropDown',
    value: function showDropDown() {
      if (!this.dropdown) {
        return false;
      }
      var dropDownElement = this.textfield.element.querySelector('.mdw-textfield__dropdown');
      var changed = false;
      if (dropDownElement.hasAttribute('mdw-hide')) {
        dropDownElement.removeAttribute('mdw-hide');
        changed = true;
      }
      if (!dropDownElement.hasAttribute('mdw-show')) {
        dropDownElement.setAttribute('mdw-show', '');
        changed = true;
      }
      return changed;
    }

    /** @return {boolean} handled */

  }, {
    key: 'isDropDownShown',
    value: function isDropDownShown() {
      if (!this.dropdown) {
        return true;
      }
      var dropDownElement = this.textfield.element.querySelector('.mdw-textfield__dropdown');
      if (dropDownElement.hasAttribute('mdw-hide')) {
        return false;
      }
      if (this.textfield.input === document.activeElement) {
        return true;
      }
      if (dropDownElement.hasAttribute('mdw-show')) {
        return true;
      }
      return false;
    }

    /** @return {boolean} handled */

  }, {
    key: 'hideDropDown',
    value: function hideDropDown() {
      if (!this.dropdown) {
        return true;
      }
      var dropDownElement = this.textfield.element.querySelector('.mdw-textfield__dropdown');
      if (!dropDownElement.hasAttribute('mdw-hide')) {
        dropDownElement.setAttribute('mdw-hide', '');
        return true;
      }
      return false;
    }

    /**
     * @param {Event|FocusEvent} event
     * @return {void}
     */

  }, {
    key: 'handleBlurEvent',
    value: function handleBlurEvent(event) {
      if (this.dropdown) {
        var dropDownElement = this.textfield.element.querySelector('.mdw-textfield__dropdown');
        if (dropDownElement.hasAttribute('mdw-show')) {
          dropDownElement.removeAttribute('mdw-show');
        }
      }
    }

    /**
     * @param {HTMLElement} item
     * @return {void}
     */

  }, {
    key: 'onItemSelected',
    value: function onItemSelected(item) {
      if (this.suggestionMethod === 'none') {
        return;
      }
      var suggestion = this.itemTextParser(item);
      if (suggestion) {
        suggestion = suggestion.trim();
      }
      if (!suggestion) {
        return;
      }
      this.suggestedInput = suggestion;
      if (this.suggestionMethod === 'replace') {
        this.textfield.input.value = suggestion;
      } else if (this.suggestionMethod === 'append') {
        var selectionStart = (this.previousValue || '').length;
        var selectionEnd = suggestion.length;
        this.textfield.input.value = suggestion;
        this.textfield.input.setSelectionRange(selectionStart, selectionEnd);
      }
      this.textfield.updateInputEmptyState();
    }

    /**
     * @param {HTMLElement} item
     * @return {void}
     */

  }, {
    key: 'onItemActivated',
    value: function onItemActivated(item) {}
    // Override me


    /**
     * @param {(function({input:string, content:string}):boolean)=} fnFilter
     * @return {void}
     */

  }, {
    key: 'filterListItems',
    value: function filterListItems(fnFilter) {
      if (!this.filterItems) {
        return;
      }
      var input = this.textfield.input.value;
      var current = this.list.element.querySelector('.mdw-list__item[mdw-selected]');
      var items = this.list.element.querySelectorAll('.mdw-list__item');
      var hasItem = false;
      for (var i = 0; i < items.length; i += 1) {
        var item = items[i];
        var content = this.itemTextParser(item);
        var fn = fnFilter || this.filter;
        if (fn({ input: input, content: content })) {
          hasItem = true;
          item.removeAttribute('hidden');
        } else {
          item.setAttribute('hidden', '');
        }
      }
      if (current && current.hasAttribute('hidden')) {
        var newSelection = selectSibling(this.list.element);
        if (newSelection) {
          this.onItemSelected(newSelection);
        }
      }
      if (!hasItem) {
        this.hideDropDown();
      }
    }

    /**
     * @param {KeyboardEvent} event
     * @return {void}
     */

  }, {
    key: 'onTextFieldKeydownEvent',
    value: function onTextFieldKeydownEvent(event) {
      if (event.defaultPrevented) {
        return;
      }
      if (event.ctrlKey || event.altKey) {
        return;
      }
      switch (event.key) {
        case 'ArrowUp':
          {
            if (this.isDropDownShown()) {
              var sibling = selectSibling(this.list.element, true);
              if (sibling) {
                scrollItemIntoView(sibling);
                this.onItemSelected(sibling);
              }
            }
            event.stopPropagation();
            event.preventDefault();
            break;
          }
        case 'ArrowDown':
          {
            if (this.isDropDownShown()) {
              var _sibling = selectSibling(this.list.element, false);
              if (_sibling) {
                scrollItemIntoView(_sibling);
                this.onItemSelected(_sibling);
              }
            }
            event.stopPropagation();
            event.preventDefault();
            break;
          }
        case 'Escape':
          {
            if (this.hideDropDown()) {
              this.suggestedInput = this.previousValue;
              this.textfield.input.value = this.previousValue;
              this.textfield.updateInputEmptyState();
              event.stopPropagation();
              event.preventDefault();
            }
            break;
          }
        case 'Enter':
          {
            var current = this.list.element.querySelector('.mdw-list__item[mdw-selected]');
            if (current) {
              if (this.hideDropDown()) {
                var inputValue = this.textfield.input.value || '';
                this.textfield.input.setSelectionRange(inputValue.length, inputValue.length);
                this.onItemActivated(current);
                event.stopPropagation();
                event.preventDefault();
              }
            }
            break;
          }
        case 'Tab':
          {
            var _current = this.list.element.querySelector('.mdw-list__item[mdw-selected]');
            if (_current) {
              if (this.hideDropDown()) {
                var _inputValue = this.textfield.input.value || '';
                this.textfield.input.setSelectionRange(_inputValue.length, _inputValue.length);
                this.onItemActivated(_current);
                event.stopPropagation();
              }
            }
            break;
          }
        default:
      }
    }
  }]);

  return Search;
}();

exports.Search = Search;

/***/ }),

/***/ 136:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Table = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = __webpack_require__(401);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/** @return {HTMLLabelElement} */
function constructTableCheckbox() {
  var checkboxLabel = document.createElement('label');
  checkboxLabel.classList.add('mdw-selection');
  var input = document.createElement('input');
  input.classList.add('mdw-selection__input');
  input.setAttribute('type', 'checkbox');
  var icon = document.createElement('div');
  icon.classList.add('mdw-selection__icon');
  checkboxLabel.appendChild(input);
  checkboxLabel.appendChild(icon);
  return checkboxLabel;
}

var TableColumn = function () {
  /**
   * @param {Object} options Text or options
   * @param {string} options.key
   * @param {(string|DocumentFragment)=} options.name
   * @param {string=} options.type
   * @param {boolean=} options.rowSelector
   * @param {string=} options.tooltip
   * @param {boolean=} options.sortable
   * @param {boolean=} options.primaryColumn
   * @param {HTMLElement=} options.customSortIcon
   * @param {string=} options.innerHTML
   * @param {DocumentFragment=} options.fragment
   * @param {(function(HTMLTableCellElement, any, any=):void)=} options.renderer
   * @param {(function(any):any)=} options.formatter
   */
  function TableColumn(options) {
    _classCallCheck(this, TableColumn);

    this.element = document.createElement('th');
    if (options.innerHTML != null) {
      this.element.innerHTML = options.innerHTML;
    } else if (options.fragment) {
      this.element.appendChild(options.fragment);
    }
    this.key = options.key;
    this.element.dataset.key = options.key;

    if (options.sortable) {
      this.element.setAttribute('mdw-sortable', '');
      var sortIcon = options.customSortIcon;
      if (!sortIcon) {
        sortIcon = document.createElement('div');
        sortIcon.classList.add('mdw-table__sort-icon', 'material-icons');
        sortIcon.textContent = 'arrow_downward';
      }
      if (this.element.hasChildNodes()) {
        this.element.insertBefore(this.element.firstChild, options.customSortIcon);
      } else {
        this.element.appendChild(sortIcon);
      }
    }
    if (options.tooltip) {
      var wrapper = document.createElement('span');
      wrapper.classList.add('mdw-tooltip__wrapper');
      var target = document.createElement('span');
      target.classList.add('mdw-tooltip__target');
      if (!options.name) {
        target.textContent = '';
      } else if (typeof options.name === 'string') {
        target.textContent = options.name;
      } else {
        target.appendChild(options.name);
      }
      var tooltip = document.createElement('div');
      tooltip.classList.add('mdw-tooltip');
      tooltip.textContent = options.tooltip;
      wrapper.appendChild(target);
      wrapper.appendChild(tooltip);
      this.element.appendChild(wrapper);
    } else if (options.name) {
      var node = void 0;
      if (typeof options.name === 'string') {
        node = document.createTextNode(options.name);
      } else {
        node = options.name;
      }
      this.element.appendChild(node);
    }

    if (options.primaryColumn) {
      this.element.setAttribute('mdw-primary-column', '');
    }

    this.rowSelector = options.rowSelector;

    if (this.rowSelector) {
      this.element.setAttribute('mdw-selector', '');
    }
    if (options.type) {
      this.element.dataset.type = options.type;
      this.type = options.type;
    }
    if (this.rowSelector && this.type === 'checkbox') {
      var checkboxLabel = constructTableCheckbox();
      this.element.appendChild(checkboxLabel);
    }

    if (options.renderer) {
      this.renderer = options.renderer;
    } else if (options.type === 'checkbox') {
      this.renderer = TableColumn.defaultCheckboxRenderer;
    } else {
      this.renderer = TableColumn.defaultCellRenderer;
    }
    if (options.formatter) {
      this.formatter = options.formatter;
    } else {
      this.formatter = TableColumn.defaultValueFormatter;
    }
  }

  /**
   * @param {any} value
   * @param {any} object
   * @return {void}
   */


  _createClass(TableColumn, null, [{
    key: 'defaultValueFormatter',
    value: function defaultValueFormatter(value, object) {
      return value;
    }

    /**
     * @param {HTMLTableCellElement} cell
     * @param {any} value
     * @return {void}
     */

  }, {
    key: 'defaultCheckboxRenderer',
    value: function defaultCheckboxRenderer(cell, value) {
      var input = cell.getElementsByTagName('input')[0];
      var checked = !!value;
      if (!input) {
        var checkboxLabel = document.createElement('label');
        checkboxLabel.classList.add('mdw-selection');
        input = document.createElement('input');
        input.classList.add('mdw-selection__input');
        input.setAttribute('type', 'checkbox');
        input.checked = checked;
        var icon = document.createElement('div');
        icon.classList.add('mdw-selection__icon');
        checkboxLabel.appendChild(input);
        checkboxLabel.appendChild(icon);
        cell.appendChild(checkboxLabel);
      }
      if (input.checked !== checked) {
        input.checked = checked;
      }
    }

    /**
     * @param {HTMLTableCellElement} cell
     * @param {any} value
     * @return {void}
     */

  }, {
    key: 'defaultCellRenderer',
    value: function defaultCellRenderer(cell, value) {
      var stringValue = void 0;
      if (value == null) {
        stringValue = '';
      } else {
        stringValue = value.toString();
      }
      var len = cell.childNodes.length;
      var foundTextNode = false;
      for (var i = len - 1; i >= 0; i -= 1) {
        var node = cell.childNodes.item(i);
        if (!foundTextNode && node.nodeType === Node.TEXT_NODE) {
          if (node.nodeValue !== stringValue) {
            node.nodeValue = stringValue;
          }
          foundTextNode = true;
        } else {
          cell.removeChild(node);
        }
      }
      if (!foundTextNode) {
        var _node = document.createTextNode(stringValue);
        cell.appendChild(_node);
      }
    }
  }]);

  return TableColumn;
}();

var Table = function () {
  /**
   * @param {HTMLElement} element
   */
  function Table(element) {
    var _this = this;

    _classCallCheck(this, Table);

    this.element = element;
    this.element.addEventListener('click', function (event) {
      // Use one event listener to reduce overhead and allow dynamic content
      _this.handleClickInteraction(event);
    });
    /** @type {WeakMap<Element,any>} */
    this.elementMap = new WeakMap();
    /** @type {WeakMap<Object, HTMLTableRowElement>} */
    this.rowMap = new WeakMap();
    /** @type {TableColumn[]} */
    this.columns = [];
    this.page = 0;
    this.pageLimit = 0;
    this.debounceTimeMs = 0;
    this.throttleTimeMs = 100;
    this.useLazyRendering = false;
  }

  _createClass(Table, [{
    key: 'detach',
    value: function detach() {
      this.element = null;
    }
  }, {
    key: 'buildScrollListener',
    value: function buildScrollListener() {
      var _this2 = this;

      var throttleTimeout = null;
      var debounceTimeout = null;
      var pending = false;

      /** @return {void} */
      var throttle = function throttle() {
        throttleTimeout = null;
        _this2.performLazyRender();
        if (pending) {
          pending = false;
          throttleTimeout = setTimeout(throttle, _this2.throttleTimeMs);
        }
      };
      this.scrollListener = function () {
        if (debounceTimeout) {
          clearTimeout(debounceTimeout);
          debounceTimeout = null;
        }
        if (throttleTimeout) {
          // Will perform in the future
          pending = true;
          return;
        }
        if (_this2.debounceTimeMs) {
          debounceTimeout = setTimeout(function () {
            throttleTimeout = setTimeout(throttle, _this2.throttleTimeMs);
          }, _this2.debounceTimeMs);
        } else {
          throttleTimeout = setTimeout(throttle, _this2.throttleTimeMs);
        }
      };
      this.element.addEventListener('scroll', this.scrollListener);
    }
  }, {
    key: 'destroyScrollListener',
    value: function destroyScrollListener() {
      if (this.scrollListener) {
        this.element.removeEventListener('scroll', this.scrollListener);
        this.scrollListener = null;
      }
    }

    /**
     * Overridable event fired when value is changed
     * Return truthy value to cancel updating object
     * @param {any} object
     * @param {string} key
     * @param {any} value
     * @return {boolean} cancel
     */

  }, {
    key: 'onValueChanged',
    value: function onValueChanged(object, key, value) {
      return false;
    }

    /**
     * @param {PointerEvent|MouseEvent} event
     * @return {void}
     */

  }, {
    key: 'handleClickInteraction',
    value: function handleClickInteraction(event) {
      /** @type {HTMLElement} */
      var target = event.target;
      if (target instanceof HTMLInputElement) {
        if (target.hasAttribute('type') && target.getAttribute('type') === 'checkbox') {
          event.stopPropagation();
          var _currentCell = this.getTableCell(target);
          if (_currentCell.tagName.toLowerCase() === 'th') {
            this.setCheckOnAllRows(target.checked, _currentCell.cellIndex);
            this.setHasSelection(target.checked);
            return;
          }
          var currentRow = this.getTableRow(target);
          if (this.hasDatasource()) {
            var object = this.getDataForTableRow(currentRow);
            if (this.onValueChanged(object, _currentCell.dataset.key, target.checked)) {
              event.preventDefault();
              return;
            }
            Reflect.set(object, _currentCell.dataset.key, target.checked);
          }
          if (_currentCell.hasAttribute('mdw-selector')) {
            if (target.checked) {
              currentRow.setAttribute('mdw-selected', '');
              this.setHasSelection(true);
            } else {
              currentRow.removeAttribute('mdw-selected');
              var selectedRows = this.getSelectedRows();
              this.setHasSelection(selectedRows.length !== 0);
            }
          }
        }
        return;
      }
      var currentCell = this.getTableCell(target);
      if (currentCell) {
        if (currentCell.tagName.toLowerCase() === 'th' && currentCell.hasAttribute('mdw-sortable')) {
          event.stopPropagation();
          var ascending = true;
          if (!currentCell.hasAttribute('mdw-sorted')) {
            ascending = false;
          } else if (currentCell.getAttribute('mdw-sorted') === 'reverse') {
            ascending = false;
          }
          this.updateSortIcons(currentCell, ascending);
          if (this.updateSortColumn) {
            this.updateSortColumn(currentCell, ascending);
          }
          return;
        }
      }
    }

    /**
     * Overrideable sorting method
     * @param {HTMLTableHeaderCellElement} tableHeaderCell
     * @param {boolean} [ascending=false]
     * @return {void}
     */

  }, {
    key: 'updateSortColumn',
    value: function updateSortColumn(tableHeaderCell, ascending) {
      if (tableHeaderCell.cellIndex === -1) {
        // Header not attached to row!
        return;
      }
      if (this.hasDatasource()) {
        var index = tableHeaderCell.cellIndex;
        var tableColumn = this.columns[index];
        this.datasource.sort(function (a, b) {
          var valueA = a[tableColumn.key];
          var valueB = b[tableColumn.key];
          if (tableColumn.type === 'number') {
            return parseFloat(valueB) - parseFloat(valueA);
          }
          if (tableColumn.type === 'checkbox') {
            return (valueB ? 1 : 0) - (valueA ? 1 : 0);
          }
          return valueA.localeCompare(valueB);
        });
        if (ascending) {
          this.datasource.reverse();
        }
        this.refresh();
        return;
      }
      /** @type {HTMLTableSectionElement} */
      var tbody = this.element.querySelector('tbody');
      var rows = [];
      for (var i = tbody.rows.length - 1; i >= 0; i -= 1) {
        rows.push(tbody.rows.item(i));
        tbody.deleteRow(i);
      }
      rows.sort(function (a, b) {
        var aCell = a.cells.item(tableHeaderCell.cellIndex);
        var bCell = b.cells.item(tableHeaderCell.cellIndex);
        var aText = aCell.textContent;
        var bText = bCell.textContent;
        if (aCell.dataset.type === 'number') {
          return parseFloat(bText) - parseFloat(aText);
        }
        return aText.localeCompare(bText);
      });
      if (ascending) {
        rows.reverse();
      }
      var fragment = document.createDocumentFragment();
      rows.forEach(function (row) {
        fragment.appendChild(row);
      });
      tbody.appendChild(fragment);
    }

    /**
     * @param {HTMLTableHeaderCellElement=} sortedTableHeaderCell null if none
     * @param {boolean=} [ascending=false]
     * @return {void}
     */

  }, {
    key: 'updateSortIcons',
    value: function updateSortIcons(sortedTableHeaderCell, ascending) {
      if (sortedTableHeaderCell) {
        if (ascending) {
          sortedTableHeaderCell.setAttribute('mdw-sorted', 'reverse');
        } else {
          sortedTableHeaderCell.setAttribute('mdw-sorted', '');
        }
      }
      var tableHeaders = this.element.querySelectorAll('th');
      for (var i = 0; i < tableHeaders.length; i += 1) {
        var otherTableHeader = tableHeaders.item(i);
        if (otherTableHeader !== sortedTableHeaderCell) {
          otherTableHeader.removeAttribute('mdw-sorted');
        }
      }
    }

    /** @return {boolean} */

  }, {
    key: 'hasDatasource',
    value: function hasDatasource() {
      return this.datasource != null;
    }

    /**
     * @param {boolean} value
     * @param {number} columnIndex
     * @return {void}
     */

  }, {
    key: 'setCheckOnAllRows',
    value: function setCheckOnAllRows(value, columnIndex) {
      if (this.hasDatasource()) {
        var column = this.columns[columnIndex];
        this.datasource.forEach(function (object) {
          Reflect.set(object, column.key, value);
        });
        this.refresh();
        return;
      }
      var tbody = this.getTableBody();
      var len = tbody.rows.length;
      for (var i = 0; i < len; i += 1) {
        var row = tbody.rows.item(i);
        var cell = row.cells.item(columnIndex);
        var checkbox = cell.getElementsByTagName('input')[0];
        checkbox.checked = value;
        if (value) {
          row.setAttribute('mdw-selected', '');
        } else {
          row.removeAttribute('mdw-selected');
        }
      }
    }

    /**
     * @param {HTMLElement} element
     * @return {HTMLTableRowElement}
     */

  }, {
    key: 'getTableRow',
    value: function getTableRow(element) {
      if (element === this.element) {
        return null;
      }
      if (element instanceof HTMLTableRowElement) {
        return element;
      }
      if (!element.parentElement) {
        return null;
      }
      return this.getTableRow(element.parentElement);
    }

    /**
     * @param {HTMLElement} element
     * @return {HTMLTableCellElement}
     */

  }, {
    key: 'getTableCell',
    value: function getTableCell(element) {
      if (element === this.element) {
        return null;
      }
      if (element instanceof HTMLTableCellElement) {
        return element;
      }
      if (!element.parentElement) {
        return null;
      }
      return this.getTableCell(element.parentElement);
    }

    /** @return {HTMLTableRowElement[]} */

  }, {
    key: 'getSelectedRows',
    value: function getSelectedRows() {
      if (this.hasDatasource()) {
        var selectorColumn = this.columns.find(function (column) {
          return column.rowSelector;
        });
        if (!selectorColumn) {
          return [];
        }
        return this.getDatasource().filter(function (row) {
          return Reflect.get(row, selectorColumn.key);
        });
      }
      var checkboxes = this.element.querySelectorAll('td[mdw-selector] input[type=checkbox]');
      var checkedRows = [];
      for (var i = 0; i < checkboxes.length; i += 1) {
        /** @type {HTMLInputElement} */
        var checkbox = checkboxes.item(i);
        if (checkbox.checked) {
          var row = this.getTableRow(checkbox);
          if (row) {
            checkedRows.push(row);
          }
        }
      }
      return checkedRows;
    }

    /**
     * @param {boolean} value
     * @return {void}
     */

  }, {
    key: 'setHasSelection',
    value: function setHasSelection(value) {
      if (value) {
        this.element.setAttribute('mdw-has-selection', '');
        return;
      }
      this.element.removeAttribute('mdw-has-selection');
    }

    /**
     * @param {Object[]} datasource Object array
     * @param {boolean=} [horizontal=false]
     * @return {void}
     */

  }, {
    key: 'setDatasource',
    value: function setDatasource(datasource, horizontal) {
      this.datasource = datasource;
      this.horizontalDatasource = !!horizontal;
    }

    /**
     * Toggle lazy rending for datasources
     * @param {boolean} value
     * @return {void}
     */

  }, {
    key: 'setUseLazyRendering',
    value: function setUseLazyRendering(value) {
      if (!this.hasDatasource()) {
        return;
      }
      this.useLazyRendering = value;
      if (value) {
        this.buildScrollListener();
      } else {
        this.destroyScrollListener();
      }
    }

    /**
     * @param {Object} options Text or options
     * @param {string} options.key
     * @param {(string|DocumentFragment)=} options.name
     * @param {boolean=} options.rowSelector
     * @param {string=} options.type
     * @param {boolean=} options.checkbox
     * @param {string=} options.tooltip
     * @param {boolean=} options.sortable
     * @param {boolean=} options.primaryColumn
     * @param {HTMLElement=} options.customSortIcon
     * @param {string=} options.innerHTML
     * @param {DocumentFragment=} options.fragment
     * @param {(function(HTMLTableCellElement, any, any=):void)=} options.renderer
     * @param {(function(any):any)=} options.formatter
     * @return {TableColumn}
     */

  }, {
    key: 'addColumn',
    value: function addColumn(options) {
      var tableColumn = new TableColumn(options);
      var headerRow = this.getHeaderRow();
      headerRow.appendChild(tableColumn.element);
      this.columns.push(tableColumn);
      return tableColumn;
    }
  }, {
    key: 'updatePaginator',
    value: function updatePaginator() {
      if (!this.pageLimit) {
        return;
      }
      var min = this.page * this.pageLimit;
      var total = this.getDatasource().length;
      var max = this.pageLimit + min;
      if (max > total) {
        max = total;
      }
      this.paginationDetailsElement.textContent = min + 1 + '-' + max + ' of ' + total;
      if (min === 0) {
        this.previousPageButton.setAttribute('disabled', '');
      } else {
        this.previousPageButton.removeAttribute('disabled');
      }
      if (max === total) {
        this.nextPageButton.setAttribute('disabled', '');
      } else {
        this.nextPageButton.removeAttribute('disabled');
      }
    }

    /**
     * @param {Object} options
     * @param {boolean=} [options.disabled=false]
     * @param {number=} [options.limit=10]
     * @param {number[]=} [options.limits=[10,25,50,100]]
     * @return {void}
     */

  }, {
    key: 'setPagination',
    value: function setPagination() {
      var _this3 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var footer = this.getFooter(!options.disabled);
      if (options.disabled) {
        this.pageLimit = 0;
        this.page = 0;
        if (footer) {
          footer.style.display = 'none';
        }
        this.needsDraw = true;
        return;
      }
      footer.style.display = '';
      var optionsElement = footer.getElementsByClassName('mdw-table__footer-options')[0];
      if (!optionsElement) {
        optionsElement = document.createElement('div');
        optionsElement.classList.add('mdw-table__footer-options');
        var rowsPerPageText = document.createElement('span');
        rowsPerPageText.textContent = 'Rows per page';
        var limits = options.limits || [10, 25, 50, 100];
        var limitsElement = document.createElement('label');
        limitsElement.classList.add('mdw-textfield');
        limitsElement.setAttribute('mdw-solo', '');
        var select = document.createElement('select');
        select.classList.add('mdw-textfield__input');
        limits.forEach(function (limit) {
          var option = document.createElement('option');
          option.value = limit.toString();
          option.textContent = limit.toString();
          select.appendChild(option);
        });
        select.setAttribute('value', options.limit && options.limit.toString() || '10');
        var dropdownIcon = document.createElement('div');
        dropdownIcon.classList.add('mdw-textfield__dropdown-button');
        limitsElement.appendChild(select);
        limitsElement.appendChild(dropdownIcon);
        optionsElement.appendChild(rowsPerPageText);
        optionsElement.appendChild(limitsElement);
        footer.appendChild(optionsElement);
        select.addEventListener('input', function () {
          _this3.pageLimit = parseInt(select.value, 10);
          _this3.updateRowCount(false);
          _this3.updatePaginator();
          _this3.refreshRows();
        });
      }
      if (!this.paginationDetailsElement) {
        this.paginationDetailsElement = footer.getElementsByClassName('mdw-table__footer-details')[0];
      }
      if (!this.paginationDetailsElement) {
        this.paginationDetailsElement = document.createElement('div');
        this.paginationDetailsElement.classList.add('mdw-table__footer-details');
        footer.appendChild(this.paginationDetailsElement);
      }
      if (!this.paginationControls) {
        this.paginationControls = footer.getElementsByClassName('mdw-table__footer-controls')[0];
      }
      if (!this.paginationControls) {
        this.paginationControls = document.createElement('div');
        this.paginationControls.classList.add('mdw-table__footer-controls');
        footer.appendChild(this.paginationControls);
      }
      if (!this.previousPageButton || !this.nextPageButton) {
        var buttons = this.paginationControls.getElementsByClassName('mdw-button');
        if (buttons.length !== 2) {
          this.previousPageButton = document.createElement('div');
          this.previousPageButton.classList.add('mdw-button', 'material-icons');
          this.previousPageButton.setAttribute('mdw-icon', '');
          this.previousPageButton.textContent = 'chevron_left';
          this.elementMap.set(this.previousPageButton, new _index.Button(this.previousPageButton));
          this.paginationControls.appendChild(this.previousPageButton);

          this.nextPageButton = document.createElement('div');
          this.nextPageButton.classList.add('mdw-button', 'material-icons');
          this.nextPageButton.setAttribute('mdw-icon', '');
          this.nextPageButton.textContent = 'chevron_right';
          this.elementMap.set(this.nextPageButton, new _index.Button(this.nextPageButton));
          this.paginationControls.appendChild(this.nextPageButton);
        } else {
          this.previousPageButton = buttons[0];
          this.nextPageButton = buttons[1];
        }
        this.previousPageButton.addEventListener('click', function () {
          if (_this3.previousPageButton.hasAttribute('disabled')) {
            return;
          }
          _this3.page -= 1;
          _this3.updateRowCount(false);
          _this3.updatePaginator();
          _this3.refreshRows();
        });
        this.nextPageButton.addEventListener('click', function () {
          if (_this3.nextPageButton.hasAttribute('disabled')) {
            return;
          }
          _this3.page += 1;
          _this3.updateRowCount(false);
          _this3.updatePaginator();
          _this3.refreshRows();
        });
      }
      this.pageLimit = options.limit || 10;
      this.updateRowCount(false);
      this.updatePaginator();
      this.refreshRows();
    }

    /**
     * @param {boolean} create
     * @return {HTMLElement}
     */

  }, {
    key: 'getFooter',
    value: function getFooter(create) {
      var footer = this.element.getElementsByClassName('mdw-table__footer')[0];
      if (!footer && create) {
        footer = document.createElement('div');
        footer.classList.add('mdw-table__footer');
        this.element.appendChild(footer);
      }
      return footer;
    }

    /**
     * @param {HTMLTableRowElement} el
     * @return {boolean}
     */

  }, {
    key: 'isRowVisible',
    value: function isRowVisible(el) {
      var scrollingElement = this.element;
      var rowRect = el.getBoundingClientRect();
      var scrollingRect = scrollingElement.getBoundingClientRect();
      var rowTop = rowRect.top - scrollingRect.top;
      var rowBottom = rowTop + rowRect.height;
      var viewportTop = 0;
      var viewportBottom = scrollingRect.height;
      if (rowTop > viewportTop && rowTop < viewportBottom) {
        // Top of row is visible
        return true;
      }
      if (rowBottom > viewportTop && rowBottom < viewportBottom) {
        // Bottom of row is visible
        return true;
      }
      return false;
    }

    /**
     * @param {(HTMLTableRowElement[])=} visibleRows
     * @return {void}
     */

  }, {
    key: 'clearNonvisibleRows',
    value: function clearNonvisibleRows(visibleRows) {
      var rows = visibleRows;
      if (visibleRows == null) {
        rows = this.getVisibleRows();
      }
      var tbody = this.getTableBody();
      var len = tbody.rows.length;
      if (rows.length === len) {
        return;
      }
      var firstRowIndex = Infinity;
      var lastRowIndex = -Infinity;
      if (rows.length) {
        firstRowIndex = rows[0].sectionRowIndex;
        lastRowIndex = rows[rows.length - 1].sectionRowIndex;
      }
      for (var i = 0; i < len; i += 1) {
        if (i < firstRowIndex || i > lastRowIndex) {
          var row = tbody.rows.item(i);
          while (row.lastChild) {
            row.removeChild(row.lastChild);
          }
        }
      }
    }
  }, {
    key: 'getVisibleRows',
    value: function getVisibleRows() {
      var tbody = this.getTableBody();
      var len = tbody.rows.length;
      var foundFirstVisibleRow = false;
      var rows = [];
      for (var i = 0; i < len; i += 1) {
        var row = tbody.rows.item(i);
        if (this.isRowVisible(row)) {
          foundFirstVisibleRow = true;
          rows.push(row);
        } else if (foundFirstVisibleRow) {
          return rows;
        }
      }
      return rows;
    }
  }, {
    key: 'performLazyRender',
    value: function performLazyRender() {
      var _this4 = this;

      var visibleRows = this.getVisibleRows();
      visibleRows.forEach(function (row) {
        _this4.refreshRow(row.sectionRowIndex);
      });
      this.clearNonvisibleRows(visibleRows);
    }

    /**
     * @param {function(any, number=, any[]=)} filter
     * @return {void}
     */

  }, {
    key: 'setFilter',
    value: function setFilter(filter) {
      this.filter = filter;
      this.refreshFilter();
    }
  }, {
    key: 'refreshFilter',
    value: function refreshFilter() {
      if (this.filter) {
        this.filteredDatasource = this.datasource.filter(this.filter);
      } else {
        this.filteredDatasource = null;
      }
    }

    /**
     * Get filtered datasource
     * @return {any[]}
     */

  }, {
    key: 'getDatasource',
    value: function getDatasource() {
      if (this.filter) {
        if (!this.filteredDatasource) {
          this.refreshFilter();
        }
        return this.filteredDatasource;
      }
      return this.datasource;
    }

    /**
     * Update number of rows in table
     * @param {boolean=} refresh Refresh new rows
     * @return {void}
     */

  }, {
    key: 'updateRowCount',
    value: function updateRowCount(refresh) {
      var _this5 = this;

      var tbody = this.getTableBody();
      var rowLength = tbody.rows.length;

      var datasource = this.getDatasource();
      var rowsToDisplay = datasource.length;
      if (this.pageLimit) {
        var offset = this.page * this.pageLimit;
        if (offset > rowsToDisplay) {
          // Datasource or filter likely changed
          // Reset to page 0
          this.page = 0;
          offset = 0;
        }
        rowsToDisplay -= offset;
        if (rowsToDisplay > this.pageLimit) {
          rowsToDisplay = this.pageLimit;
        }
      }

      var rowDifference = rowsToDisplay - rowLength;
      var newRows = [];

      if (rowDifference < 0) {
        // too many rows
        for (var i = rowLength - 1; i >= rowsToDisplay; i -= 1) {
          var row = tbody.rows.item(i);
          tbody.removeChild(row);
        }
      }
      if (rowDifference > 0) {
        var fragment = document.createDocumentFragment();
        for (var _i = 0; _i < rowDifference; _i += 1) {
          var _row = document.createElement('tr');
          newRows.push(_row);
          fragment.appendChild(_row);
        }
        tbody.appendChild(fragment);
      }
      if (refresh && rowDifference !== 0) {
        if (this.useLazyRendering) {
          this.performLazyRender();
        } else {
          newRows.forEach(function (row) {
            _this5.refreshRow(row.sectionRowIndex);
          });
        }
      }
    }

    /** @return {void} */

  }, {
    key: 'refreshRows',
    value: function refreshRows() {
      if (this.useLazyRendering) {
        this.performLazyRender();
      } else {
        var tbody = this.getTableBody();
        var len = tbody.rows.length;
        for (var i = 0; i < len; i += 1) {
          this.refreshRow(i);
        }
      }
    }

    /** @return {void} */

  }, {
    key: 'refresh',
    value: function refresh() {
      this.refreshFilter();
      this.updateRowCount(false);
      this.updatePaginator();
      this.refreshRows();
    }

    /**
     * @param {HTMLTableRowElement} row
     * @return {any}
     */

  }, {
    key: 'getDataForTableRow',
    value: function getDataForTableRow(row) {
      var index = row.sectionRowIndex + this.page * this.pageLimit;
      return this.getDatasource()[index];
    }

    /**
     * @param {any} data
     * @return {HTMLTableRowElement} row
     */

  }, {
    key: 'getTableRowForData',
    value: function getTableRowForData(data) {
      var datasourceIndex = this.datasource.indexOf(data);
      if (datasourceIndex === -1) {
        return null;
      }
      var minIndex = this.page * this.pageLimit;
      return this.getTableBody().rows.item(datasourceIndex - minIndex);
    }
  }, {
    key: 'clearCache',
    value: function clearCache() {
      this.rowMap = new WeakMap();
    }

    /**
     * @param {number} rowIndex
     * @return {void}
     */

  }, {
    key: 'refreshRow',
    value: function refreshRow(rowIndex) {
      for (var columnIndex = 0; columnIndex < this.columns.length; columnIndex += 1) {
        this.refreshCell(columnIndex, rowIndex);
      }
    }

    /**
     * @param {number} columnIndex
     * @param {number} rowIndex
     * @return {void}
     */

  }, {
    key: 'refreshCell',
    value: function refreshCell(columnIndex, rowIndex) {
      var tableColumn = this.columns[columnIndex];
      var row = this.getTableBody().rows.item(rowIndex);
      var len = row.cells.length;
      while (len <= columnIndex) {
        // Generate cells
        var missingColumn = this.columns[len];
        var missingCell = row.insertCell();
        if (missingColumn.type) {
          missingCell.dataset.type = missingColumn.type;
        }
        missingCell.dataset.key = missingColumn.key;
        if (missingColumn.rowSelector) {
          missingCell.setAttribute('mdw-selector', '');
        }
        len += 1;
      }
      var cell = row.cells.item(columnIndex);
      var data = this.getDataForTableRow(row);
      var value = Reflect.get(data, tableColumn.key);
      if (tableColumn.rowSelector) {
        if (value) {
          if (!row.hasAttribute('mdw-selected')) {
            row.setAttribute('mdw-selected', '');
          }
        } else if (row.hasAttribute('mdw-selected')) {
          row.removeAttribute('mdw-selected');
        }
      }
      var formattedValue = tableColumn.formatter(value, data);
      tableColumn.renderer(cell, formattedValue, data);
    }

    /**
     * @param {HTMLTableCellElement|TableColumn|number|string} search
     * @return {TableColumn}
     */

  }, {
    key: 'getColumn',
    value: function getColumn(search) {
      if (search instanceof TableColumn) {
        return search;
      }
      if (search instanceof HTMLTableCellElement) {
        return this.columns.find(function (column) {
          return column.element === search;
        });
      }
      if (typeof search === 'string') {
        return this.columns.find(function (column) {
          return column.element.dataset.key === search;
        });
      }
      return this.columns[search];
    }

    /** @return {HTMLTableElement} */

  }, {
    key: 'getTable',
    value: function getTable() {
      var table = this.element.getElementsByTagName('table')[0];
      if (!table) {
        table = document.createElement('table');
        var footer = this.element.getElementsByClassName('mdw-table__footer')[0];
        if (footer) {
          this.element.insertBefore(table, footer);
        } else {
          this.element.appendChild(table);
        }
      }
      return table;
    }
    /** @return {HTMLTableRowElement} */

  }, {
    key: 'getHeaderRow',
    value: function getHeaderRow() {
      var thead = this.element.getElementsByTagName('thead')[0];
      if (!thead) {
        var table = this.getTable();
        thead = document.createElement('thead');
        table.appendChild(thead);
      }
      var headerRow = thead.getElementsByTagName('tr')[0];
      if (!headerRow) {
        headerRow = document.createElement('tr');
        thead.appendChild(headerRow);
      }
      return headerRow;
    }

    /** @return {HTMLTableSectionElement} */

  }, {
    key: 'getTableBody',
    value: function getTableBody() {
      if (this.tbody) {
        return this.tbody;
      }
      this.tbody = this.element.getElementsByTagName('tbody')[0];
      if (!this.tbody) {
        var table = this.getTable();
        this.tbody = document.createElement('tbody');
        table.appendChild(this.tbody);
      }
      return this.tbody;
    }

    /**
     * @param {number} columnIndex
     * @return {void}
     */

  }, {
    key: 'refreshColumn',
    value: function refreshColumn(columnIndex) {
      var tbody = this.getTableBody();
      var rowLen = tbody.rows.length;
      for (var rowIndex = 0; rowIndex < rowLen; rowIndex += 1) {
        this.refreshCell(columnIndex, rowIndex);
      }
    }
  }]);

  return Table;
}();

exports.Table = Table;

/***/ }),

/***/ 2:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/**
 * @param {Element} element
 * @return {void}
 */
function setupDarkMode(element) {
  var darkAttribute = 'black dark';
  var lightAttribute = 'white light';
  element.addEventListener('click', function () {
    if (document.body.getAttribute('mdw-theme-fill') === darkAttribute) {
      document.body.setAttribute('mdw-theme-fill', lightAttribute);
      element.setAttribute('mdw-inactive', '');
      element.removeAttribute('mdw-active');
    } else {
      document.body.setAttribute('mdw-theme-fill', darkAttribute);
      element.removeAttribute('mdw-inactive');
      // element.setAttribute('mdw-active', '');
      // Poor visibility even though spec says 70% opacity
    }
  });
}

/** @return {void} */
function setupMenuOptions() {
  var _document$querySelect = document.querySelectorAll('#docs-menu-buttons .mdw-button'),
      _document$querySelect2 = _slicedToArray(_document$querySelect, 1),
      buttonDarkMode = _document$querySelect2[0];

  setupDarkMode(buttonDarkMode);
}

exports.default = setupMenuOptions;

/***/ }),

/***/ 399:
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(400);
module.exports = __webpack_require__(402);


/***/ }),

/***/ 400:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _index = __webpack_require__(50);

var _index2 = __webpack_require__(136);

var _index3 = __webpack_require__(68);

var _menuoptions = __webpack_require__(2);

var _menuoptions2 = _interopRequireDefault(_menuoptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var componentMap = new WeakMap();

/** @return {void} */
function initializeMdwComponents() {
  var components = void 0;
  components = document.querySelectorAll('.js .mdw-table');
  for (var i = 0; i < components.length; i += 1) {
    componentMap.set(components[i], new _index2.Table(components[i]));
  }
  components = document.querySelectorAll('.js .mdw-button');
  for (var _i = 0; _i < components.length; _i += 1) {
    componentMap.set(components[_i], new _index.Button(components[_i]));
  }
  components = document.querySelectorAll('.js .mdw-menu');
  for (var _i2 = 0; _i2 < components.length; _i2 += 1) {
    componentMap.set(components[_i2], new _index3.Menu(components[_i2]));
  }
}

/** @return {void} */
function buildDynamicTable() {
  /** @type {Table} */
  var table = componentMap.get(document.getElementById('dynamic-table'));
  table.addColumn({
    key: 'selected',
    type: 'checkbox',
    rowSelector: true
  });
  table.addColumn({
    key: 'text',
    name: 'Primary Column (full-width)',
    primaryColumn: true,
    sortable: true,
    type: 'text'
  });
  table.addColumn({
    key: 'text2',
    name: 'Text field',
    sortable: true,
    type: 'text'
  });
  table.addColumn({
    key: 'check1',
    name: 'bool',
    type: 'checkbox',
    tooltip: 'Non-selection boolean value',
    sortable: true
  });
  table.addColumn({
    key: 'increment',
    name: 'Increment',
    type: 'number',
    sortable: true
  });
  table.addColumn({
    key: 'random',
    name: 'Random',
    sortable: true,
    type: 'number'
  });
  var datasource = [];
  var count = 1;
  var addDatasourceObject = function addDatasourceObject() {
    datasource.push({
      text: Math.random().toString(36).substring(2),
      text2: Math.random().toString(36).substring(2),
      check1: Math.random() > 0.5,
      increment: count,
      random: Math.floor(Math.random() * 99999)
    });
    count += 1;
  };
  for (var i = 0; i < 256; i += 1) {
    addDatasourceObject();
  }
  table.setDatasource(datasource);
  table.setUseLazyRendering(true);
  table.setPagination();
  table.refresh();

  var _table$element$queryS = table.element.querySelectorAll('.mdw-table__header-controls .mdw-button'),
      _table$element$queryS2 = _slicedToArray(_table$element$queryS, 2),
      filterButton = _table$element$queryS2[0],
      optionsButton = _table$element$queryS2[1];

  var _map = [].concat(_toConsumableArray(table.element.querySelectorAll('.mdw-table__header-controls .mdw-menu'))).map(function (element) {
    return componentMap.get(element);
  }),
      _map2 = _slicedToArray(_map, 2),
      filterMenu = _map2[0],
      optionsMenu = _map2[1];

  filterButton.addEventListener('click', function (event) {
    filterMenu.show(event);
  });
  var filterMenuItems = filterMenu.element.querySelectorAll('.mdw-menu__item');

  var _filterMenuItems = _slicedToArray(filterMenuItems, 4),
      noFilterMenuItem = _filterMenuItems[0],
      mdFilterMenuItem = _filterMenuItems[1],
      randomDivBy9MenuItem = _filterMenuItems[2],
      checkedFilterMenuItem = _filterMenuItems[3];
  /**
   * @param {HTMLElement[]} menuItems
   * @param {number} checkedIndex
   * @return {void}
   */


  function setMenuChecked(menuItems, checkedIndex) {
    menuItems.forEach(function (value, index) {
      if (checkedIndex === index) {
        value.setAttribute('mdw-checked', '');
      } else {
        value.removeAttribute('mdw-checked');
      }
    });
  }
  noFilterMenuItem.addEventListener('click', function () {
    table.setFilter(null);
    table.refresh();
    filterMenu.hide();
    setMenuChecked(filterMenuItems, 0);
    filterButton.setAttribute('mdw-inactive', '');
    filterButton.removeAttribute('mdw-active');
  });
  mdFilterMenuItem.addEventListener('click', function () {
    table.setFilter(function (data) {
      return data.text.indexOf('md') !== -1 || data.text2.indexOf('md') !== -1;
    });
    table.refresh();
    filterMenu.hide();
    setMenuChecked(filterMenuItems, 1);
    filterButton.setAttribute('mdw-active', '');
    filterButton.removeAttribute('mdw-inactive');
  });
  randomDivBy9MenuItem.addEventListener('click', function () {
    table.setFilter(function (data) {
      return data.random % 9 === 0;
    });
    table.refresh();
    filterMenu.hide();
    setMenuChecked(filterMenuItems, 2);
    filterButton.setAttribute('mdw-active', '');
    filterButton.removeAttribute('mdw-inactive');
  });
  checkedFilterMenuItem.addEventListener('click', function () {
    table.setFilter(function (data) {
      return data.check1;
    });
    table.refresh();
    filterMenu.hide();
    setMenuChecked(filterMenuItems, 3);
    filterButton.setAttribute('mdw-active', '');
    filterButton.removeAttribute('mdw-inactive');
  });

  var _optionsMenu$element$ = optionsMenu.element.querySelectorAll('.mdw-menu__item'),
      _optionsMenu$element$2 = _slicedToArray(_optionsMenu$element$, 2),
      throttleMenuItem = _optionsMenu$element$2[0],
      paginateMenuItem = _optionsMenu$element$2[1];

  optionsButton.addEventListener('click', function (event) {
    optionsMenu.show(event);
  });
  throttleMenuItem.addEventListener('click', function () {
    if (throttleMenuItem.hasAttribute('mdw-checked')) {
      table.setUseLazyRendering(false);
      throttleMenuItem.removeAttribute('mdw-checked');
    } else {
      table.setUseLazyRendering(true);
      throttleMenuItem.setAttribute('mdw-checked', '');
    }
    optionsMenu.hide();
    table.refresh();
  });
  paginateMenuItem.addEventListener('click', function () {
    if (paginateMenuItem.hasAttribute('mdw-checked')) {
      table.setPagination({ disabled: true });
      paginateMenuItem.removeAttribute('mdw-checked');
    } else {
      table.setPagination();
      paginateMenuItem.setAttribute('mdw-checked', '');
    }
    optionsMenu.hide();
    table.refresh();
  });
}

initializeMdwComponents();
(0, _menuoptions2.default)();
buildDynamicTable();

/***/ }),

/***/ 401:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Table = exports.Search = exports.Fab = exports.TextField = exports.TabItem = exports.Tab = exports.ProgressCircle = exports.MenuItem = exports.Menu = exports.ListItem = exports.List = exports.Button = exports.BottomnavItem = exports.Bottomnav = undefined;

var _index = __webpack_require__(96);

var _index2 = __webpack_require__(50);

var _index3 = __webpack_require__(44);

var _index4 = __webpack_require__(68);

var _index5 = __webpack_require__(97);

var _index6 = __webpack_require__(98);

var _index7 = __webpack_require__(45);

var _index8 = __webpack_require__(99);

var _index9 = __webpack_require__(100);

var _index10 = __webpack_require__(136);

exports.Bottomnav = _index.Bottomnav;
exports.BottomnavItem = _index.BottomnavItem;
exports.Button = _index2.Button;
exports.List = _index3.List;
exports.ListItem = _index3.ListItem;
exports.Menu = _index4.Menu;
exports.MenuItem = _index4.MenuItem;
exports.ProgressCircle = _index5.ProgressCircle;
exports.Tab = _index6.Tab;
exports.TabItem = _index6.TabItem;
exports.TextField = _index7.TextField;
exports.Fab = _index8.Fab;
exports.Search = _index9.Search;
exports.Table = _index10.Table;

/***/ }),

/***/ 402:
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 44:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var List = function () {
  /**
   * @param {Element} element
   */
  function List(element) {
    _classCallCheck(this, List);

    this.element = element;
  }

  _createClass(List, [{
    key: 'detach',
    value: function detach() {
      this.element = null;
    }

    /**
     * Clear and detach all children
     * @param {WeakMap=} elementMap
     * @return {void}
     */

  }, {
    key: 'clear',
    value: function clear(elementMap) {
      var el = this.element;
      if (!el) {
        return;
      }
      while (el.firstChild) {
        if (elementMap && elementMap.has(el.firstChild)) {
          elementMap.get(el.firstChild).detach();
          elementMap.delete(el.firstChild);
        }
        el.removeChild(el.firstChild);
      }
    }
  }]);

  return List;
}();

var ListItem = function () {
  /**
   * @param {Element} element
   */
  function ListItem(element) {
    var _this = this;

    _classCallCheck(this, ListItem);

    this.element = element;
    var rippleElements = element.getElementsByClassName('mdw-ripple');
    this.ripple = rippleElements && rippleElements[0];
    if (!this.ripple) {
      var ripple = document.createElement('div');
      ripple.classList.add('mdw-ripple');
      this.element.insertBefore(ripple, this.element.firstChild);
      this.ripple = ripple;
    }
    var innerRippleElements = this.ripple.getElementsByClassName('mdw-ripple__inner');
    this.rippleInner = innerRippleElements && innerRippleElements[0];
    if (!this.rippleInner) {
      var rippleInner = document.createElement('div');
      rippleInner.classList.add('mdw-ripple__inner');
      this.ripple.appendChild(rippleInner);
      this.rippleInner = rippleInner;
    }
    this.element.setAttribute('mdw-ripple', '');
    this.element.addEventListener('click', function (event) {
      _this.updateRipplePosition(event);
    });
  }

  /**
   * @param {MouseEvent|PointerEvent} event
   * @return {void}
   */


  _createClass(ListItem, [{
    key: 'updateRipplePosition',
    value: function updateRipplePosition(event) {
      if (event.target !== this.element && event.target !== this.ripple) {
        return;
      }
      if (!event.pointerType && !event.detail) {
        // Ripple from center
        this.rippleInner.style.removeProperty('left');
        this.rippleInner.style.removeProperty('top');
        return;
      }
      var x = event.offsetX;
      var y = event.offsetY;
      this.rippleInner.style.setProperty('left', x + 'px');
      this.rippleInner.style.setProperty('top', y + 'px');
    }

    /**
     * Destroys all HTML Element references for garbage collection
     * @return {void}
     */

  }, {
    key: 'detach',
    value: function detach() {
      this.ripple = null;
      this.element = null;
    }
  }]);

  return ListItem;
}();

exports.List = List;
exports.ListItem = ListItem;

/***/ }),

/***/ 45:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextField = function () {
  /**
   * @param {HTMLElement} element
   */
  function TextField(element) {
    var _this = this;

    _classCallCheck(this, TextField);

    this.element = element;
    /** @type {HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement} */
    this.input = element.querySelector('.mdw-textfield__input');
    if (this.input) {
      if (this.input instanceof HTMLTextAreaElement && this.element.hasAttribute('mdw-multiline')) {
        this.input.addEventListener('input', function () {
          _this.updateTextAreaSize();
        });
        this.updateTextAreaSize();
      }
      this.input.addEventListener('input', function () {
        _this.updateInputEmptyState();
      });
      this.updateInputEmptyState();
    }
    this.border = element.querySelector('.mdw-textfield__border-line');
    if (!this.border) {
      var border = document.createElement('div');
      border.classList.add('mdw-textfield__border-line');
      element.appendChild(border);
      this.border = border;
    }
    var rippleElements = this.border.getElementsByClassName('mdw-ripple');
    this.ripple = rippleElements && rippleElements[0];
    if (!this.ripple) {
      var ripple = document.createElement('div');
      ripple.classList.add('mdw-ripple');
      this.border.appendChild(ripple);
      this.ripple = ripple;
    }
    var innerRippleElements = this.ripple.getElementsByClassName('mdw-ripple__inner');
    this.rippleInner = innerRippleElements && innerRippleElements[0];
    if (!this.rippleInner) {
      var rippleInner = document.createElement('div');
      rippleInner.classList.add('mdw-ripple__inner');
      this.ripple.appendChild(rippleInner);
      this.rippleInner = rippleInner;
    }
    this.element.setAttribute('mdw-ripple', '');
    this.border.addEventListener('click', function (event) {
      _this.updateRipplePosition(event);
    });
  }

  /** @return {void} */


  _createClass(TextField, [{
    key: 'updateInputEmptyState',
    value: function updateInputEmptyState() {
      var attributeName = 'mdw-value-empty';
      if (this.input.value) {
        if (this.element.hasAttribute(attributeName)) {
          this.element.removeAttribute(attributeName);
        }
      } else if (!this.element.hasAttribute(attributeName)) {
        this.element.setAttribute('mdw-value-empty', '');
      }
    }

    /** @return {number} Single row height */

  }, {
    key: 'updateTextAreaSize',
    value: function updateTextAreaSize() {
      var previousRowsValue = this.input.getAttribute('rows');
      this.input.setAttribute('rows', '1');

      var _window$getComputedSt = window.getComputedStyle(this.input),
          height = _window$getComputedSt.height,
          paddingTop = _window$getComputedSt.paddingTop;

      if (height === 'auto') {
        this.input.setAttribute('rows', previousRowsValue);
        return -1;
      }
      var heightPx = parseInt(height.replace('px', ''), 10);
      var paddingTopPx = parseInt(paddingTop.replace('px', ''), 10);
      this.input.setAttribute('rows', Math.floor((this.input.scrollHeight - paddingTopPx) / heightPx).toString());
      return heightPx;
    }

    /**
     * @param {MouseEvent|PointerEvent} event
     * @return {void}
     */

  }, {
    key: 'updateRipplePosition',
    value: function updateRipplePosition(event) {
      if (event.target !== this.border && event.target !== this.ripple) {
        return;
      }
      if (!event.pointerType && !event.detail) {
        // Ripple from center
        this.rippleInner.style.removeProperty('left');
        this.rippleInner.style.removeProperty('top');
        return;
      }
      var x = event.offsetX;
      var y = event.offsetY;
      this.rippleInner.style.setProperty('left', x + 'px');
      this.rippleInner.style.setProperty('top', y + 'px');
    }

    /**
     * @return {string|Date|number}
     */

  }, {
    key: 'value',
    get: function get() {
      if (this.input instanceof HTMLTextAreaElement || this.input instanceof HTMLSelectElement) {
        return this.value;
      }
      var type = this.input.hasAttribute('type') && this.input.getAttribute('type').toLowerCase();
      switch (type) {
        case 'number':
        case 'range':
          return this.input.valueAsNumber;
        case 'date':
        case 'datetime-local':
        case 'time':
          if (this.input.value == null) {
            return null;
          }
          return new Date(this.input.valueAsDate.getTimezoneOffset() * 60 * 1000 + this.input.valueAsNumber);
        default:
          return this.input.value;
      }
    }

    /** @param {(string|Date|number)=} value */
    ,
    set: function set(value) {
      if (value == null) {
        this.input.value = null;
      } else if (this.input instanceof HTMLTextAreaElement || this.input instanceof HTMLSelectElement) {
        if (value instanceof Date) {
          this.input.value = value.toString();
        } else if (typeof value === 'string') {
          this.input.value = value;
        } else {
          this.input.value = value.toString(10);
        }
      } else if (value instanceof Date) {
        var type = this.input.hasAttribute('type') && this.input.getAttribute('type').toLowerCase();
        if (type === 'time') {
          var hoursStr = '' + (value.getHours() < 10 ? '0' : '') + value.getHours();
          var minutesStr = '' + (value.getMinutes() < 10 ? '0' : '') + value.getMinutes();
          var secondsStr = '' + (value.getSeconds() < 10 ? '0' : '') + value.getSeconds();
          this.input.value = hoursStr + ':' + minutesStr + ':' + secondsStr + '.' + value.getMilliseconds();
        } else {
          switch (type) {
            case 'date':
            case 'datetime-local':
              this.input.valueAsDate = value;
              break;
            case 'number':
            case 'range':
              this.input.valueAsNumber = value.getTime();
              break;
            default:
              this.input.value = value.toString();
          }
        }
      } else if (typeof value === 'string') {
        this.input.value = value;
      } else {
        var _type = this.input.hasAttribute('type') && this.input.getAttribute('type').toLowerCase();
        switch (_type) {
          case 'date':
          case 'time':
          case 'datetime-local':
          case 'number':
          case 'range':
            this.input.valueAsNumber = value;
            break;
          default:
            this.input.value = value.toString();
        }
      }
      this.updateInputEmptyState();
      this.updateTextAreaSize();
    }
  }]);

  return TextField;
}();

exports.TextField = TextField;

/***/ }),

/***/ 50:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Button = function () {
  /**
   * @param {Element} element
   */
  function Button(element) {
    var _this = this;

    _classCallCheck(this, Button);

    this.element = element;
    var rippleElements = element.getElementsByClassName('mdw-ripple');
    this.ripple = rippleElements && rippleElements[0];
    if (!this.ripple) {
      var ripple = document.createElement('div');
      ripple.classList.add('mdw-ripple');
      this.element.insertBefore(ripple, this.element.firstChild);
      this.ripple = ripple;
    }
    var innerRippleElements = this.ripple.getElementsByClassName('mdw-ripple__inner');
    this.rippleInner = innerRippleElements && innerRippleElements[0];
    if (!this.rippleInner) {
      var rippleInner = document.createElement('div');
      rippleInner.classList.add('mdw-ripple__inner');
      this.ripple.appendChild(rippleInner);
      this.rippleInner = rippleInner;
    }
    this.element.setAttribute('mdw-ripple', '');
    this.element.addEventListener('click', function (event) {
      _this.updateRipplePosition(event);
    });
  }

  /**
   * @param {MouseEvent|PointerEvent} event
   * @return {void}
   */


  _createClass(Button, [{
    key: 'updateRipplePosition',
    value: function updateRipplePosition(event) {
      if (event.target !== this.element && event.target !== this.ripple) {
        return;
      }
      if (this.element.hasAttribute('mdw-icon') || !event.pointerType && !event.detail) {
        // Ripple from center
        this.rippleInner.style.removeProperty('left');
        this.rippleInner.style.removeProperty('top');
        return;
      }
      var x = event.offsetX;
      var y = event.offsetY;
      this.rippleInner.style.setProperty('left', x + 'px');
      this.rippleInner.style.setProperty('top', y + 'px');
    }
  }]);

  return Button;
}();

exports.Button = Button;

/***/ }),

/***/ 68:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Menu = function () {
  /**
   * @param {HTMLElement} element
   */
  function Menu(element) {
    var _this = this;

    _classCallCheck(this, Menu);

    this.element = element;

    var _element$getElementsB = this.element.getElementsByClassName('mdw-menu__close'),
        _element$getElementsB2 = _slicedToArray(_element$getElementsB, 1),
        menuCloser = _element$getElementsB2[0];

    if (!menuCloser) {
      menuCloser = document.createElement('div');
      menuCloser.classList.add('mdw-menu__close');
      if (this.element.firstChild) {
        this.element.insertBefore(menuCloser, this.element.firstChild);
      } else {
        this.element.appendChild(menuCloser);
      }
    }
    this.menuCloser = menuCloser;
    this.menuCloser.addEventListener('click', function () {
      _this.hide();
    });
  }

  _createClass(Menu, [{
    key: 'detach',
    value: function detach() {
      this.element = null;
    }

    /**
     * @param {MouseEvent} event
     * @return {boolean} handled
     */

  }, {
    key: 'show',
    value: function show(event) {
      var changed = false;
      if (event) {
        var top = 'auto';
        var left = 'auto';
        var right = 'auto';
        var bottom = 'auto';
        if (this.element.hasAttribute('mdw-position')) {
          var position = this.element.getAttribute('mdw-position');
          if (position.indexOf('bottom') !== -1) {
            bottom = window.innerHeight - event.pageY + 'px';
          } else {
            top = event.pageY + 'px';
          }
          if (position.indexOf('right') !== -1) {
            right = event.pageX + 'px';
          } else if (position.indexOf('end') !== -1 && document.documentElement.getAttribute('dir') !== 'rtl') {
            right = window.innerWidth - event.pageX + 'px';
          } else {
            left = event.pageX + 'px';
          }
        } else {
          top = event.pageY + 'px';
          left = event.pageX + 'px';
        }
        this.element.style.top = top;
        this.element.style.left = left;
        this.element.style.right = right;
        this.element.style.bottom = bottom;
        this.element.style.position = 'fixed';
      } else {
        this.element.style.top = '';
        this.element.style.left = '';
        this.element.style.right = '';
        this.element.style.bottom = '';
        this.element.style.position = '';
      }
      if (this.element.hasAttribute('mdw-hide')) {
        this.element.removeAttribute('mdw-hide');
        changed = true;
      }
      if (!this.element.hasAttribute('mdw-show')) {
        this.element.setAttribute('mdw-show', '');
        changed = true;
      }
      return changed;
    }

    /** @return {boolean} handled */

  }, {
    key: 'hide',
    value: function hide() {
      if (!this.element.hasAttribute('mdw-hide')) {
        this.element.setAttribute('mdw-hide', '');
        return true;
      }
      return false;
    }

    /**
     * Clear and detach all children
     * @param {WeakMap=} elementMap
     * @return {void}
     */

  }, {
    key: 'clear',
    value: function clear(elementMap) {
      var el = this.element;
      if (!el) {
        return;
      }
      while (el.firstChild) {
        if (elementMap && elementMap.has(el.firstChild)) {
          elementMap.get(el.firstChild).detach();
          elementMap.delete(el.firstChild);
        }
        el.removeChild(el.firstChild);
      }
    }
  }]);

  return Menu;
}();

var MenuItem = function () {
  /**
   * @param {Element} element
   */
  function MenuItem(element) {
    var _this2 = this;

    _classCallCheck(this, MenuItem);

    this.element = element;
    var rippleElements = element.getElementsByClassName('mdw-ripple');
    this.ripple = rippleElements && rippleElements[0];
    if (!this.ripple) {
      var ripple = document.createElement('div');
      ripple.classList.add('mdw-ripple');
      this.element.insertBefore(ripple, this.element.firstChild);
      this.ripple = ripple;
    }
    var innerRippleElements = this.ripple.getElementsByClassName('mdw-ripple__inner');
    this.rippleInner = innerRippleElements && innerRippleElements[0];
    if (!this.rippleInner) {
      var rippleInner = document.createElement('div');
      rippleInner.classList.add('mdw-ripple__inner');
      this.ripple.appendChild(rippleInner);
      this.rippleInner = rippleInner;
    }
    this.element.setAttribute('mdw-ripple', '');
    this.element.addEventListener('click', function (event) {
      _this2.updateRipplePosition(event);
    });
  }

  /**
   * @param {MouseEvent|PointerEvent} event
   * @return {void}
   */


  _createClass(MenuItem, [{
    key: 'updateRipplePosition',
    value: function updateRipplePosition(event) {
      if (event.target !== this.element && event.target !== this.ripple) {
        return;
      }
      if (!event.pointerType && !event.detail) {
        // Ripple from center
        this.rippleInner.style.removeProperty('left');
        this.rippleInner.style.removeProperty('top');
        return;
      }
      var x = event.offsetX;
      var y = event.offsetY;
      this.rippleInner.style.setProperty('left', x + 'px');
      this.rippleInner.style.setProperty('top', y + 'px');
    }

    /**
     * Destroys all HTMLElement references for garbage collection
     * @return {void}
     */

  }, {
    key: 'detach',
    value: function detach() {
      this.ripple = null;
      this.element = null;
    }
  }]);

  return MenuItem;
}();

exports.Menu = Menu;
exports.MenuItem = MenuItem;

/***/ }),

/***/ 96:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BottomnavItem = function () {
  /**
   * @param {Element} element
   */
  function BottomnavItem(element) {
    var _this = this;

    _classCallCheck(this, BottomnavItem);

    this.element = element;
    var rippleElements = element.getElementsByClassName('mdw-ripple');
    this.ripple = rippleElements && rippleElements[0];
    if (!this.ripple) {
      var ripple = document.createElement('div');
      ripple.classList.add('mdw-ripple');
      this.element.insertBefore(ripple, this.element.firstChild);
      this.ripple = ripple;
    }
    var innerRippleElements = this.ripple.getElementsByClassName('mdw-ripple__inner');
    this.rippleInner = innerRippleElements && innerRippleElements[0];
    if (!this.rippleInner) {
      var rippleInner = document.createElement('div');
      rippleInner.classList.add('mdw-ripple__inner');
      this.ripple.appendChild(rippleInner);
      this.rippleInner = rippleInner;
    }
    this.element.setAttribute('mdw-ripple', '');
    this.element.addEventListener('click', function (event) {
      _this.updateRipplePosition(event);
    });
  }

  /**
   * @param {MouseEvent|PointerEvent} event
   * @return {void}
   */


  _createClass(BottomnavItem, [{
    key: 'updateRipplePosition',
    value: function updateRipplePosition(event) {
      if (event.target !== this.element && event.target !== this.ripple) {
        return;
      }
      if (!event.pointerType && !event.detail) {
        // Ripple from center
        this.rippleInner.style.removeProperty('left');
        this.rippleInner.style.removeProperty('top');
        return;
      }
      var x = event.offsetX;
      var y = event.offsetY;
      this.rippleInner.style.setProperty('left', x + 'px');
      this.rippleInner.style.setProperty('top', y + 'px');
    }
  }]);

  return BottomnavItem;
}();

var Bottomnav = function () {
  /**
   * @param {Element} element
   */
  function Bottomnav(element) {
    var _this2 = this;

    _classCallCheck(this, Bottomnav);

    this.element = element;
    this.items = this.element.getElementsByClassName('mdw-bottomnav__item');
    this.inputs = this.element.getElementsByTagName('input');

    var _loop = function _loop(i) {
      var item = _this2.items.item(i);
      item.addEventListener('click', function () {
        _this2.onItemClicked(item);
      });
    };

    for (var i = 0; i < this.items.length; i += 1) {
      _loop(i);
    }

    var _loop2 = function _loop2(i) {
      var input = _this2.inputs.item(i);
      input.addEventListener('change', function () {
        _this2.onInputChanged(input);
      });
    };

    for (var i = 0; i < this.inputs.length; i += 1) {
      _loop2(i);
    }
  }

  /**
   * @param {HTMLInputElement} inputElement
   * @return {void}
   */


  _createClass(Bottomnav, [{
    key: 'onInputChanged',
    value: function onInputChanged(inputElement) {
      var itemElement = void 0;
      if (inputElement.parentElement.classList.contains('mdw-bottomnav__item')) {
        itemElement = inputElement.parentElement;
      }
      if (inputElement.id) {
        itemElement = document.querySelector('label.mdw-bottomnav__item[for="' + inputElement.id + '"]');
      }
      if (itemElement.hasAttribute('mdw-selected') && inputElement.checked) {
        return;
      }
      if (!itemElement.hasAttribute('mdw-selected') && !inputElement.checked) {
        return;
      }
      this.removeSelection();
      itemElement.setAttribute('mdw-selected', '');
    }

    /** @return {boolean} change */

  }, {
    key: 'removeSelection',
    value: function removeSelection() {
      for (var i = 0; i < this.items.length; i += 1) {
        var _item = this.items.item(i);
        if (_item.hasAttribute('mdw-selected')) {
          _item.removeAttribute('mdw-selected');
          return true;
        }
      }
      return false;
    }

    /**
     * @param {Element} itemElement
     * @return {void}
     */

  }, {
    key: 'onItemClicked',
    value: function onItemClicked(itemElement) {
      if (itemElement.hasAttribute('mdw-selected')) {
        return;
      }
      if (itemElement.hasAttribute('disabled')) {
        return;
      }
      this.removeSelection();
      itemElement.setAttribute('mdw-selected', '');
      var inputElement = void 0;
      if (itemElement instanceof HTMLLabelElement && itemElement.hasAttribute('for')) {
        var id = itemElement.getAttribute('for');
        if (id) {
          inputElement = document.getElementById(id);
        }
      } else {
        var _itemElement$getEleme = itemElement.getElementsByTagName('input');

        var _itemElement$getEleme2 = _slicedToArray(_itemElement$getEleme, 1);

        inputElement = _itemElement$getEleme2[0];
      }
      if (inputElement instanceof HTMLInputElement) {
        inputElement.checked = true;
      } else if (inputElement) {
        throw new Error('Unexpected inputElement type');
      }
    }
  }]);

  return Bottomnav;
}();

exports.Bottomnav = Bottomnav;
exports.BottomnavItem = BottomnavItem;

/***/ }),

/***/ 97:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var radius = 8.75;
var circumference = 2 * Math.PI * radius;

var ProgressCircle = function () {
  /**
   * @param {Element} element
   */
  function ProgressCircle(element) {
    _classCallCheck(this, ProgressCircle);

    this.element = element;
    this.pathElements = this.element.getElementsByTagName('path');
    // this.pathElement = pathElements[pathElements.length - 1];

    // TODO: Upgrade IE/Edge browsers to animate with rAF
  }

  _createClass(ProgressCircle, [{
    key: 'detach',
    value: function detach() {
      this.element = null;
    }

    /**
     * Clear and detach all children
     * @param {number} value Percentage value (0-100);
     * @return {void}
     */

  }, {
    key: 'setValue',
    value: function setValue(value) {
      var dashOffset = circumference * (3 - value / 100);
      this.pathElements[this.pathElements.length - 1].style.setProperty('stroke-dashoffset', dashOffset.toString());
    }
  }]);

  return ProgressCircle;
}();

exports.ProgressCircle = ProgressCircle;

/***/ }),

/***/ 98:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @param {HTMLElement} element
 * @param {MouseEvent|PointerEvent} event
 * @return {void}
 */
function updateRipplePosition(element, event) {
  if (!event.pointerType && !event.detail) {
    // Ripple from center
    element.style.setProperty('left', '0');
    element.style.setProperty('top', '0');
    return;
  }
  var x = event.offsetX - element.clientWidth / 2.0;
  var y = event.offsetY - element.clientHeight / 2.0;
  element.style.setProperty('left', x + 'px');
  element.style.setProperty('top', y + 'px');
}

var TabItem =
/**
 * @param {Element} element
 */
function TabItem(element) {
  var _this = this;

  _classCallCheck(this, TabItem);

  this.element = element;
  var rippleElements = element.getElementsByClassName('mdw-ripple');
  this.ripple = rippleElements && rippleElements[0];
  if (!this.ripple) {
    var ripple = document.createElement('div');
    ripple.classList.add('mdw-ripple');
    this.element.insertBefore(ripple, this.element.firstChild);
    this.ripple = ripple;
  }
  this.element.setAttribute('mdw-js-ripple', '');
  this.element.addEventListener('click', function (event) {
    updateRipplePosition(_this.ripple, event);
  });
};

var Tab = function () {
  /**
   * @param {Element} element
   */
  function Tab(element) {
    var _this2 = this;

    _classCallCheck(this, Tab);

    this.element = element;
    this.inputs = element.getElementsByTagName('input');
    this.items = element.getElementsByClassName('mdw-tab__item');

    var indicatorElements = element.getElementsByClassName('mdw-tab__indicator');
    this.indicator = indicatorElements && indicatorElements[0];
    if (!this.indicator) {
      var indicator = document.createElement('div');
      indicator.classList.add('mdw-tab__indicator');
      this.element.appendChild(indicator);
      this.indicator = indicator;
    }

    var _loop = function _loop(i) {
      var inputElement = _this2.inputs[i];
      if (inputElement.checked) {
        _this2.onInputChanged(inputElement);
      }
      inputElement.addEventListener('change', function () {
        _this2.onInputChanged(inputElement);
      });
    };

    for (var i = 0; i < this.inputs.length; i += 1) {
      _loop(i);
    }

    var _loop2 = function _loop2(i) {
      var itemElement = _this2.items[i];
      if (itemElement.hasAttribute('mdw-selected')) {
        _this2.selectItem(itemElement);
      }
      itemElement.addEventListener('click', function () {
        _this2.selectItem(itemElement);
      });
    };

    for (var i = 0; i < this.items.length; i += 1) {
      _loop2(i);
    }
  }

  /**
   * @param {HTMLInputElement} inputElement
   * @return {HTMLElement}
   */


  _createClass(Tab, [{
    key: 'selectItem',


    /**
     * @param {HTMLElement} itemElement
     * @return {boolean} changed
     */
    value: function selectItem(itemElement) {
      var foundPreviousSelection = false;
      var foundTarget = false;
      var indicatorUpdated = false;
      var left = 0;
      var isRtl = Tab.isRtl();
      for (var i = 0; i < this.items.length; i += 1) {
        var index = isRtl ? this.items.length - 1 - i : i;
        var item = this.items.item(index);
        if (item.hasAttribute('mdw-selected')) {
          foundPreviousSelection = true;
          item.removeAttribute('mdw-selected');
          if (!indicatorUpdated) {
            this.indicator.setAttribute('mdw-direction', 'forwards');
            indicatorUpdated = true;
          }
        }
        if (item === itemElement) {
          foundTarget = true;
          itemElement.setAttribute('mdw-selected', '');
          if (!indicatorUpdated) {
            this.indicator.setAttribute('mdw-direction', 'backwards');
            indicatorUpdated = true;
          }
        }
        if (!foundTarget) {
          left += item.clientWidth;
        }
        if (foundTarget && foundPreviousSelection) {
          break;
        }
      }

      if (!this.element.clientWidth) {
        this.indicator.style.setProperty('left', '');
        this.indicator.style.setProperty('right', '');
        this.indicator.removeAttribute('mdw-js-indicator');
        // use CSS styling fallback
        return false;
      }
      var right = this.element.clientWidth - left - itemElement.clientWidth;
      if (!this.indicator.hasAttribute('mdw-js-indicator')) {
        this.indicator.setAttribute('mdw-js-indicator', '');
      }

      this.indicator.style.setProperty('left', left + 'px');
      this.indicator.style.setProperty('right', right + 'px');
      return false;
    }

    /**
     * @param {HTMLInputElement} inputElement
     * @return {void}
     */

  }, {
    key: 'onInputChanged',
    value: function onInputChanged(inputElement) {
      var itemElement = Tab.getItemForInput(inputElement);
      if (itemElement) {
        this.selectItem(itemElement);
      }
    }
  }], [{
    key: 'getItemForInput',
    value: function getItemForInput(inputElement) {
      var itemElement = void 0;
      if (inputElement.parentElement.classList.contains('mdw-tab__item')) {
        itemElement = inputElement.parentElement;
      }
      if (inputElement.id) {
        itemElement = document.querySelector('label.mdw-tab__item[for="' + inputElement.id + '"]');
      }
      return itemElement;
    }
  }, {
    key: 'isRtl',
    value: function isRtl() {
      var htmlElement = document.getElementsByTagName('html')[0];
      if (htmlElement.hasAttribute('dir') && htmlElement.getAttribute('dir').toLowerCase() === 'rtl') {
        return true;
      }
      if (!document.body.hasAttribute('dir')) {
        return false;
      }
      return document.body.getAttribute('dir').toLowerCase() === 'rtl';
    }
  }]);

  return Tab;
}();

exports.Tab = Tab;
exports.TabItem = TabItem;

/***/ }),

/***/ 99:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Fab = function () {
  /**
   * @param {Element} element
   */
  function Fab(element) {
    var _this = this;

    _classCallCheck(this, Fab);

    this.element = element;

    var _element$getElementsB = this.element.getElementsByClassName('mdw-fab__close'),
        _element$getElementsB2 = _slicedToArray(_element$getElementsB, 1),
        closer = _element$getElementsB2[0];

    if (!closer) {
      closer = document.createElement('div');
      closer.classList.add('mdw-fab__close');
      this.element.appendChild(closer);
    }
    this.menuCloser = closer;
    this.menuCloser.addEventListener('click', function () {
      _this.hide();
    });

    var _element$getElementsB3 = this.element.getElementsByClassName('mdw-fab__button'),
        _element$getElementsB4 = _slicedToArray(_element$getElementsB3, 1),
        fabButton = _element$getElementsB4[0];

    this.fabButton = fabButton;
    this.fabButton.addEventListener('click', function () {
      _this.toggle();
    });
  }

  _createClass(Fab, [{
    key: 'detach',
    value: function detach() {
      this.element = null;
    }

    /** @return {boolean} handled */

  }, {
    key: 'show',
    value: function show() {
      var changed = false;
      if (this.element.hasAttribute('mdw-hide')) {
        this.element.removeAttribute('mdw-hide');
        changed = true;
      }
      if (!this.element.hasAttribute('mdw-show')) {
        this.element.setAttribute('mdw-show', '');
        changed = true;
      }
      return changed;
    }

    /** @return {boolean} handled */

  }, {
    key: 'hide',
    value: function hide() {
      if (!this.element.hasAttribute('mdw-hide')) {
        this.element.setAttribute('mdw-hide', '');
      } else {
        return false;
      }
      if (this.element.hasAttribute('mdw-show')) {
        this.element.removeAttribute('mdw-show');
        return true;
      }
      return false;
    }
  }, {
    key: 'toggle',
    value: function toggle() {
      if (this.hide()) {
        return;
      }
      this.show();
    }

    /**
     * Clear and detach all children
     * @param {WeakMap=} elementMap
     * @return {void}
     */

  }, {
    key: 'clear',
    value: function clear(elementMap) {
      var el = this.element;
      if (!el) {
        return;
      }
      while (el.firstChild) {
        if (elementMap && elementMap.has(el.firstChild)) {
          elementMap.get(el.firstChild).detach();
          elementMap.delete(el.firstChild);
        }
        el.removeChild(el.firstChild);
      }
    }
  }]);

  return Fab;
}();

exports.Fab = Fab;

/***/ })

/******/ });