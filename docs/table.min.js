/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 67);
/******/ })
/************************************************************************/
/******/ ({

/***/ 1:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Button = function () {
  /**
   * @param {Element} element
   */
  function Button(element) {
    var _this = this;

    _classCallCheck(this, Button);

    this.element = element;
    var rippleElements = element.getElementsByClassName('mdw-ripple');
    this.ripple = rippleElements && rippleElements[0];
    if (!this.ripple) {
      var ripple = document.createElement('div');
      ripple.classList.add('mdw-ripple');
      this.element.insertBefore(ripple, this.element.firstChild);
      this.ripple = ripple;
    }
    var innerRippleElements = this.ripple.getElementsByClassName('mdw-ripple__inner');
    this.rippleInner = innerRippleElements && innerRippleElements[0];
    if (!this.rippleInner) {
      var rippleInner = document.createElement('div');
      rippleInner.classList.add('mdw-ripple__inner');
      this.ripple.appendChild(rippleInner);
      this.rippleInner = rippleInner;
    }
    this.element.setAttribute('mdw-ripple', '');
    this.element.addEventListener('click', function (event) {
      _this.updateRipplePosition(event);
    });
  }

  /**
   * @param {MouseEvent|PointerEvent} event
   * @return {void}
   */


  _createClass(Button, [{
    key: 'updateRipplePosition',
    value: function updateRipplePosition(event) {
      if (event.target !== this.element && event.target !== this.ripple) {
        return;
      }
      if (this.element.hasAttribute('mdw-icon') || !event.pointerType && !event.detail) {
        // Ripple from center
        this.rippleInner.style.removeProperty('left');
        this.rippleInner.style.removeProperty('top');
        return;
      }
      var x = event.offsetX;
      var y = event.offsetY;
      this.rippleInner.style.setProperty('left', x + 'px');
      this.rippleInner.style.setProperty('top', y + 'px');
    }
  }]);

  return Button;
}();

exports.Button = Button;

/***/ }),

/***/ 67:
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(68);
module.exports = __webpack_require__(70);


/***/ }),

/***/ 68:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _index = __webpack_require__(1);

var _index2 = __webpack_require__(69);

var componentMap = new WeakMap();

/** @return {void} */
function initializeMdwComponents() {
  var components = void 0;
  components = document.querySelectorAll('.js .mdw-table');
  for (var i = 0; i < components.length; i += 1) {
    componentMap.set(components[i], new _index2.Table(components[i]));
  }
  components = document.querySelectorAll('.js .mdw-button');
  for (var _i = 0; _i < components.length; _i += 1) {
    componentMap.set(components[_i], new _index.Button(components[_i]));
  }
}

initializeMdwComponents();

/***/ }),

/***/ 69:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Table = function () {
  /**
   * @param {Element} element
   */
  function Table(element) {
    var _this = this;

    _classCallCheck(this, Table);

    this.element = element;
    this.element.addEventListener('click', function (event) {
      // Use one event listener to reduce overhead and allow dynamic content
      _this.handleClickInteraction(event);
    });
  }

  _createClass(Table, [{
    key: 'detach',
    value: function detach() {
      this.element = null;
    }

    /**
     * @param {PointerEvent|MouseEvent} event
     * @return {void}
     */

  }, {
    key: 'handleClickInteraction',
    value: function handleClickInteraction(event) {
      /** @type {HTMLElement} */
      var target = event.target;
      if (target instanceof HTMLInputElement) {
        if (target.hasAttribute('type') && target.getAttribute('type') === 'checkbox') {
          event.stopPropagation();
          var _currentCell = this.getTableCell(target);
          if (_currentCell.tagName.toLowerCase() === 'th') {
            this.setCheckOnAllRows(target.checked);
            this.setHasSelection(target.checked);
            return;
          }
          var currentRow = this.getTableRow(target);
          if (target.checked) {
            currentRow.setAttribute('mdw-selected', '');
            this.setHasSelection(true);
          } else {
            currentRow.removeAttribute('mdw-selected');
            var checkedRows = this.getCheckedRows();
            this.setHasSelection(checkedRows.length !== 0);
          }
        }
        return;
      }
      var currentCell = this.getTableCell(target);
      if (currentCell) {
        if (currentCell.tagName.toLowerCase() === 'th' && currentCell.hasAttribute('mdw-sortable')) {
          event.stopPropagation();
          var ascending = true;
          if (!currentCell.hasAttribute('mdw-sorted')) {
            ascending = false;
          } else if (currentCell.getAttribute('mdw-sorted') === 'reverse') {
            ascending = false;
          }
          this.updateSortIcons(currentCell, ascending);
          this.updateSortColumn(currentCell, ascending);
          return;
        }
      }
    }

    /**
     * Overrideable sorting method
     * @param {HTMLTableHeaderCellElement} tableHeaderCell
     * @param {boolean} [ascending=false]
     * @return {void}
     */

  }, {
    key: 'updateSortColumn',
    value: function updateSortColumn(tableHeaderCell, ascending) {
      if (tableHeaderCell.cellIndex === -1) {
        // Header not attached to row!
        return;
      }
      /** @type {HTMLTableSectionElement} */
      var tbody = this.element.querySelector('tbody');
      var rows = [];
      for (var i = tbody.rows.length - 1; i >= 0; i -= 1) {
        rows.push(tbody.rows.item(i));
        tbody.deleteRow(i);
      }
      rows.sort(function (a, b) {
        var aCell = a.cells.item(tableHeaderCell.cellIndex);
        var bCell = b.cells.item(tableHeaderCell.cellIndex);
        var aText = aCell.textContent;
        var bText = bCell.textContent;
        if (aCell.hasAttribute('mdw-table-number')) {
          return parseFloat(aText) - parseFloat(bText);
        }
        return aText.localeCompare(bText);
      });
      if (ascending) {
        rows.reverse();
      }
      var fragment = document.createDocumentFragment();
      rows.forEach(function (row) {
        fragment.appendChild(row);
      });
      tbody.appendChild(fragment);
    }

    /**
     * @param {HTMLTableHeaderCellElement=} sortedTableHeaderCell null if none
     * @param {boolean=} [ascending=false]
     * @return {void}
     */

  }, {
    key: 'updateSortIcons',
    value: function updateSortIcons(sortedTableHeaderCell, ascending) {
      if (sortedTableHeaderCell) {
        if (ascending) {
          sortedTableHeaderCell.setAttribute('mdw-sorted', 'reverse');
        } else {
          sortedTableHeaderCell.setAttribute('mdw-sorted', '');
        }
      }
      var tableHeaders = this.element.querySelectorAll('th');
      for (var i = 0; i < tableHeaders.length; i += 1) {
        var otherTableHeader = tableHeaders.item(i);
        if (otherTableHeader !== sortedTableHeaderCell) {
          otherTableHeader.removeAttribute('mdw-sorted');
        }
      }
    }

    /**
     * @param {boolean} value
     * @return {void}
     */

  }, {
    key: 'setCheckOnAllRows',
    value: function setCheckOnAllRows(value) {
      var checkboxes = this.element.querySelectorAll('td[mdw-table-checkbox] input[type=checkbox]');
      for (var i = 0; i < checkboxes.length; i += 1) {
        var checkbox = checkboxes.item(i);
        checkbox.checked = value;
        var currentRow = this.getTableRow(checkbox);
        if (value) {
          currentRow.setAttribute('mdw-selected', '');
        } else {
          currentRow.removeAttribute('mdw-selected');
        }
      }
    }

    /**
     * @param {HTMLElement} element
     * @return {HTMLTableRowElement}
     */

  }, {
    key: 'getTableRow',
    value: function getTableRow(element) {
      if (element === this.element) {
        return null;
      }
      if (element instanceof HTMLTableRowElement) {
        return element;
      }
      if (!element.parentElement) {
        return null;
      }
      return this.getTableRow(element.parentElement);
    }

    /**
     * @param {HTMLElement} element
     * @return {HTMLTableCellElement}
     */

  }, {
    key: 'getTableCell',
    value: function getTableCell(element) {
      if (element === this.element) {
        return null;
      }
      if (element instanceof HTMLTableCellElement) {
        return element;
      }
      if (!element.parentElement) {
        return null;
      }
      return this.getTableCell(element.parentElement);
    }

    /** @return {HTMLTableRowElement[]} */

  }, {
    key: 'getCheckedRows',
    value: function getCheckedRows() {
      var checkboxes = this.element.querySelectorAll('td[mdw-table-checkbox] input[type=checkbox]');
      var checkedRows = [];
      for (var i = 0; i < checkboxes.length; i += 1) {
        /** @type {HTMLInputElement} */
        var checkbox = checkboxes.item(i);
        if (checkbox.checked) {
          var row = this.getTableRow(checkbox);
          if (row) {
            checkedRows.push(row);
          }
        }
      }
      return checkedRows;
    }

    /**
     * @param {boolean} value
     * @return {void}
     */

  }, {
    key: 'setHasSelection',
    value: function setHasSelection(value) {
      if (value) {
        this.element.setAttribute('mdw-has-selection', '');
        return;
      }
      this.element.removeAttribute('mdw-has-selection');
    }
  }]);

  return Table;
}();

exports.Table = Table;

/***/ }),

/***/ 70:
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })

/******/ });