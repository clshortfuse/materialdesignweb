{"version":3,"sources":["webpack:///./_sample-utils.js"],"names":["__webpack_require__","d","__webpack_exports__","convertElementToCode","_core_dom__WEBPACK_IMPORTED_MODULE_0__","element","pug","arguments","length","undefined","linePrefix","htmlType","tagName","toLowerCase","attributes","classes","iterateArrayLike","classList","c","push","attr","name","value","concat","sort","syntaxItems","join","openingHTMLLine","filter","item","trim","closingHTMLLine","lines","innerLines","onlyText","childNodes","child","lineText","HTMLElement","nodeValue","forEach","line"],"mappings":"yFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,GASA,SAASG,EAAqBE,GAAuC,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAjBG,EAAiBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GACzDI,EAAWN,EAAQO,QAAQC,cAE3BC,EAAa,GAEbC,EAAU,GAChBC,YAAiBX,EAAQY,UAAW,SAACC,GACnCH,EAAQI,KAAKD,KAEfF,YAAiBX,EAAQS,WAAY,SAACM,GAClB,UAAdA,EAAKC,OAGLD,EAAKE,MAAMd,OACbM,EAAWK,KAAX,GAAAI,OAAmBH,EAAKC,KAAxB,MAAAE,OAAiCH,EAAKE,MAAtC,MAEAR,EAAWK,KAAKC,EAAKC,SAGzBP,EAAWU,OACX,IAAMC,EAAc,CAClBd,EACAI,EAAQP,OAAR,UAAAe,OAA2BR,EAAQW,KAAK,KAAxC,KAAkD,GAClDZ,EAAWY,KAAK,MAEZC,EAAkBrB,EAAG,GAAAiB,OACP,QAAbZ,GAAsBI,EAAQP,OAAS,GAAKG,GADxBY,OACmCR,EAAQP,OAAR,IAAAe,OAAqBR,EAAQW,KAAK,MAAS,IAD9EH,OACmFT,EAAWN,OAAX,IAAAe,OAAwBT,EAAWY,KAAK,KAAxC,KAAkD,IADrI,IAAAH,OAEnBE,EAAYG,OAAO,SAACC,GAAD,OAAUA,IAAMH,KAAK,KAAKI,OAF1B,KAGrBC,EAAkBzB,EAAM,GAAH,KAAAiB,OAAaZ,EAAb,KACrBqB,EAAQ,CAACL,GAETM,EAAa,GACfC,GAAW,EAiBf,OAhBAlB,YAAiBX,EAAQ8B,WAAY,SAACC,GACpC,IAAIC,EACAD,aAAiBE,aACnBD,EAAWlC,EAAqBiC,EAAO9B,EAAR,KAAAiB,OAAkBb,KACpCoB,SACXI,GAAW,GAEJE,EAAMG,WACXjC,IACF+B,EAAQ,KAAAd,OAAQa,EAAMG,YAGtBF,GAAYA,EAASP,QACvBG,EAAWd,KAAKkB,KAGhBH,EACE5B,EACF,GAAAiB,OAAUb,EAAasB,EAAMN,KAAK,IAAlC,KAAAH,OAAyCU,EAAWP,KAAK,IAAII,QAExDpB,EAAasB,EAAMN,KAAK,IAAMO,EAAWP,KAAK,IAAII,OAASC,GAEpEE,EAAWO,QAAQ,SAACC,GAAD,OAAUT,EAAMb,KAAKsB,KACxCT,EAAMb,KAAKT,EAAaqB,GACjBrB,EAAasB,EAAMJ,OAAO,SAACa,GAAD,OAAUA,EAAKX,SAAQJ,KAAK","file":"docs.common.min.js","sourcesContent":["import { iterateArrayLike } from '../core/dom';\n\n\n/**\n * @param {Element|HTMLElement} element\n * @param {boolean} [pug=false]\n * @param {string} [linePrefix='']\n * @return {string}\n */\nfunction convertElementToCode(element, pug = false, linePrefix = '') {\n  const htmlType = element.tagName.toLowerCase();\n  /** @type {string[]} */\n  const attributes = [];\n  /** @type {string[]} */\n  const classes = [];\n  iterateArrayLike(element.classList, (c) => {\n    classes.push(c);\n  });\n  iterateArrayLike(element.attributes, (attr) => {\n    if (attr.name === 'class') {\n      return;\n    }\n    if (attr.value.length) {\n      attributes.push(`${attr.name}=\"${attr.value}\"`);\n    } else {\n      attributes.push(attr.name);\n    }\n  });\n  attributes.sort();\n  const syntaxItems = [\n    htmlType,\n    classes.length ? `class=\"${classes.join(' ')}\"` : '',\n    attributes.join(' '),\n  ];\n  const openingHTMLLine = pug\n    ? `${htmlType === 'div' && classes.length ? '' : htmlType}${classes.length ? `.${classes.join('.')}` : ''}${attributes.length ? `(${attributes.join(' ')})` : ''}`\n    : `<${syntaxItems.filter((item) => item).join(' ').trim()}>`;\n  const closingHTMLLine = pug ? '' : `</${htmlType}>`;\n  const lines = [openingHTMLLine];\n  /** @type {string[]} */\n  const innerLines = [];\n  let onlyText = true;\n  iterateArrayLike(element.childNodes, (child) => {\n    let lineText;\n    if (child instanceof HTMLElement) {\n      lineText = convertElementToCode(child, pug, `  ${linePrefix}`);\n      if (lineText.trim()) {\n        onlyText = false;\n      }\n    } else if (child.nodeValue) {\n      if (pug) {\n        lineText = `  ${child.nodeValue}`;\n      }\n    }\n    if (lineText && lineText.trim()) {\n      innerLines.push(lineText);\n    }\n  });\n  if (onlyText) {\n    if (pug) {\n      return `${linePrefix + lines.join('')} ${innerLines.join('').trim()}`;\n    }\n    return linePrefix + lines.join('') + innerLines.join('').trim() + closingHTMLLine;\n  }\n  innerLines.forEach((line) => lines.push(line));\n  lines.push(linePrefix + closingHTMLLine);\n  return linePrefix + lines.filter((line) => line.trim()).join('\\n');\n}\n\n/**\n * @param {Element} element\n * @param {string} tagname\n * @return {Element}\n */\nfunction changeElementTagName(element, tagname) {\n  const newElement = document.createElement(tagname);\n  for (let i = element.attributes.length - 1; i >= 0; i -= 1) {\n    const attr = element.attributes.item(i);\n    /** @type {Attr} */\n    const clonedAttr = (attr.cloneNode());\n    newElement.attributes.setNamedItem(clonedAttr);\n  }\n  while (element.firstChild) {\n    newElement.appendChild(element.firstChild);\n  }\n\n  element.parentElement.replaceChild(newElement, element);\n  return newElement;\n}\n\nexport {\n  convertElementToCode,\n  changeElementTagName,\n};\n"],"sourceRoot":""}