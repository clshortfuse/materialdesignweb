/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file is automatically generated. Do not modify it.

/**
 * Utility methods for mathematical operations.
 */

/**
 * The signum function.
 * @param {number} num
 * @return {1|-1|0} 1 if num > 0, -1 if num < 0, and 0 if num = 0
 */
export function signum(num) {
  if (num < 0) {
    return -1;
  }
  if (num === 0) {
    return 0;
  }
  return 1;
}

/**
 * The linear interpolation function.
 * @param {number} start
 * @param {number} stop
 * @param {number} amount
 * @return {number} start if amount = 0 and stop if amount = 1
 */
export function lerp(start, stop, amount) {
  return (1 - amount) * start + amount * stop;
}

/**
 * Clamps an integer between two integers.
 * @param {number} min
 * @param {number} max
 * @param {number} input
 * @return {number} input when min <= input <= max, and either min or max
 * otherwise.
 */
export function clampInt(min, max, input) {
  if (input < min) {
    return min;
  } if (input > max) {
    return max;
  }

  return input;
}

/**
 * Clamps an integer between two floating-point numbers.
 * @param {number} min
 * @param {number} max
 * @param {number} input
 * @return {number} input when min <= input <= max, and either min or max
 * otherwise.
 */
export function clampDouble(min, max, input) {
  if (input < min) {
    return min;
  } if (input > max) {
    return max;
  }

  return input;
}

/**
 * Sanitizes a degree measure as an integer.
 * @param {number} degrees
 * @return {number} a degree measure between 0 (inclusive) and 360
 * (exclusive).
 */
export function sanitizeDegreesInt(degrees) {
  degrees %= 360;
  if (degrees < 0) {
    degrees += 360;
  }
  return degrees;
}

/**
 * Sanitizes a degree measure as a floating-point number.
 * @param {number} degrees
 * @return {number} a degree measure between 0.0 (inclusive) and 360.0
 * (exclusive).
 */
export function sanitizeDegreesDouble(degrees) {
  degrees %= 360;
  if (degrees < 0) {
    degrees += 360;
  }
  return degrees;
}

/**
 * Sign of direction change needed to travel from one angle to
 * another.
 *
 * For angles that are 180 degrees apart from each other, both
 * directions have the same travel distance, so either direction is
 * shortest. The value 1.0 is returned in this case.
 * @param {number} from The angle travel starts from, in degrees.
 * @param {number} to The angle travel ends at, in degrees.
 * @return {number} -1 if decreasing from leads to the shortest travel
 * distance, 1 if increasing from leads to the shortest travel
 * distance.
 */
export function rotationDirection(from, to) {
  const increasingDifference = sanitizeDegreesDouble(to - from);
  return increasingDifference <= 180 ? 1 : -1;
}

/**
 * Distance of two points on a circle, represented using degrees.
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
export function differenceDegrees(a, b) {
  return 180 - Math.abs(Math.abs(a - b) - 180);
}

/**
 * Multiplies a 1x3 row vector with a 3x3 matrix.
 * @param {number[]} row
 * @param {number[][]} matrix
 * @return {number[]}
 */
export function matrixMultiply(row, matrix) {
  const a = row[0] * matrix[0][0] + row[1] * matrix[0][1] + row[2] * matrix[0][2];
  const b = row[0] * matrix[1][0] + row[1] * matrix[1][1] + row[2] * matrix[1][2];
  const c = row[0] * matrix[2][0] + row[1] * matrix[2][1] + row[2] * matrix[2][2];
  return [a, b, c];
}
