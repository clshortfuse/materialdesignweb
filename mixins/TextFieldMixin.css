/* https://m3.material.io/components/text-fields/specs */

/**
 * States:      Enabled            / Hover              / Focus              / Error              / Error Hover        / Error Focus
 * Input:       on-surface         / on-surface         / on-surface         / on-surface         / on-surface         / on-surface
 * Inline:      on-surface-variant / on-surface-variant / on-surface-variant / on-surface-variant / on-surface-variant / on-surface-variant
 * Label:       on-surface-variant / on-surface*        / ink                / error              / on-error-container / error
 * Indicator:   on-surface-variant / on-surface         / ink                / error              / on-error-container / error
 * Caret:       (any)              / (any)              / ink                / (any)              / (any)              / error
 * Outline:     outline            / on-surface         / ink                / error              / on-error-container / error
 * Selection:   on-*               / on-*               / ink                / error              / on-error-container / error
 *
 *
 * *Filled hovered unpopulated label may be on-surface-variant instead
 *
 * Input: Always on-surface
 * Inline: Always on-surface-variant
 * Indicator: same as label
 * Label: same as indicator
 * Outline: outline default, same as label+indicator on :hover or :focus
 * Caret: same as label+indicator+outline (cannot inherit color or use currentColor)
 * Selection:  (cannot inherit color or use currentColor)
 */

:host {
  --mdw-shape__size: var(--mdw-shape__extra-small);
  --mdw-shape__size__bottom-start-size: var(--mdw-shape__size);
  --mdw-shape__size__bottom-end-size: var(--mdw-shape__size);

  --border-width: 1px;
  --border-width__focused: 2px;
  --padding-inline-start: 16px;
  --padding-inline-end: 16px;
  --icon__inline-footprint-start: 0px;
  --icon__inline-footprint-end: 0px;
  --label__inline-start: calc(var(--padding-inline-start) + var(--icon__inline-footprint-start));
  --label__inline-end: calc(var(--padding-inline-start) + var(--icon__inline-footprint-end));

  --control__margin-top: calc(var(--mdw-typescale__body-small__line-height) / 2);
  --control__padding-top: calc((var(--mdw-text-field__ratio) * 16px) - calc(var(--mdw-typescale__body-small__line-height) / 2));
  --control__padding-bottom: calc(var(--mdw-text-field__ratio) * 16px);
  --control__margin-bottom: 0px;
  --mdw-text-field__ratio: 1; /* Density */

  --container-color: transparent;
  --inline-color: rgb(var(--mdw-color__on-surface-variant));
  --outline-color: rgb(var(--mdw-color__outline));
  --label-color: rgb(var(--mdw-color__on-surface-variant));
  --descriptor-opacity: 0.5;
  --mdw-ink: var(--mdw-color__primary);
  --mdw-bg: var(--mdw-color__surface-variant);

  display: block;

  cursor: pointer;

  background-color: transparent;

  /* State layer */
  color: rgb(var(--mdw-color__on-surface));

  font: var(--mdw-typescale__body-large__font);
  letter-spacing: var(--mdw-typescale__body-large__letter-spacing);
}

:host(:is([filled],[color])) {
  --container-color: rgb(var(--mdw-bg));
}

:host([icon]) {
  --padding-inline-start: 12px;
  --icon__inline-footprint-start: 40px;
}

:host([trailing-icon]) {
  --padding-inline-end: 12px;
  --icon__inline-footprint-end: 40px;
}

:host(:is([color], [ink])) {
  background-color: transparent;
  color: rgb(var(--mdw-color__on-surface));
}

:host(:hover) {
  --label-color: rgb(var(--mdw-color__on-surface));
}

:host(:is(:focus, :hover:focus)) {
  --label-color: rgb(var(--mdw-ink));
  --border-width: var(--border-width__focused);
}

:host(:is(:hover, :focus)) {
  --outline-color: var(--label-color);
}

label {
  position: relative;

  display: flex;

  align-items: center;

  padding-inline-start: var(--padding-inline-start);
  padding-inline-end: var(--padding-inline-end);

  cursor: inherit;

  background-color: var(--container-color);
  border-radius: inherit;

  font-weight: inherit;
  font-size: inherit;
  line-height: inherit;
  font-family: inherit;
  letter-spacing: inherit;

  transition: none 200ms cubic-bezier(0.0, 0.0, 0.2, 1);
}

:host(:focus) label {
  transition: none 100ms cubic-bezier(0.4, 0.0, 1, 1);
}

#prefix,
#suffix,
#control::placeholder {
  opacity: var(--descriptor-opacity);

  color: var(--inline-color);

  transition-duration: inherit;
  transition-property: opacity;
  transition-timing-function: inherit;
  will-change: opacity;
}

:host([label]:is([filled],[outlined])) {
  --descriptor-opacity: 0;
}

#control {
  position: relative;

  align-self: flex-start;

  display: inline;

  box-sizing: border-box;

  block-size: auto;
  inline-size: 100%;

  min-inline-size: none;
  flex: 1;
  border-block-start: solid var(--control__margin-top) transparent;
  border-block-end: solid var(--control__margin-bottom) transparent;
  padding-block: var(--control__padding-top) var(--control__padding-bottom);

  appearance: none;
  caret-color: var(--label-color);
  cursor: auto;

  visibility: visible;

  background-color: transparent;
  border-color: transparent;
  color: inherit;
  /* rgb(var(--mdw-color__on-surface)); */

  font-weight: inherit;
  font-size: inherit;
  line-height: inherit;
  font-family: inherit;
  letter-spacing: inherit;

  transition-duration: inherit;
  transition-property: color;
  transition-timing-function: inherit;
}

#suffix,
#prefix {
  /* Symmetrical to allow centering */
  margin-block: var(--control__margin-top) var(--control__margin-bottom);
  padding-block: var(--control__padding-top) var(--control__padding-bottom);
}

/* stylelint-disable-next-line plugin/no-unsupported-browser-features */
#control::selection {
  background-color: var(--label-color);
  color: rgb(var(--mdw-color__surface));
}

#state {
  --mdw-state__focus-opacity: 0;
}

mdw-icon {
  --mdw-icon__size: 24px;
  align-self: center;

  color: var(--inline-color);
}

#icon {
  order: -2;

  margin-inline-end: 16px;
}

#prefix {
  order: -1;
}

#suffix {
  order: 1;
}

#trailing-icon {
  order: 2;

  margin-inline-start: 16px;
}

#indicator {
  position: absolute;
  inset-block-end: 0;
  inset-inline: 0;

  border-block-end: 2px solid var(--label-color);

  pointer-events: none;

  transform: scaleY(0.5);
  z-index: 1; /* Force new layer to avoid repaint */

  transition-duration: inherit;
  transition-property: transform;
  transition-timing-function: inherit;
  will-change: transform;
}

#outline {
  position: absolute;
  inset: 0;

  z-index: 2; /* Force new layer to avoid repaint */

  border-color: rgb(var(--mdw-color__outline));

  transition: inherit;
}

:host(:focus) #indicator {
  transform: scaleY(1);

}

#label-text {
  position: absolute;
  inset-block-start: 0;
  inset-inline-start: var(--label__inline-start);
  inset-inline-end: var(--label__inline-end);

  display: block;
  overflow-x: clip;
  overflow-y: hidden;

  padding: 0;
  /* FireFox bug */

  opacity: 1;
  transform: translateY(calc((var(--control__margin-top) + var(--control__padding-top) + 100% + var(--control__padding-bottom) + var(--control__margin-bottom)) / 2)) translateY(-50%);

  color: var(--label-color);

  text-overflow: ellipsis;
  white-space: nowrap;

  transition-duration: inherit;
  transition-property: padding, font-size, transform;
  transition-timing-function: inherit;
  /*Expand*/

  will-change: padding, font-size, transform;
}

:host([outlined]) {
  --label__inline-start: 0;
  --label__inline-end: 0;
  --container-color: transparent;
}

#label:is([focused], [populated]) :is(#prefix, #suffix) {
  opacity: 1;
}

#wrapper {
  /* Exists to block flex from passing center position to absolutely position children */
  /* Avoids paint on focus */
  /* transition: inherit; */
}

/* If no label */
#label:is([focused], [populated]) #control::placeholder {
  opacity: 0.70;
}

:host([input-suffix]) #control {
  text-align: end;
}

#label:is([focused], [populated]) #label-text {
  transform: translateY(calc(var(--mdw-text-field__ratio) * 8px));

  font: var(--mdw-typescale__body-small__font);
  /* Not spec: Should only use font-size and line-height */
  letter-spacing: var(--mdw-typescale__body-small__letter-spacing);
}

/** Outlined **/

:host([outlined]) #indicator {
  display: none;
}

:host([outlined]) #outline {
  display: flex;

  border: solid var(--border-width) var(--outline-color);

  pointer-events: none;

  border-radius: var(--mdw-shape__size);
}

:host([outlined][label]) #outline {
  --psuedo-content: '';
  border-color: transparent;
  border-block-end-color: var(--outline-color);
  border-radius: min(12px, var(--mdw-shape__size));
}

#outline::before,
#outline::after {
  content: var(--psuedo-content, none);

  box-sizing: border-box;
  margin-block: calc(var(--border-width) * -1);
  margin-inline: calc(var(--border-width) * -1);
  border: solid var(--border-width) var(--outline-color);

  border-block-end-color: transparent;
}

#outline::before {
  inline-size: 16px;

  margin-inline-end: 0;

  border-start-start-radius: inherit;
  border-end-start-radius: inherit;
  border-inline-end: none;

}

#outline::after {
  min-inline-size: 12px;
  flex: 1;
  margin-inline-start: 0;
  border-start-end-radius: inherit;
  border-end-end-radius: inherit;
  border-inline-start: none;

}

#gap::before,
#gap::after {
  content: var(--psuedo-content, none);

  position: absolute;
  inset: 0;

  border-block-start: solid var(--border-width) var(--outline-color);

  transition-duration: inherit;
  transition-property: transform;
  transition-timing-function: inherit;
  will-change: transform, border-width, border-color;

}

#gap::before {
  /* Slightly oversized to prevent seams */
  /* TODO: Consider cloned text to force center */
  margin-inline-start: -1px;

  transform: var(--gap-transform, scaleX(0.45));
  transform-origin: 0 0;
}

#gap::after {
  /* Slightly oversized to prevent seams */
  margin-inline-end: -1px;

  transform: var(--gap-transform, scaleX(0.65));
  transform-origin: 100% 0;
}

#gap {
  /* Close gap */
  transition-duration: inherit;
  transition-property: padding;
  transition-timing-function: inherit;
}

#label:is([focused], [populated]) #gap {
  /* Open gap */
  --gap-transform: scaleX(0);
}

:host(:is([filled][label])) label {
  align-items: flex-start;
}

:host([outlined]) #gap {
  position: relative;

  box-sizing: border-box;
  max-inline-size: calc(100% - 24px);
  margin-block: calc(var(--border-width) * -1);
  padding-inline-start: var(--icon__inline-footprint-start, 0px);
  padding-inline-end: var(--icon__inline-footprint-end, 0px);

  /* Padding instead of transform because max content width changes based on font-size and icon */
  transition-property: padding;
  will-change: margin, padding;
}

:host([outlined]) #outline::before {
  inline-size: 12px;
  flex: none;
}

:host([filled]) {
  --mdw-shape__size__bottom-start-size: 0;
  --mdw-shape__size__bottom-end-size: 0;
}

:host([dense]) {
  --mdw-text-field__ratio: 0.75;
}

:host([filled][dense]) {
  --mdw-text-field__ratio: 0.5;
}

:host(:is([filled][label])) {
  --control__margin-top: calc((var(--mdw-text-field__ratio) * 8px) + var(--mdw-typescale__body-small__line-height));
  --control__padding-top: 0px;
  --control__padding-bottom: calc(var(--mdw-text-field__ratio) * 4px);
  --control__margin-bottom: calc(var(--mdw-text-field__ratio) * 4px);
}

:host([outlined]) #label-text {
  position: relative;
}

:host([outlined]) #state {
  display: none;
}

#outline:is(:hover, :focus) {
  border-color: currentColor;
}

#label[outlined]:is([focused], [populated]) {
  --icon__inline-footprint-start: 0px;
}

#label[outlined]:is([focused], [populated]) #label-text {
  padding-inline: 4px;

  transform: translateY(-50%);
}

#supporting {
  min-block-size: var(--mdw-typescale__body-small__line-height);
  margin-block-start: 4px;
  margin-inline: 16px;

  font-weight: var(--mdw-typescale__body-small__font-weight); /* Not spec */
  font-size: var(--mdw-typescale__body-small__font-size);
  line-height: var(--mdw-typescale__body-small__line-height);
  font-family: var(--mdw-typescale__body-small__font-family); /* Not spec */
  letter-spacing: var(--mdw-typescale__body-small__letter-spacing); /* Not spec */
}

:host(:is([error], [invalid])) #supporting-slot {
  display: none;
}

:host(:is([error], [invalid])) {
  --label-color: rgb(var(--mdw-color__error));
  --outline-color: var(--label-color);
}

:host(:is([error], [invalid]):hover) {
  --label-color: rgb(var(--mdw-color__on-error-container));
}

:host(:is([error], [invalid]):focus) {
  --label-color: rgb(var(--mdw-color__error));
}

:host(:is([disabled], [disabled]:hover)) {
  --label-color: rgb(var(--mdw-color__on-surface));
  --outline-color: rgba(var(--mdw-color__on-surface), calc(0.12/0.38));
  --container-color: rgba(var(--mdw-color__on-surface), calc(0.04/0.38));
  opacity: 0.38;

  color: rgb(var(--mdw-color__on-surface));
}

:host([disabled][outlined]) {
  --container-color: transparent;
}